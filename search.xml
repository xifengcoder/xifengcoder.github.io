<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo个性化配置</title>
    <url>/2021/12/26/hexo_config/</url>
    <content><![CDATA[<h1 id="Hexo使用指令"><a href="#Hexo使用指令" class="headerlink" title="Hexo使用指令"></a>Hexo使用指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">init</span> [folder]</span><br></pre></td></tr></table></figure>

<p>新建一个网站。如果没有设置 <code>folder</code> ，Hexo 默认在目前的文件夹建立网站。</p>
<p>本命令相当于执行了以下几步：</p>
<ol>
<li>Git clone <a href="https://github.com/hexojs/hexo-starter">hexo-starter</a> 和 <a href="https://github.com/hexojs/hexo-theme-landscape">hexo-theme-landscape</a> 主题到当前目录或指定目录。</li>
<li>使用 <a href="https://classic.yarnpkg.com/lang/en/">Yarn 1</a>、<a href="https://pnpm.js.org/">pnpm</a> 或 <a href="https://docs.npmjs.com/cli/install">npm</a> 包管理器下载依赖（如有已安装多个，则列在前面的优先）。npm 默认随 <a href="https://hexo.io/docs/#Install-Node-js">Node.js</a> 安装。</li>
</ol>
<span id="more"></span>

<h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br></pre></td></tr></table></figure>

<p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> <span class="string">&quot;post title with whitespace&quot;</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--path</code></td>
<td align="left">自定义新文章的路径</td>
</tr>
<tr>
<td align="left"><code>-r</code>, <code>--replace</code></td>
<td align="left">如果存在同名文章，将其替换</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--slug</code></td>
<td align="left">文章的 Slug，作为新文章的文件名和发布后的 URL</td>
</tr>
</tbody></table>
<p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> --path about/me <span class="string">&quot;About me&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p>
<p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> page <span class="comment">--path about/me</span></span><br></pre></td></tr></table></figure>

<p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p>
<h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure>

<p>生成静态文件。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-d</code>, <code>--deploy</code></td>
<td align="left">文件生成后立即部署网站</td>
</tr>
<tr>
<td align="left"><code>-w</code>, <code>--watch</code></td>
<td align="left">监视文件变动</td>
</tr>
<tr>
<td align="left"><code>-b</code>, <code>--bail</code></td>
<td align="left">生成过程中如果发生任何未处理的异常则抛出异常</td>
</tr>
<tr>
<td align="left"><code>-f</code>, <code>--force</code></td>
<td align="left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td>
</tr>
<tr>
<td align="left"><code>-c</code>, <code>--concurrency</code></td>
<td align="left">最大同时生成文件的数量，默认无限制</td>
</tr>
</tbody></table>
<p>该命令可以简写为</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure>

<h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] <span class="tag">&lt;<span class="name">filename</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>发表草稿。</p>
<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>

<p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p>
<table>
<thead>
<tr>
<th align="left">选项</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-p</code>, <code>--port</code></td>
<td align="left">重设端口</td>
</tr>
<tr>
<td align="left"><code>-s</code>, <code>--static</code></td>
<td align="left">只使用静态文件</td>
</tr>
<tr>
<td align="left"><code>-l</code>, <code>--log</code></td>
<td align="left">启动日记记录，使用覆盖记录格式</td>
</tr>
</tbody></table>
<h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>

<p>部署网站。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-g</code>, <code>--generate</code></td>
<td align="left">部署之前预先生成静态文件</td>
</tr>
</tbody></table>
<p>该命令可以简写为：</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure>

<h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure>

<p>渲染文件。</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o</code>, <code>--output</code></td>
<td align="left">设置输出路径</td>
</tr>
</tbody></table>
<h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ hexo migrate &lt;<span class="keyword">type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>从其他博客系统 <a href="https://hexo.io/zh-cn/docs/migration">迁移内容</a>。</p>
<h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure>

<p>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。</p>
<p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">$ hexo list &lt;<span class="keyword">type</span>&gt;</span><br></pre></td></tr></table></figure>

<p>列出网站资料。</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="built_in">version</span></span><br></pre></td></tr></table></figure>

<p>显示 Hexo 版本。</p>
<h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><h3 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--safe</span></span><br></pre></td></tr></table></figure>

<p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p>
<h3 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--debug</span></span><br></pre></td></tr></table></figure>

<p>在终端中显示调试信息并记录到 <code>debug.log</code>。当您碰到问题时，可以尝试用调试模式重新执行一次，并 <a href="https://github.com/hexojs/hexo/issues/new">提交调试信息到 GitHub</a>。</p>
<h3 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--silent</span></span><br></pre></td></tr></table></figure>

<p>隐藏终端信息。</p>
<h3 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 使用 custom<span class="variable">.yml</span> 代替默认的 <span class="number">_</span><span class="keyword">config</span><span class="variable">.yml</span>$ hexo server --<span class="keyword">config</span> custom<span class="variable">.yml</span># 使用 custom<span class="variable">.yml</span> 和 custom2<span class="variable">.json</span>，其中 custom2<span class="variable">.json</span> 优先级更高$ hexo <span class="keyword">generate</span> --<span class="keyword">config</span> custom<span class="variable">.yml</span>,custom2<span class="variable">.json</span>,custom3<span class="variable">.yml</span></span><br></pre></td></tr></table></figure>

<p>自定义配置文件的路径，指定这个参数后将不再使用默认的 <code>_config.yml</code>。<br>你可以使用一个 YAML 或 JSON 文件的路径，也可以使用逗号分隔（无空格）的多个 YAML 或 JSON 文件的路径。例如：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 使用 custom<span class="variable">.yml</span> 代替默认的 <span class="number">_</span><span class="keyword">config</span><span class="variable">.yml</span>$ hexo server --<span class="keyword">config</span> custom<span class="variable">.yml</span># 使用 custom<span class="variable">.yml</span>, custom2<span class="variable">.json</span> 和 custom3<span class="variable">.yml</span>，其中 custom3<span class="variable">.yml</span> 优先级最高，其次是 custom2<span class="variable">.json</span>$ hexo <span class="keyword">generate</span> --<span class="keyword">config</span> custom<span class="variable">.yml</span>,custom2<span class="variable">.json</span>,custom3<span class="variable">.yml</span></span><br></pre></td></tr></table></figure>

<p>当你指定了多个配置文件以后，Hexo 会按顺序将这部分配置文件合并成一个 <code>_multiconfig.yml</code>。如果遇到重复的配置，排在后面的文件的配置会覆盖排在前面的文件的配置。这个原则适用于任意数量、任意深度的 YAML 和 JSON 文件。</p>
<h3 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="comment">--draft</span></span><br></pre></td></tr></table></figure>

<p>显示 <code>source/_drafts</code> 文件夹中的草稿文章。</p>
<h3 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">$ hexo --cwd <span class="regexp">/path/</span>to/cwd</span><br></pre></td></tr></table></figure>

<p>自定义当前工作目录（Current working directory）的路径。</p>
<p>在next主题配置过程中，做了一些个性化修改，包括图片模式、博文置顶、背景修改、主题颜色、不蒜子统计显示、修改内容宽度以及文章分割线长度和间距修改。</p>
<!-- more -->

<h3 id="首页文章上下间距以及文章分割线长度修改"><a href="#首页文章上下间距以及文章分割线长度修改" class="headerlink" title="首页文章上下间距以及文章分割线长度修改"></a>首页文章上下间距以及文章分割线长度修改</h3><h4 id="修改分割线宽度："><a href="#修改分割线宽度：" class="headerlink" title="修改分割线宽度："></a>修改分割线宽度：</h4><p>themes\hexo-theme-next-8.8.0\source\css_common\components\post\post-footer.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-eof</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: $grey-light;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: $post-eof-margin-top auto $post-eof-margin-bottom;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75%</span>; # 分割线宽度</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.post-block</span><span class="selector-pseudo">:last-of-type</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="修改上下间距："><a href="#修改上下间距：" class="headerlink" title="修改上下间距："></a>修改上下间距：</h4><p>themes\hexo-theme-next-8.8.0\source\css_variable\base.styl</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$post-eof-<span class="attribute">margin-top</span>          = <span class="number">40px</span>; //  or <span class="number">160px</span> for more white space;</span><br><span class="line">$post-eof-<span class="attribute">margin-bottom</span>       = <span class="number">30px</span>; //  or <span class="number">120px</span> for less white space;</span><br></pre></td></tr></table></figure>

<p>有一篇介绍比较详细的文章，解决了我不少问题，特表感谢：</p>
<p> Next主题的安装、优化、修改（<a href="http://sixiwenwu.com/88/%EF%BC%89">http://sixiwenwu.com/88/）</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之回文串分割</title>
    <url>/2021/11/17/string_split/</url>
    <content><![CDATA[<p>给你一个字符串 s ，如果可以将它分割成三个 非空 回文子字符串，那么返回 true ，否则返回 false 。</p>
<p>当一个字符串正着读和反着读是一模一样的，就称其为 回文字符串 。</p>
<span id="more"></span>
<p><strong>示例 1</strong>：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;abcbdd&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：<span class="string">&quot;abcbdd&quot;</span> = <span class="string">&quot;a&quot;</span> + <span class="string">&quot;bcb&quot;</span> + <span class="string">&quot;dd&quot;</span>，三个子字符串都是回文的。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;bcbddxy&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：s 没办法被分割成 <span class="number">3</span> 个回文子字符串。</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<p>3 &lt;= s.length &lt;= 2000<br>s只包含小写英文字母。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-partitioning-iv">https://leetcode-cn.com/problems/palindrome-partitioning-iv</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>解答：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPartitioning</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = s.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span>[][] dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[len][len];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//n为子串的长度，依次计算长度从2到len的子串是否为回文串。</span></span><br><span class="line">        <span class="comment">//我们只用到dp数组的右上半部分。计算长度为n的子串是否为回文时，用到了长度为n - 1的子串是否为回文的值。</span></span><br><span class="line">        <span class="comment">//而我们的计算正式n从小到大计算的，因此正好可以使用。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">2</span>; n &lt;= len; n++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> j = i + n - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(n == <span class="number">2</span> &amp;&amp; s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                    dp[i][j] = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i+<span class="number">1</span>][j-<span class="number">1</span>]&amp;&amp; s.charAt(i) == s.charAt(j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//分成三段：</span></span><br><span class="line">        <span class="comment">//[i, i - 1]、[i, j - 1]、[j, len - 1]。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[<span class="number">0</span>][i - <span class="number">1</span>] &amp;&amp; dp[i][j - <span class="number">1</span>] &amp;&amp; dp[j][s.length() - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%9B%9E%E6%96%87%E5%88%86%E5%89%B2.jpg" alt="回文分割"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基础算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之二叉树</title>
    <url>/2022/01/15/binarytree/</url>
    <content><![CDATA[<h4 id="二叉树展开为链表"><a href="#二叉树展开为链表" class="headerlink" title="二叉树展开为链表"></a><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">二叉树展开为链表</a></h4><p>给你二叉树的根结点 root ，请你将它展开为一个单链表：</p>
<ul>
<li>展开后的单链表应该同样使用 TreeNode ，其中 right 子指针指向链表中下一个结点，而左子指针始终为 null 。</li>
<li>展开后的单链表应该与二叉树 先序遍历 顺序相同。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：root = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="keyword">null</span>,<span class="number">6</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="keyword">null</span>,<span class="number">2</span>,<span class="keyword">null</span>,<span class="number">3</span>,<span class="keyword">null</span>,<span class="number">4</span>,<span class="keyword">null</span>,<span class="number">5</span>,<span class="keyword">null</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<p>示例2：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="comment">[]</span></span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：root = <span class="comment">[0]</span></span><br><span class="line">输出：<span class="comment">[0]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>树中结点数在范围 <code>[0, 2000]</code> 内</li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list">https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>解题思路:</p>
<p>题目要求将二叉树转化为与它的先序遍历顺序相同的单链表，可以将根结点的整个左子树挂到右子数上，将原来的右子树先暂存起来。这样是为了采用深度优先遍历（dfs）的形式，待左子树的所有结点都转化完成后，再操作右子树。</p>
<h4 id="二叉树中所有距离为-K-的结点"><a href="#二叉树中所有距离为-K-的结点" class="headerlink" title="二叉树中所有距离为 K 的结点"></a><a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">二叉树中所有距离为 K 的结点</a></h4><p>给定一个二叉树（具有根结点 root）， 一个目标结点 target ，和一个整数值 K 。</p>
<p>返回到目标结点 target 距离为 K 的所有结点的值的列表。 答案可以以任何顺序返回。</p>
<p>示例 1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：root = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">7</span>,<span class="number">4</span>], target = <span class="number">5</span>, K = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">7</span>,<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">解释：</span><br><span class="line">所求结点为与目标结点（值为 <span class="number">5</span>）距离为 <span class="number">2</span> 的结点，</span><br><span class="line">值分别为 <span class="number">7</span>，<span class="number">4</span>，以及 <span class="number">1</span></span><br><span class="line"></span><br><span class="line">注意，输入的 <span class="string">&quot;root&quot;</span> 和 <span class="string">&quot;target&quot;</span> 实际上是树上的结点。</span><br><span class="line">上面的输入仅仅是对这些对象进行了序列化描述。</span><br></pre></td></tr></table></figure>


<p>提示：</p>
<p>给定的树是非空的。<br>树上的每个结点都具有唯一的值 0 &lt;= node.val &lt;= 500 。<br>目标结点 target 是树上的结点。<br>0 &lt;= K &lt;= 1000.</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree">https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>解题思路:</p>
<p>题目要求距离target结点为k的所有结点，那么从target出发有三个方向：</p>
<ol>
<li>左子结点</li>
<li>右子结点</li>
<li>父结点</li>
</ol>
<p>为了防止循环走，即从node开始走到node.left，但是统计距离node.left的时，三个方向中又包含了到父结点node的，因此需要区分来源，为每一个结点添加指向父结点的边。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;Integer, TreeNode&gt; parents = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">distanceK</span><span class="params">(TreeNode root, TreeNode target, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        findParents(root);</span><br><span class="line">        findResults(target, target, <span class="number">0</span>, k);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将node左右子树的parent指向node。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findParents</span><span class="params">(TreeNode node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.put(node.left.val, node);</span><br><span class="line">            findParents(node.left);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            parents.put(node.right.val, node);</span><br><span class="line">            findParents(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">findResults</span><span class="params">(TreeNode node, TreeNode from, <span class="keyword">int</span> distance, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(distance == k) &#123;</span><br><span class="line">            results.add(node.val);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(from != node.left) &#123;</span><br><span class="line">            findResults(node.left, node, distance + <span class="number">1</span>, k);</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(from != node.right) &#123;</span><br><span class="line">            findResults(node.right, node, distance + <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(from != parents.get(node.val)) &#123;</span><br><span class="line">            findResults(parents.get(node.val), node, distance + <span class="number">1</span>, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">二叉树的最近公共祖先</a></h4><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">7</span>,<span class="number">4</span>], <span class="attr">p</span> = <span class="number">5</span>, <span class="attr">q</span> = <span class="number">1</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：节点 <span class="number">5</span> 和节点 <span class="number">1</span> 的最近公共祖先是节点 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2018/12/14/binarytree.png" alt="img"></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">7</span>,<span class="number">4</span>], <span class="attr">p</span> = <span class="number">5</span>, <span class="attr">q</span> = <span class="number">4</span></span><br><span class="line">输出：<span class="number">5</span></span><br><span class="line">解释：节点 <span class="number">5</span> 和节点 <span class="number">4</span> 的最近公共祖先是节点 <span class="number">5</span> 。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">root</span> = [<span class="number">1</span>,<span class="number">2</span>], <span class="attr">p</span> = <span class="number">1</span>, <span class="attr">q</span> = <span class="number">2</span></span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure>


<h4 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title=" 二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/"> 二叉搜索树的最近公共祖先</a></h4><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p>
<p>例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]</p>
<p> <img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png" alt="img"> </p>
<p>示例 1:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">root</span> = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="number">5</span>], <span class="attr">p</span> = <span class="number">2</span>, <span class="attr">q</span> = <span class="number">8</span></span><br><span class="line">输出: <span class="number">6</span></span><br><span class="line">解释: 节点 <span class="number">2</span> 和节点 <span class="number">8</span> 的最近公共祖先是 <span class="number">6</span>。</span><br></pre></td></tr></table></figure>

<p>示例 2:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">root</span> = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="number">5</span>], <span class="attr">p</span> = <span class="number">2</span>, <span class="attr">q</span> = <span class="number">4</span></span><br><span class="line">输出: <span class="number">2</span></span><br><span class="line">解释: 节点 <span class="number">2</span> 和节点 <span class="number">4</span> 的最近公共祖先是 <span class="number">2</span>, 因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure>
<p><strong>说明:</strong></p>
<ul>
<li>所有节点的值都是唯一的。</li>
<li>p、q 为不同节点且均存在于给定的二叉搜索树中。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>解题思路一：</p>
<p>题目是求<strong>二叉搜索树</strong>的最近公共祖先，那要先想一下二叉搜索树的特性：中序遍历是有序的。因为p和q已经明确肯定会存在于二叉树中，那么可以先找出从root结点到p和q的路径，然后找出两者的路径中公共前缀中最大的那个结点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; pathOfP = getPath(root, p);</span><br><span class="line">        List&lt;TreeNode&gt; pathOfQ = getPath(root, q);</span><br><span class="line"></span><br><span class="line">        TreeNode result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pathOfP.size() &amp;&amp; i &lt; pathOfQ.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pathOfP.get(i) == pathOfQ.get(i)) &#123;</span><br><span class="line">                result = pathOfP.get(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;TreeNode&gt; <span class="title">getPath</span><span class="params">(TreeNode root, TreeNode target)</span> </span>&#123;</span><br><span class="line">        List&lt;TreeNode&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(root != target) &#123;</span><br><span class="line">            <span class="keyword">if</span>(target.val &lt; root.val) &#123;</span><br><span class="line">                path.add(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(target.val &gt; root.val) &#123;</span><br><span class="line">                path.add(root);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        path.add(root);</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复杂度分析：</p>
<p>时间复杂度： 最坏情况下O(n)。获取从root到target结点的算法复杂度平均为：O(logn)，最坏情况下为：O(n)。</p>
<p>空间复杂度：O(n)。</p>
<h4 id="二叉树中的最大路径和"><a href="#二叉树中的最大路径和" class="headerlink" title="二叉树中的最大路径和"></a><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">二叉树中的最大路径和</a></h4><p>路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。</p>
<p>路径和 是路径中各节点值的总和。</p>
<p>给你一个二叉树的根节点 root ，返回其 最大路径和 。</p>
<p><strong>示例 1：</strong></p>
<p> <img src="https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg" alt="img"> </p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [1,2,3]</span><br><span class="line">输出：6</span><br><span class="line">解释：最优路径是<span class="number"> 2 </span>-&gt;<span class="number"> 1 </span>-&gt;<span class="number"> 3 </span>，路径和为<span class="number"> 2 </span>+<span class="number"> 1 </span>+<span class="number"> 3 </span>= 6</span><br></pre></td></tr></table></figure>

<p><strong>示例</strong> 2：</p>
<p> <img src="https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg" alt="img"> </p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">输入：root = [-10,9,20,null,null,15,7]</span><br><span class="line">输出：42</span><br><span class="line">解释：最优路径是<span class="number"> 15 </span>-&gt;<span class="number"> 20 </span>-&gt;<span class="number"> 7 </span>，路径和为<span class="number"> 15 </span>+<span class="number"> 20 </span>+<span class="number"> 7 </span>= 42</span><br></pre></td></tr></table></figure>

<p>提示：</p>
<ul>
<li>树中节点数目范围是 [1, 3 * 104]</li>
<li> -1000 &lt;= Node.val &lt;= 1000</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum">https://leetcode-cn.com/problems/binary-tree-maximum-path-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<p>解题思路：</p>
<p>求二叉树中的最大路径和，首先能想到的是路径可以从上往下，或从下往上，或先往上、然后再折向下（<strong>但是只能折一次，不可能折两次</strong>）。因此最大路径可能出现的情况：</p>
<ol>
<li>只包含某个结点一个元素；</li>
<li>从某个结点沿左子树往下（单向路径）；</li>
<li>从某个结点沿右子树往下（单向路径）；</li>
<li>从某个结点的左子树向上，经过该结点、然后再往右子树（双向路径，先往上、再往下）。</li>
</ol>
<p>采用递归的思想，记dfs(TreeNode root)返回的是以root为起点的最大路径和，注意以root为起点的路径只会是单向路径，不可能是双向的。那么对于以上四种情况，结果分别如下：</p>
<ol>
<li>root.val；</li>
<li>root.val + dfs(root.left)；</li>
<li>root.val + dfs(root.right)；</li>
<li>dfs(root.left) + root.val + dfs(root.right)；</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = Integer.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        findMaxPathSum(root);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以root作为起点的最大路径和。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findMaxPathSum</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> leftMax = findMaxPathSum(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightMax = findMaxPathSum(root.right);</span><br><span class="line">        <span class="keyword">int</span> res = Math.max(root.val, root.val + Math.max(leftMax, rightMax));</span><br><span class="line">        result = Math.max(result, Math.max(res, leftMax + root.val + rightMax));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除二叉搜索树中的节点"><a href="#删除二叉搜索树中的节点" class="headerlink" title="删除二叉搜索树中的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">删除二叉搜索树中的节点</a></h4><p>给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>
<p>一般来说，删除节点可分为两个步骤：</p>
<p>首先找到需要删除的节点；<br>如果找到了，删除它。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/delete-node-in-a-bst">https://leetcode-cn.com/problems/delete-node-in-a-bst</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h5 id="解题思路一："><a href="#解题思路一：" class="headerlink" title="解题思路一："></a>解题思路一：</h5><p>找到目标节点target，删除target的后继节点，然后将其值赋给target</p>
<ol>
<li><p>如果key &lt; root.val，说明要删除的节点在右子树，<code>root.right = deleteNode(root.right, key)</code>；</p>
</li>
<li><p>如果 key &gt; root.val，说明要删除的节点在左子树，<code>root.left = deleteNode(root.left, key)</code>;</p>
</li>
<li><p>如果key == root.val，说明root就是我们要删除的节点。分三种情况：–÷</p>
<ul>
<li><p>如果root没有左子树，则返回root.right;</p>
</li>
<li><p>如果root没有右子树，则返回root.left;</p>
</li>
<li><p>如果root同时拥有左、右子树，则先找到root的后继节点，记为successor，同时记录successor的parent，记为succParent。</p>
<p>将successor的值赋给root后，删除successor节点。</p>
</li>
</ul>
</li>
</ol>
<p>注意：successor是root的右子树中最左下角的节点，删除它时有两种情况：</p>
<ul>
<li>如果successor是root右子树的根节点，则succParent等于root，则删除时执行：<code>succParent.right = successor.right</code>;</li>
<li>否则，删除时需执行：<code>succParent.left = successor.right</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; root.val) &#123;</span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.val) &#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            TreeNode succParent = root;</span><br><span class="line">            TreeNode successor = root.right;</span><br><span class="line">            <span class="keyword">while</span> (successor.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                succParent = successor;</span><br><span class="line">                successor = successor.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将successor的值赋给root, 然后删除successor结点。</span></span><br><span class="line">            root.val = successor.val;</span><br><span class="line">            <span class="keyword">if</span> (succParent != root) &#123;</span><br><span class="line">                succParent.left = successor.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                succParent.right = successor.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="解题思路二："><a href="#解题思路二：" class="headerlink" title="解题思路二："></a>解题思路二：</h5><p>找到目标节点target，删除target，target的后继结点成为树的根结点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SolutionII</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (key &lt; root.val) &#123;</span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; root.val) &#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除root结点, root的后继结点成为树的根结点。</span></span><br><span class="line">            TreeNode newRoot = findMin(root.right);</span><br><span class="line">            newRoot.right = deleteMin(root.right);</span><br><span class="line">            newRoot.left = root.left;</span><br><span class="line">            <span class="keyword">return</span> newRoot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找root为根结点的树中的最小结点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">findMin</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除root为根结点的树中的最小结点，返回删除后的根结点。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">deleteMin</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root.right;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left = deleteMin(root.left);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之动态规划</title>
    <url>/2021/11/25/dynamic_programming/</url>
    <content><![CDATA[<h4 id="一、动态规划的三个特征："><a href="#一、动态规划的三个特征：" class="headerlink" title="一、动态规划的三个特征："></a>一、动态规划的三个特征：</h4><h4 id="1-最优子结构-optimal-substructure"><a href="#1-最优子结构-optimal-substructure" class="headerlink" title="(1) 最优子结构(optimal substructure)"></a>(1) 最优子结构(optimal substructure)</h4><p>如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质；</p>
<h4 id="2-无后效性"><a href="#2-无后效性" class="headerlink" title="(2) 无后效性"></a>(2) 无后效性</h4><p>有两层含义：</p>
<ol>
<li>子问题的解一旦确定，就不再改变，不受在这之后、包含它的更大的问题的求解决策的影响；</li>
<li>某阶段的状态一旦确定，则后面各阶段不再受该阶段<strong>决策过程</strong>的影响，而只与该阶段的<strong>结果</strong>有关。</li>
</ol>
<h4 id="3-重叠子问题-overlapping-subproblems"><a href="#3-重叠子问题-overlapping-subproblems" class="headerlink" title="(3) 重叠子问题(overlapping subproblems)"></a>(3) 重叠子问题(overlapping subproblems)</h4><p>指在用递归算法自顶向下对问题进行求解时，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。需要对子问题的结果(Subproblem solutions)作记忆化存储(Memoized)。</p>
<h4 id="二、动态规划习题实战"><a href="#二、动态规划习题实战" class="headerlink" title="二、动态规划习题实战"></a>二、动态规划习题实战</h4><h5 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53. 最大子数组和</a></h5><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p>
<p><strong>子数组</strong> 是数组中的一个连续部分。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">输入：nums = [<span class="string">-2</span>,1,<span class="string">-3</span>,4,<span class="string">-1</span>,2,1,<span class="string">-5</span>,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,<span class="string">-1</span>,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">输入：nums </span>=<span class="string"> [1]</span></span><br><span class="line"><span class="string">输出：1</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="string">[5,4,-1,7,8]</span></span><br><span class="line">输出：<span class="number">23</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= nums.length &lt;= 105</code></li>
<li><code>-104 &lt;= nums[i] &lt;= 104</code></li>
</ul>
<p><strong>进阶：</strong>如果你已经实现复杂度为 <code>O(n)</code> 的解法，尝试使用更为精妙的 <strong>分治法</strong> 求解。</p>
<p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/">https://leetcode-cn.com/problems/maximum-subarray/solution/zui-da-zi-xu-he-by-leetcode-solution/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h6 id="题解一"><a href="#题解一" class="headerlink" title="题解一"></a>题解一</h6><p>假设nums 数组的长度是 n，下标从 0 到 n−1。</p>
<p>我们用 f(i)代表以第 i 个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：<br>$$<br>\max_{i=0}^{n}{f(i)}<br>$$<br>因此我们只需要求出每个位置的f(i)，然后返回 f数组中的最大值即可。那么我们如何求 f(i) 呢？我们可以考虑nums[i] 单独成为一段还是加入 f(i-1) 对应的那一段，这取决于nums[i] 和 f(i-1) + nums[i] 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：<br>$$<br>f(i)=max{f(i−1)+nums[i],nums[i]}<br>$$</p>
<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(nums[i], dp[i - <span class="number">1</span>] + nums[i]);</span><br><span class="line">            result = Math.max(result, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="题解二"><a href="#题解二" class="headerlink" title="题解二"></a>题解二</h6><p>因为dp[i]只依赖dp[i - 1]，可以将dp数组降级为一个变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> pre = nums[<span class="number">0</span>]; <span class="comment">//pre初始值为数组第一个元素值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">  dp[i] = Math.max(nums[i], pre + nums[i]); <span class="comment">// ①使用前一个结果计算出dp[i]</span></span><br><span class="line">  pre = dp[i]; <span class="comment">//②将dp[i]赋值给prev，供计算dp[i + 1]使用</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//①和②可以合并为③</span></span><br><span class="line">  pre = Math.max(nums[i], pre + nums[i]); <span class="comment">//③</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pre = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> result = pre;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            pre = Math.max(nums[i], pre + nums[i]);</span><br><span class="line">            result = Math.max(result, pre);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h5 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a>1143. 最长公共子序列</h5><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列 的长度。如果不存在公共子序列 ，返回 0 。</p>
<p>一个字符串的 子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p>
<p>例如，”ace” 是 “abcde” 的子序列，但 “aec” 不是 “abcde” 的子序列。<br>两个字符串的 公共子序列 是这两个字符串所共同拥有的子序列。</p>
<p>示例 1：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abcde&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;ace&quot;</span> </span><br><span class="line">输出：<span class="number">3</span>  </span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;ace&quot;</span> ，它的长度为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abc&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：最长公共子序列是 <span class="string">&quot;abc&quot;</span> ，它的长度为 <span class="number">3</span> 。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">text1</span> = <span class="string">&quot;abc&quot;</span>, <span class="attr">text2</span> = <span class="string">&quot;def&quot;</span></span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：两个字符串没有公共子序列，返回 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= text1.length, text2.length &lt;= 1000</li>
<li>text1 和 text2 仅由小写英文字符组成。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-subsequence">https://leetcode-cn.com/problems/longest-common-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。<br>思路：<br><img src="/images/longest_common_sequence.jpg" alt="longest_common_sequence"></p>
<h6 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = text1.length();</span><br><span class="line">        <span class="keyword">int</span> n = text2.length();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m +<span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c1 = text1.charAt(i - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> c2 = text2.charAt(j - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>( c1 == c2) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进阶题目：</p>
<h5 id="1092-最短公共超序列"><a href="#1092-最短公共超序列" class="headerlink" title="1092. 最短公共超序列"></a>1092. 最短公共超序列</h5><p>给出两个字符串 str1 和 str2，返回同时以 str1 和 str2 作为子序列的最短字符串。如果答案不止一个，则可以返回满足条件的任意一个答案。</p>
<p>（如果从字符串 T 中删除一些字符（也可能不删除，并且选出的这些字符可以位于 T 中的 任意位置），可以得到字符串 S，那么 S 就是 T 的子序列）</p>
<p>示例：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入：<span class="attr">str1</span> = <span class="string">&quot;abac&quot;</span>, <span class="attr">str2</span> = <span class="string">&quot;cab&quot;</span></span><br><span class="line">输出：<span class="string">&quot;cabac&quot;</span></span><br><span class="line">解释：</span><br><span class="line"><span class="attr">str1</span> = <span class="string">&quot;abac&quot;</span> 是 <span class="string">&quot;cabac&quot;</span> 的一个子串，因为我们可以删去 <span class="string">&quot;cabac&quot;</span> 的第一个 <span class="string">&quot;c&quot;</span>得到 <span class="string">&quot;abac&quot;</span>。 </span><br><span class="line"><span class="attr">str2</span> = <span class="string">&quot;cab&quot;</span> 是 <span class="string">&quot;cabac&quot;</span> 的一个子串，因为我们可以删去 <span class="string">&quot;cabac&quot;</span> 末尾的 <span class="string">&quot;ac&quot;</span> 得到 <span class="string">&quot;cab&quot;</span>。</span><br><span class="line">最终我们给出的答案是满足上述属性的最短字符串。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>1 &lt;= str1.length, str2.length &lt;= 1000</li>
<li>str1 和 str2 都由小写英文字母组成。</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shortest-common-supersequence">https://leetcode-cn.com/problems/shortest-common-supersequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h6 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h6><p>先求str1和str2的最长公共子序列(LCS)，dp[i][j]记录的是str1[0…i - 1]和str2[0…j - 1]的LCS长度。对于任一存在于str1或者str2中的字符，要么在LCS中、要不不在LCS中。</p>
<p>同时遍历str1和str2，如果在LCS中则只添加一次；否则，则添加不在LCS中的字符。</p>
<p>注意点：</p>
<p>如果dp[m][n] == dp[m - 1][n]，则表示str1[m - 1]不在LCS中；反之，如果dp[m][n] == dp[m][n - 1]，则表示str2[n - 1]不在LCS中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">shortestCommonSupersequence</span><span class="params">(String str1, String str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = str1.length();</span><br><span class="line">        <span class="keyword">int</span> n = str2.length();</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> ch1 = str1.charAt(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="keyword">char</span> ch2 = str2.charAt(j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(ch1 == ch2) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">0</span> || n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">char</span> temp = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span>(m == <span class="number">0</span>) &#123;</span><br><span class="line">                temp = str2.charAt(n - <span class="number">1</span>);</span><br><span class="line">                n--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">                temp = str1.charAt(m - <span class="number">1</span>);</span><br><span class="line">                m--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[m][n] == dp[m - <span class="number">1</span>][n]) &#123;</span><br><span class="line">                    <span class="comment">//str1[m - 1]不在最长公共子序列中</span></span><br><span class="line">                    temp = str1.charAt(m - <span class="number">1</span>);</span><br><span class="line">                    m--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dp[m][n] == dp[m][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="comment">//str2[n - 1]不在最长公共子序列中</span></span><br><span class="line">                    temp = str2.charAt(n - <span class="number">1</span>);</span><br><span class="line">                    n--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    temp = str1.charAt(m - <span class="number">1</span>);</span><br><span class="line">                    m--;</span><br><span class="line">                    n--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sb.append(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之括号生成</title>
    <url>/2021/11/11/generate_parentheses/</url>
    <content><![CDATA[<p>题目：</p>
<p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p>
<span id="more"></span>
<p>示例 1：</p>
<p>输入：n = 3<br>输出：[“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]<br>示例 2：</p>
<p>输入：n = 1<br>输出：[“()”]</p>
<p>提示：</p>
<p>1 &lt;= n &lt;= 8</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses">https://leetcode-cn.com/problems/generate-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h4 id="题解一：回溯法"><a href="#题解一：回溯法" class="headerlink" title="题解一：回溯法"></a>题解一：回溯法</h4><p>关键点：</p>
<ol>
<li><p>枚举所有可能的情形，每次要么选择左括号，要么选择右括号。当左右括号的数量都达到n时，就形成一个题解；</p>
</li>
<li><p>任何前缀中左括号的数量一定要大于右括号的数量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder temp = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        dfs(n, <span class="number">0</span>, <span class="number">0</span>, temp, results);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> leftCnt, <span class="keyword">int</span> rightCnt, StringBuilder temp, List&lt;String&gt; results)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rightCnt &gt;= n &amp;&amp; leftCnt &gt;= n) &#123;</span><br><span class="line">            results.add(temp.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(leftCnt &lt; n) &#123;</span><br><span class="line">            temp.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            dfs(n, leftCnt + <span class="number">1</span>, rightCnt, temp, results);</span><br><span class="line">            temp.deleteCharAt(temp.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rightCnt &lt; n &amp;&amp; rightCnt &lt; leftCnt) &#123;</span><br><span class="line">            temp.append(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            dfs(n, leftCnt, rightCnt + <span class="number">1</span>, temp, results);</span><br><span class="line">            temp.deleteCharAt(temp.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">generateParenthesis</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] str = <span class="keyword">new</span> <span class="keyword">char</span>[n * <span class="number">2</span>];</span><br><span class="line">        List&lt;String&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        addParenthesis(results, n, n, str, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addParenthesis</span><span class="params">(List&lt;String&gt; list, <span class="keyword">int</span> leftRem, <span class="keyword">int</span> rightRem, <span class="keyword">char</span>[] str, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(leftRem &lt; <span class="number">0</span> || rightRem &lt; leftRem) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(leftRem == <span class="number">0</span> &amp;&amp; rightRem == <span class="number">0</span>) &#123;</span><br><span class="line">            list.add(String.copyValueOf(str));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str[index] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">            addParenthesis(list, leftRem - <span class="number">1</span>, rightRem, str, index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            str[index] = <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">            addParenthesis(list, leftRem, rightRem - <span class="number">1</span>, str, index + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>括号生成</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之回溯法</title>
    <url>/2021/12/26/backtrack/</url>
    <content><![CDATA[<h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><p>回溯法按深度优先策略搜索问题的解空间树。首先从根节点出发搜索解空间树，当算法搜索至解空间树的某一节点时，先利用剪枝函数判断该节点是否可行（即能得到问题的解）。如果不可行，则跳过对该节点为根的子树的搜索，逐层向其祖先节点回溯；否则，进入该子树，继续按深度优先策略搜索。<br>  回溯法的基本行为是搜索，搜索过程使用剪枝函数来为了避免无效的搜索。剪枝函数包括两类：</p>
<ol>
<li>  使用约束函数，剪去不满足约束条件的路径；</li>
<li>使用限界函数，剪去不能得到最优解的路径。<br> 问题的关键在于如何定义问题的解空间，转化成树（即解空间树）。解空间树分为两种：子集树和排列树。两种在算法结构和思路上大体相同。</li>
</ol>
<h4 id="二、回溯法应用：子集问题"><a href="#二、回溯法应用：子集问题" class="headerlink" title="二、回溯法应用：子集问题"></a>二、回溯法应用：子集问题</h4><p>给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。<br>解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。</p>
<p>示例 1：<br>输入：nums = [1,2,3]<br>输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p>
<p>示例 2：<br>输入：nums = [0]<br>输出：[[],[0]]<br>提示：</p>
<p>1 &lt;= nums.length &lt;= 10<br>-10 &lt;= nums[i] &lt;= 10<br>nums 中的所有元素 互不相同</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/subsets">https://leetcode-cn.com/problems/subsets</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>回溯法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之贪心算法</title>
    <url>/2021/12/26/grady/</url>
    <content><![CDATA[<h4 id="一、什么是贪心算法？"><a href="#一、什么是贪心算法？" class="headerlink" title="一、什么是贪心算法？"></a>一、什么是贪心算法？</h4><p>贪心算法指对问题求解时，总是做出在当前看来是最好的选择，期望通过所做的局部最后选择来产生出一个全局最优解。</p>
<h4 id="二、贪心算法的适用场景"><a href="#二、贪心算法的适用场景" class="headerlink" title="二、贪心算法的适用场景"></a>二、贪心算法的适用场景</h4><p>首先，在利用贪心算法求解问题之前，我们需要清楚什么样的问题适合用贪心算法求解。一般而言，能够利用贪心算法求解的问题都会具备以下两点性质：</p>
<ol>
<li>贪心选择</li>
<li>最优子结构。<br>如果我们能够证明问题具备这两个性质，那么就可以设计出它的一个贪心算法。</li>
</ol>
<h5 id="2-1-贪心选择性质"><a href="#2-1-贪心选择性质" class="headerlink" title="2.1 贪心选择性质"></a>2.1 贪心选择性质</h5><p>一个全局最优解可以通过可以通过局部最优选择来达到。<br>换句话说，当考虑如何做选择时，我们只考虑对当前问题最佳的选择、而不考虑子问题的结果。<br>在贪心算法中，我们所做的总是当前看似最佳的选择，然后再解决选择之后所出现的子问题。贪心算法所做的当前选择可能要依赖于已经做出的所有选择，但不依赖于有待于做出的选择或子问题的解。<br>我们必须证明在每一步所做的贪心选择最终能产生一个全局最优解。</p>
<h5 id="2-2-最优子结构"><a href="#2-2-最优子结构" class="headerlink" title="2.2 最优子结构"></a>2.2 最优子结构</h5><p>对于一个问题来说，如果它的一个最优解包含了其子问题的最优解，则称该问题具有最优子结构。<br>假设在原问题中做了一个贪心选择而得到了一个子问题，真正要做的是证明将此问题的最优解与所做的贪心选择合并后，的确可以得到原问题的一个最优解。这个方案意味着要对子问题采用归纳法，来证明每个步骤中所做的贪心选择最终会产生出一个最优解。</p>
<p>贪心算法与动态规划的不同在于他对每个子问题的解决方案都是局部最优选择，不能回退。<br>动态规划则会保存以前的运算结果，并根据以前的结果对当前进行选择，有回退功能。</p>
<h4 id="三、如何证明贪心算法的正确性？"><a href="#三、如何证明贪心算法的正确性？" class="headerlink" title="三、如何证明贪心算法的正确性？"></a>三、如何证明贪心算法的正确性？</h4><p>以活动选择问题为例, 活动集合S={1,2，…, n}。</p>
<p> 现在要证明的是，如果每一步都进行贪心选择，执行到第k步时，选择的k项活动为i1, i2, …, ik，那么存在一个最优解包含活动i1,i2, … ik。根据上述命题，对于任何k，算法前k步的选择都将导致最优解，至多到第n步将得到问题实例的最优解。</p>
<ul>
<li>采用归纳法证明：<br>首先将活动按照结束时间非递减排序，记排序后的结果为S={1,2,…,n}, f1&lt;=f2&lt;=…&lt;=fn。</li>
</ul>
<ol>
<li>当k = 1时，设最优解为A = {i1, i2, … , ij}, 如果i1不等于1, 因为活动1结束的时间最早，那么用1替换i1后得到的A’也是问题的一个最优解；</li>
<li>假设对于任意的正整数k，命题正确, 即存在一个全局最优解A={i1=1, i2, …, ik}∪B，其中B为全局最优解A中除了i1, i2,…,ik以外的部分。<br>记S中除了{i1, i2, …, ik}剩下部分中与i1, i2, …, ik相容的活动集合为S’, 那么B必然是S’的一个最优解。<br>反证法证之：<br>假设B不是S’的最优解，即存在最优解B’的活动比B多， 那么{i1, i2,…,ik}∪B’ &gt; {i1,i2,…,ik}∪B, 与A是全局最优解矛盾。<br>既然B是S’的一个最优解。根据1的结论，S’中结束时间最早的活动(ik+1)总会导致一个最优解，如果B中包含ik+1, 那么就说明最优解A中包含ik+1;<br>如果B中不包含ik+1, 那么一定存在S’的另外一个最优解B’包含ik+1, 即：<br>{i1,i2,…,ik}∪B = {i1,i2,…,ik}∪B’, 其中B’={ik+1，…}<br>因此{i1, i2,…,ik, ik+1}一定出现在一个最优解集合中。<br>命题得证。</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之链表问题</title>
    <url>/2022/02/19/linked_list/</url>
    <content><![CDATA[<p>本文主要分析链表相关的算法问题。</p>
<h4 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><a href="https://leetcode-cn.com/problems/reverse-linked-list/">反转链表</a></h4><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p>
<p><strong>示例 1：</strong></p>
<p><img src="rev1ex1.jpg" alt="img"></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="string">[1,2,3,4,5]</span></span><br><span class="line">输出：<span class="string">[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>

<h5 id="解法一：双指针迭代"><a href="#解法一：双指针迭代" class="headerlink" title="解法一：双指针迭代"></a>解法一：双指针迭代</h5><p>声明两个指针cur和prev，cur指向head，prev指向null。然后从前到后依次遍历cur，每次都将cur指向prev，然后prev和cur都往后移动，直到cur为空，此时prev指向最后一个节点，直接返回prev就是。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ListNode temp = cur.next;</span><br><span class="line">            cur.next = prev;</span><br><span class="line">            prev = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="解法一：头插法"><a href="#解法一：头插法" class="headerlink" title="解法一：头插法"></a>解法一：头插法</h5><p>思路:</p>
<p>创建一个虚拟的头节点dummyHead，初始指向head。从head.next开始进行翻转操作，</p>
<p>ListNode cur = head.next;</p>
<p>然后依次进行遍历：</p>
<p>while(cur != null) {</p>
<pre><code>1. 先保存cur的下一个节点，供下一次遍历使用；(temp = cur.next)
1. 把cur插入dummyHead.next的位置（cur.next = dummyHead.next; dummyHead.next =cur）
1. 将temp赋值给cur，进行下一个节点的遍历(cur = temp)
</code></pre>
<p>}</p>
<p>注意：</p>
<p>要注意链表是否可能出现环！！</p>
<p>要注意链表是否可能出现环！！</p>
<p>要注意链表是否可能出现环！！</p>
<p>因为我们是从head.next开始遍历、不断地将遍历到的节点插入dummyhead头部，那最开始的head.next仍然指向原始的下一个节点。这样就产生了环。因此需要将head.next置为null，再开始遍历。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">				<span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line"> </span><br><span class="line">        ListNode cur = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode temp;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode cur = head.next;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            head.next = cur.next;</span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="解法三：递归法"><a href="#解法三：递归法" class="headerlink" title="解法三：递归法"></a>解法三：递归法</h5><div align="center">
  <img src="../../images/algrithoms/reverselist_recursive.png" width = 80%>
  <p>
    <font size=2 color=gray style="border-bottom:1px solid #eee;">图：翻转列表-递归.png</font>
  </p>
</div>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 递归解法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode newHead = reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a>删除链表的倒数第 N 个结点</h4><ol start="19">
<li>删除链表的倒数第 N 个结点</li>
</ol>
<p> 给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。 </p>
<p> <img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="img"> </p>
<p>示例 1：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1,2,3,4</span>,<span class="number">5</span>], n = <span class="number">2</span></span><br><span class="line">输出：[<span class="number">1,2,3,5</span>]</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">输入：head = [<span class="number">1</span>], n = <span class="number">1</span></span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure>


<p>示例 3：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="comment">[1,2]</span>, n = 1</span><br><span class="line">输出：<span class="comment">[1]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>链表中结点的数目为 <code>sz</code></li>
<li><code>1 &lt;= sz &lt;= 30</code></li>
<li><code>0 &lt;= Node.val &lt;= 100</code></li>
<li><code>1 &lt;= n &lt;= sz</code></li>
</ul>
<p>解题思路：</p>
<p>题目要删除的是倒数第n个结点，那我们能不能先找正数第n个结点？然后将head结点（记为first）和正数第n个结点（记为second）同时往下走，当second结点到达最后一个结点时，first结点就是要删除的结点。</p>
<p>而要删除一个结点时，需要知道该结点的上一个结点。</p>
<p>具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head.next == <span class="keyword">null</span> &amp;&amp; n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode first = head;</span><br><span class="line">        ListNode second = head;</span><br><span class="line">        ListNode prev = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//second指向第n个结点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//想办法使second指向倒数第1个结点</span></span><br><span class="line">        <span class="keyword">while</span>(second.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = first;</span><br><span class="line">            first = first.next;</span><br><span class="line">            second = second.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//first结点就是我们要删除的结点</span></span><br><span class="line">        prev.next = first.next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="排序链表"><a href="#排序链表" class="headerlink" title="排序链表"></a>排序链表</h4><p><a href="https://leetcode-cn.com/problems/sort-list/">148. 排序链表</a></p>
<p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong> 排列并返回 <strong>排序后的链表</strong> 。</p>
<p>解法一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * dummyHead 1 3 2 4 5</span></span><br><span class="line"><span class="comment">     *           </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 the head node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortInList</span> <span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line"></span><br><span class="line">        ListNode tail = head;</span><br><span class="line">        ListNode cur = head.next;</span><br><span class="line">        tail.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode next;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将cur插入到[dummyHead.next, tail]中合适的位置</span></span><br><span class="line">            next = cur.next;</span><br><span class="line"></span><br><span class="line">            ListNode pre = dummyHead;</span><br><span class="line">            ListNode temp = pre.next;</span><br><span class="line">            <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.val &lt; cur.val) &#123;</span><br><span class="line">                pre = temp;</span><br><span class="line">                temp = temp.next;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            pre.next = cur;</span><br><span class="line">            cur.next = temp;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                tail = cur;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * dummyHead 1 3 2 4 5</span></span><br><span class="line"><span class="comment">     *           </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 the head node</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortInList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">        List&lt;ListNode&gt; list  = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head !=<span class="keyword">null</span>)&#123;</span><br><span class="line">            list.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list.sort(<span class="keyword">new</span> Comparator&lt;ListNode&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(ListNode o1, ListNode o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1.val - o2.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; list.size() - <span class="number">1</span>;i++)&#123;</span><br><span class="line">            list.get(i).next = list.get(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        list.get(list.size() - <span class="number">1</span>).next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法三：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间复杂度：o(nlogn)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：o(logn)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode mid = findMiddle(head);</span><br><span class="line">        ListNode midNext = mid.next;</span><br><span class="line">        mid.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode left = sortList(head);</span><br><span class="line">        ListNode right = sortList(midNext);</span><br><span class="line">        <span class="keyword">return</span> mergeSort(left, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找链表的中间结点</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">findMiddle</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">mergeSort</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode prev = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="keyword">null</span> &amp;&amp; l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(l1.val &lt; l2.val) &#123;</span><br><span class="line">                prev.next = l1;</span><br><span class="line">                prev = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                prev.next = l2;</span><br><span class="line">                prev = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = l1 != <span class="keyword">null</span> ? l1 : l2;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分隔链表"><a href="#分隔链表" class="headerlink" title="分隔链表"></a><a href="https://leetcode-cn.com/problems/split-linked-list-in-parts/">分隔链表</a></h4><p>给你一个头结点为 head 的单链表和一个整数 k ，请你设计一个算法将链表分隔为 k 个连续的部分。</p>
<p>每部分的长度应该尽可能的相等：任意两部分的长度差距不能超过 1 。这可能会导致有些部分为 null 。</p>
<p>这 k 个部分应该按照在链表中出现的顺序排列，并且排在前面的部分的长度应该大于或等于排在后面的长度。</p>
<p>返回一个由上述 k 部分组成的数组。</p>
<p>示例 1：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="selector-attr">[1,2,3]</span>, k = <span class="number">5</span></span><br><span class="line">输出：<span class="selector-attr">[[1]</span>,<span class="selector-attr">[2]</span>,<span class="selector-attr">[3]</span>,<span class="selector-attr">[]</span>,<span class="selector-attr">[]</span>]</span><br><span class="line">解释：</span><br><span class="line">第一个元素 output<span class="selector-attr">[0]</span> 为 output<span class="selector-attr">[0]</span><span class="selector-class">.val</span> = <span class="number">1</span> ，output<span class="selector-attr">[0]</span><span class="selector-class">.next</span> = null 。</span><br><span class="line">最后一个元素 output<span class="selector-attr">[4]</span> 为 null ，但它作为 ListNode 的字符串表示是 <span class="selector-attr">[]</span> 。</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：head = <span class="comment">[1,2,3,4,5,6,7,8,9,10]</span>, k = 3</span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3,4]</span>,<span class="comment">[5,6,7]</span>,<span class="comment">[8,9,10]</span>]</span></span><br><span class="line">解释：</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过 1 。前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>链表中节点的数目在范围 [0, 1000]</li>
<li>0 &lt;= Node.val &lt;= 1000</li>
<li>1 &lt;= k &lt;= 50</li>
</ul>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/split-linked-list-in-parts">https://leetcode-cn.com/problems/split-linked-list-in-parts</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode[] splitListToParts(ListNode head, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        ListNode[] result = <span class="keyword">new</span> ListNode[k];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        ListNode prev = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算链表的总长度</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">int</span> left = len % k;</span><br><span class="line">        cur = head;</span><br><span class="line">        prev = cur;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> itemSize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(left-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                itemSize = len / k + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                itemSize = len / k;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(itemSize == <span class="number">0</span>) &#123;</span><br><span class="line">                result[i] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            result[i] = cur;</span><br><span class="line">            <span class="keyword">while</span>(itemSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               prev = cur;</span><br><span class="line">               cur = cur.next;</span><br><span class="line">               itemSize--;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           prev.next = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="重排链表"><a href="#重排链表" class="headerlink" title="重排链表"></a><a href="https://leetcode-cn.com/problems/reorder-list/">重排链表</a></h4><p>给定一个单链表 L 的头节点 head ，单链表 L 表示为：</p>
<p><code>L0 → L1 → … → Ln - 1 → Ln</code></p>
<p>请将其重新排列后变为：</p>
<p><code>L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …</code></p>
<p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p>
<p>解法一：</p>
<p>先将每一个节点用List缓存起来，然后适用双指针前后遍历，将节点串起来。</p>
<p>需要注意的点是，最后一个节点的next一定要置为空，不然会出现环。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(head);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            list.get(i).next = list.get(j);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i == j) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.get(j).next = list.get(i);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//最后i和j会相等，这里如果不将list.get(i).next置为空就会出现环。</span></span><br><span class="line">        list.get(i).next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解法二：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reorderList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode prev = slow;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            prev = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummyHead.next = slow;</span><br><span class="line"></span><br><span class="line">        ListNode cur = slow.next;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        ListNode nex;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nex = cur.next;</span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = nex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode n1 = head;</span><br><span class="line">        ListNode n2 = dummyHead.next;</span><br><span class="line"></span><br><span class="line">        ListNode nex1 = n1, nex2 = n2;</span><br><span class="line">        <span class="keyword">while</span> (n1.next != <span class="keyword">null</span> &amp;&amp; n2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nex1 = n1.next;</span><br><span class="line">            nex2 = n2.next;</span><br><span class="line">            n1.next = n2;</span><br><span class="line">            n2.next = nex1;</span><br><span class="line">            n1 = nex1;</span><br><span class="line">            n2 = nex2;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(n1.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            n1.next = n2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链表内指定区间反转"><a href="#链表内指定区间反转" class="headerlink" title="链表内指定区间反转"></a><strong>链表内指定区间反转</strong></h4><p>描述</p>
<p>将一个节点数为 size 链表 m 位置到 n 位置之间的区间反转，要求时间复杂度 <em>O</em>(<em>n</em>)，空间复杂度 <em>O</em>(1)。<br>例如：<br>给出的链表为 1→2→3→4→5→NULL, m=2, n=4,<br>返回 1→4→3→2→5→NULL</p>
<p>数据范围： 链表长度 0≤10000&lt;size≤1000，0&lt;<em>m</em>≤<em>n</em>≤size，链表中每个节点的值满足|val| ≤ 1000</p>
<p>要求：时间复杂度 <em>O</em>(<em>n</em>) ，空间复杂度 <em>O</em>(<em>n</em>)</p>
<p>进阶：时间复杂度 <em>O</em>(<em>n</em>)，空间复杂度 <em>O</em>(1)</p>
<p>示例1</p>
<p>输入：</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1,2,3,4</span>,<span class="number">5</span>&#125;,<span class="number">2</span>,<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>示例2</p>
<p>输入：</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;5&#125;</span><span class="xml">,1,1</span></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure>

<p>解题思路：</p>
<p>需要记录4个节点：</p>
<ol>
<li>m的前一个节点，记为pre;</li>
<li>第m个节点，记为left；</li>
<li>第n个节点，记为right；</li>
<li>n的下一个节点，记为next；</li>
</ol>
<p>将链表[m, n]进行翻转，然后将翻转后的局部链表拼接上去。将pre.next指向right，left.next指向next。</p>
<p>注意：</p>
<p>​    将right的下一个位置记录好以后，需要将right.next置为null，这样翻转局部链表时，遍历到null即表示局部链表结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     * &#123;1,2,3,4,5&#125;, m = 2, n = 4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseBetween</span><span class="params">(ListNode head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(m == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line"></span><br><span class="line">        ListNode pre = dummyHead, next, left, right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; m - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        left = pre.next;</span><br><span class="line">        right = left;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - m; i++) &#123;</span><br><span class="line">            right= right.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        next = right.next;</span><br><span class="line">        right.next = <span class="keyword">null</span>;</span><br><span class="line">        reverse(left);</span><br><span class="line">        pre.next = right;</span><br><span class="line">        left.next = next;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ListNode <span class="title">reverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line"></span><br><span class="line">        ListNode cur = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode temp;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = cur.next;</span><br><span class="line">            cur.next = dummyHead.next;</span><br><span class="line">            dummyHead.next = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="合并两个有序链表"><a href="#合并两个有序链表" class="headerlink" title=" 合并两个有序链表"></a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/"> 合并两个有序链表</a></h4><p>将两个升序链表合并为一个新的 <strong>升序</strong> 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p><strong>示例 1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg" alt="img"></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[1,2,4]</span>, l2 = <span class="comment">[1,3,4]</span></span><br><span class="line">输出：<span class="comment">[1,1,2,3,4,4]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[]</span>, l2 = <span class="comment">[]</span></span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3：</strong></p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：l1 = <span class="comment">[]</span>, l2 = <span class="comment">[0]</span></span><br><span class="line">输出：<span class="comment">[0]</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li>两个链表的节点数目范围是 <code>[0, 50]</code></li>
<li><code>-100 &lt;= Node.val &lt;= 100</code></li>
<li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong> 排列</li>
</ul>
<h4 id="判断一个链表是否为回文结构"><a href="#判断一个链表是否为回文结构" class="headerlink" title="判断一个链表是否为回文结构"></a>判断一个链表是否为回文结构</h4><p>描述</p>
<p>给定一个链表，请判断该链表是否为回文结构。</p>
<p>回文是指该字符串正序逆序完全一致。</p>
<p>数据范围： 链表节点数 0≤<em>n</em>≤10^5^，链表中每个节点的值满足|val|&lt;= 10^7^</p>
<p>思路：</p>
<p>​    顺序遍历链表，将链表中的节点的值放入ArrayList中，然后判断ArrayList是否为回文。</p>
<p>​    注意：</p>
<p>​    两个Integer对象比较大小应该用compareTo(Integer anotherInteger)方法。</p>
<pre><code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = -<span class="number">221</span>;</span><br><span class="line">Integer b = -<span class="number">222</span>;</span><br><span class="line"><span class="comment">//compareTo(Integer)的返回值：</span></span><br><span class="line"><span class="comment">//a &lt; b: -1</span></span><br><span class="line"><span class="comment">//a == b: 0</span></span><br><span class="line"><span class="comment">//a &gt; b: 1</span></span><br><span class="line">System.out.println(a.compareTo(b));</span><br></pre></td></tr></table></figure>
</code></pre>
<h4 id="删除有序链表中重复的元素-II"><a href="#删除有序链表中重复的元素-II" class="headerlink" title="删除有序链表中重复的元素-II"></a><strong>删除有序链表中重复的元素-II</strong></h4><p>给出一个升序排序的链表，删除链表中的所有重复出现的元素，只保留原链表中只出现一次的元素。<br>例如：<br>给出的链表为1→2→3→3→4→4→51→2→3→3→4→4→5, 返回1→2→51→2→5.<br>给出的链表为1→1→1→2→31→1→1→2→3, 返回2→32→3.</p>
<p>数据范围：链表长度 0≤<em>n</em>≤10000，链表中的值满足|va|≤1000</p>
<p>要求：空间复杂度O*(<em>n</em>)，时间复杂度 <em>O</em>(<em>n</em>)</p>
<p>进阶：空间复杂度 O*(1)，时间复杂度<em>O</em>(<em>n</em>)</p>
<p>示例1</p>
<p>输入：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>

<p>示例2</p>
<p>输入：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>思路:</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1 -&gt; 2 -&gt; 3 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head ListNode类 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ListNode类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span> <span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode dummyHead = <span class="keyword">new</span> ListNode(Integer.MIN_VALUE);</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        </span><br><span class="line">        ListNode cur = head;</span><br><span class="line">        <span class="comment">//维护cur的前一个节点，因为在遍历cur时存在删除cur的场景。</span></span><br><span class="line">        ListNode pre = dummyHead;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历cur时，向后再多看一步</span></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="keyword">null</span> &amp;&amp; cur.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.val == cur.next.val) &#123;</span><br><span class="line">                <span class="comment">//cur后面有与cur相等的节点, 穷举完所有与cur相同的节点，连同cur一起删除。</span></span><br><span class="line">                <span class="keyword">int</span> target = cur.val;</span><br><span class="line">                ListNode temp = cur.next;</span><br><span class="line">                <span class="keyword">while</span>(temp != <span class="keyword">null</span> &amp;&amp; temp.val == target) &#123;</span><br><span class="line">                    temp = temp.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//temp最终指向null或与target不相等的节点</span></span><br><span class="line">                pre.next = temp;</span><br><span class="line">                cur = temp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//cur的下一个节点与cur不相等</span></span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummyHead.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM虚拟机类加载机制</title>
    <url>/2022/01/27/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理的深入理解</title>
    <url>/2021/12/26/dynamic_proxy/</url>
    <content><![CDATA[<p>每一个Proxy实例对象都有一个与之相关联的InvocationHandler实例，当在Proxy对象上调用代理的方法时，该方法就会被分发（dispatched）到这个InvocationHandler对象的invoke()方法上。</p>
<span id="more"></span>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang.reflect;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> InvocationHandler&#125; is the interface implemented by</span></span><br><span class="line"><span class="comment"> * the &lt;i&gt;invocation handler&lt;/i&gt; of a proxy instance.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Each proxy instance has an associated invocation handler.</span></span><br><span class="line"><span class="comment"> * When a method is invoked on a proxy instance, the method</span></span><br><span class="line"><span class="comment"> * invocation is encoded and dispatched to the &#123;<span class="doctag">@code</span> invoke&#125;</span></span><br><span class="line"><span class="comment"> * method of its invocation handler.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Peter Jones</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>         Proxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>       1.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="一、入门示例"><a href="#一、入门示例" class="headerlink" title="一、入门示例"></a>一、入门示例</h3><h4 id="1-目标类和代理类需要实现的共同接口IPayment"><a href="#1-目标类和代理类需要实现的共同接口IPayment" class="headerlink" title="1. 目标类和代理类需要实现的共同接口IPayment"></a>1. 目标类和代理类需要实现的共同接口IPayment</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.dynamicproxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPayment</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> amount)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-目标类CreditCard"><a href="#2-目标类CreditCard" class="headerlink" title="2. 目标类CreditCard"></a>2. 目标类CreditCard</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.dynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CreditCard</span> <span class="keyword">implements</span> <span class="title">IPayment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price() * amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-调用者需要提供的InvocationHandler实例"><a href="#3-调用者需要提供的InvocationHandler实例" class="headerlink" title="3. 调用者需要提供的InvocationHandler实例"></a>3. 调用者需要提供的InvocationHandler实例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.dynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-使用方法"><a href="#4-使用方法" class="headerlink" title="4. 使用方法"></a>4. 使用方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.dynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testDynamicProxy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDynamicProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        IPayment target = <span class="keyword">new</span> CreditCard();</span><br><span class="line">        <span class="comment">//System.getProperties().put(&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;, &quot;true&quot;);</span></span><br><span class="line">        <span class="comment">//sun.misc.Launcher$AppClassLoader</span></span><br><span class="line">        System.out.println(<span class="string">&quot;IPayment.class.getClassLoader: &quot;</span> + IPayment.class.getClassLoader().getClass().getName());</span><br><span class="line">        IPayment proxy = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proxy = (IPayment) Proxy.newProxyInstance(IPayment.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;IPayment.class&#125;,</span><br><span class="line">                    <span class="keyword">new</span> MyInvocationHandler(target));</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy: &quot;</span> + proxy.getClass().getName()); <span class="comment">//com.sun.proxy.$Proxy0</span></span><br><span class="line">            <span class="keyword">long</span> money = proxy.pay(<span class="number">2000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;proxy.price: &quot;</span> + money);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="五、生成的Proxy实例class"><a href="#五、生成的Proxy实例class" class="headerlink" title="五、生成的Proxy实例class"></a>五、生成的Proxy实例class</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by Fernflower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.yxf.dynamicproxy.IPayment;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">IPayment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m4;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler var1) <span class="keyword">throws</span>  &#123;</span><br><span class="line">        <span class="keyword">super</span>(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">price</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Long)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m4, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m2, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">pay</span><span class="params">(<span class="keyword">int</span> var1)</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Long)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;var1&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var3;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> <span class="keyword">throws</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">super</span>.h.invoke(<span class="keyword">this</span>, m0, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | Error var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var2;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m4 = Class.forName(<span class="string">&quot;com.yxf.dynamicproxy.IPayment&quot;</span>).getMethod(<span class="string">&quot;price&quot;</span>);</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.yxf.dynamicproxy.IPayment&quot;</span>).getMethod(<span class="string">&quot;pay&quot;</span>, Integer.TYPE);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(var2.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(var3.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二、Proxy的newProxyInstance-方法"><a href="#二、Proxy的newProxyInstance-方法" class="headerlink" title="二、Proxy的newProxyInstance()方法"></a>二、Proxy的newProxyInstance()方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2222568056686623797L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** parameter types of a proxy class constructor */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;?&gt;[] constructorParams =</span><br><span class="line">        &#123; InvocationHandler.class &#125;;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          Class&lt;?&gt;[] interfaces,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        Objects.requireNonNull(h);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</span><br><span class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Look up or generate the designated proxy class.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//获取代理类的class对象。</span></span><br><span class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Invoke its constructor with the designated invocation handler.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</span><br><span class="line">                checkNewProxyPermission(Reflection.getCallerClass(), cl);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取代理类的构造方法，其中constructorParams为构造方法的参数。</span></span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</span><br><span class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isPublic(cl.getModifiers())) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        cons.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使用Constructor反射的方式创建代理类的实例，其中构造方法的参数为new Object[]&#123;h&#125;.</span></span><br><span class="line">            <span class="keyword">return</span> cons.newInstance(<span class="keyword">new</span> Object[]&#123;h&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException|InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) t;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(t.toString(), t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A factory function that generates, defines and returns the proxy class given</span></span><br><span class="line"><span class="comment">     * the ClassLoader and array of interfaces.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//给定一个ClassLoader和一个Interface的Class[]数组，生成代理类。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">BiFunction</span>&lt;<span class="title">ClassLoader</span>, <span class="title">Class</span>&lt;?&gt;[], <span class="title">Class</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="comment">// prefix for all proxy class names</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">&quot;$Proxy&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// next number to use for generation of unique proxy class names</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader classLoader, Class&lt;?&gt;[] classes) &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">            String proxyPkg = <span class="keyword">null</span>;     <span class="comment">// package to define proxy class in</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Choose a name for the proxy class to generate.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</span><br><span class="line">            String proxyName = proxyPkg + proxyClassNamePrefix + num;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Generate the specified proxy class.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</span><br><span class="line">                    proxyName, interfaces, accessFlags);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> defineClass0(loader, proxyName,</span><br><span class="line">                        proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JVM native方法, 用于将字节流转化为Class对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Class&lt;?&gt; defineClass0(ClassLoader loader, String name,</span><br><span class="line">                                                <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、ProxyGenerator类的generateClassFile-方法"><a href="#三、ProxyGenerator类的generateClassFile-方法" class="headerlink" title="三、ProxyGenerator类的generateClassFile()方法"></a>三、ProxyGenerator类的generateClassFile()方法</h3><p>关键代码：<br>[sun/misc/ProxyGenerator.java]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.misc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProxyGenerator contains the code to generate a dynamic proxy class</span></span><br><span class="line"><span class="comment"> * for the java.lang.reflect.Proxy API.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The external interfaces to ProxyGenerator is the static</span></span><br><span class="line"><span class="comment"> * &quot;generateProxyClass&quot; method.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Peter Jones</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>       1.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 预加载的java.lang.Object类的Method实例。*/</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method hashCodeMethod;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method equalsMethod;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method toStringMethod;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            hashCodeMethod = Object.class.getMethod(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">            equalsMethod = Object.class.getMethod(<span class="string">&quot;equals&quot;</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123; Object.class &#125;);</span><br><span class="line">            toStringMethod = Object.class.getMethod(<span class="string">&quot;toString&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 保存生成class文件的调试开关 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">boolean</span> saveGeneratedFiles =</span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> GetBooleanAction(</span><br><span class="line">                            <span class="string">&quot;sun.misc.ProxyGenerator.saveGeneratedFiles&quot;</span>)).booleanValue();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate a proxy class given a name and a list of proxy interfaces.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name        the class name of the proxy class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interfaces  proxy interfaces</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> accessFlags access flags of the proxy class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String name,</span><br><span class="line">                                            Class&lt;?&gt;[] interfaces,</span><br><span class="line">                                            <span class="keyword">int</span> accessFlags)</span><br><span class="line">    &#123;</span><br><span class="line">        ProxyGenerator gen = <span class="keyword">new</span> ProxyGenerator(name, interfaces, accessFlags);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] classFile = gen.generateClassFile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (saveGeneratedFiles) &#123;</span><br><span class="line">            <span class="comment">//调试使用</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> classFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成Proxy类的.class文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] generateClassFile() &#123;</span><br><span class="line">        <span class="comment">//生成Java.lang.Object的hashCode、equals和toString方法.</span></span><br><span class="line">        addProxyMethod(hashCodeMethod, Object.class);</span><br><span class="line">        addProxyMethod(equalsMethod, Object.class);</span><br><span class="line">        addProxyMethod(toStringMethod, Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Method m : intf.getMethods()) &#123;</span><br><span class="line">                addProxyMethod(m, intf);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (List&lt;ProxyMethod&gt; sigmethods : proxyMethods.values()) &#123;</span><br><span class="line">            checkReturnTypes(sigmethods);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methods.add(generateConstructor());</span><br><span class="line">            <span class="keyword">for</span> (List&lt;ProxyMethod&gt; sigmethods : proxyMethods.values()) &#123;</span><br><span class="line">                <span class="keyword">for</span> (ProxyMethod pm : sigmethods) &#123;</span><br><span class="line">                    <span class="comment">//添加static的Method字段变量</span></span><br><span class="line">                    fields.add(<span class="keyword">new</span> FieldInfo(pm.methodFieldName,</span><br><span class="line">                            <span class="string">&quot;Ljava/lang/reflect/Method;&quot;</span>,</span><br><span class="line">                            ACC_PRIVATE | ACC_STATIC));</span><br><span class="line"></span><br><span class="line">                    methods.add(pm.generateMethod());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            methods.add(generateStaticInitializer());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;unexpected I/O Exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (methods.size() &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;method limit exceeded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fields.size() &gt; <span class="number">65535</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;field limit exceeded&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cp.getClass(dotToSlash(className));</span><br><span class="line">        cp.getClass(superclassName);</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">            cp.getClass(dotToSlash(intf.getName()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cp.setReadOnly();</span><br><span class="line"></span><br><span class="line">        ByteArrayOutputStream bout = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        DataOutputStream dout = <span class="keyword">new</span> DataOutputStream(bout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dout.writeInt(<span class="number">0xCAFEBABE</span>); <span class="comment">// u4 magic;</span></span><br><span class="line">            dout.writeShort(CLASSFILE_MINOR_VERSION); <span class="comment">// u2 minor_version;</span></span><br><span class="line">            dout.writeShort(CLASSFILE_MAJOR_VERSION); <span class="comment">// u2 major_version;</span></span><br><span class="line">            cp.write(dout);  <span class="comment">// (write constant pool)</span></span><br><span class="line"></span><br><span class="line">            dout.writeShort(accessFlags); <span class="comment">// u2 access_flags;</span></span><br><span class="line">            dout.writeShort(cp.getClass(dotToSlash(className))); <span class="comment">// u2 this_class;</span></span><br><span class="line">            dout.writeShort(cp.getClass(superclassName)); <span class="comment">// u2 super_class;</span></span><br><span class="line">            dout.writeShort(interfaces.length); <span class="comment">// u2 interfaces_count;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// u2 interfaces[interfaces_count];</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</span><br><span class="line">                dout.writeShort(cp.getClass(</span><br><span class="line">                        dotToSlash(intf.getName())));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// u2 fields_count;</span></span><br><span class="line">            dout.writeShort(fields.size());</span><br><span class="line">            <span class="comment">// field_info fields[fields_count];</span></span><br><span class="line">            <span class="keyword">for</span> (FieldInfo f : fields) &#123;</span><br><span class="line">                f.write(dout);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// u2 methods_count;</span></span><br><span class="line">            dout.writeShort(methods.size());</span><br><span class="line">            <span class="comment">// method_info methods[methods_count];</span></span><br><span class="line">            <span class="keyword">for</span> (MethodInfo m : methods) &#123;</span><br><span class="line">                m.write(dout);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// u2 attributes_count;</span></span><br><span class="line">            dout.writeShort(<span class="number">0</span>); <span class="comment">// (no ClassFile attributes for proxy classes)</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">&quot;unexpected I/O Exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bout.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">参见代码：</span><br><span class="line">https:<span class="comment">//github.com/JetBrains/jdk8u_jdk/blob/master/src/share/classes/sun/misc/ProxyGenerator.java</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM运行时数据区域</title>
    <url>/2022/01/30/jvm_runtime_data/</url>
    <content><![CDATA[<h3 id="一、JVM-Run-Time-Data-Areas"><a href="#一、JVM-Run-Time-Data-Areas" class="headerlink" title="一、JVM Run-Time Data Areas"></a>一、JVM Run-Time Data Areas</h3><h4 id="1-The-pc-Register"><a href="#1-The-pc-Register" class="headerlink" title="1. The pc Register"></a>1. The <code>pc</code> Register</h4><p>PC Register是线程私有的数据区域，存储当前线程正在执行的指令地址，如果正在执行的方法是native方法，则PC Register的值是未定义的(undefined)。</p>
<h4 id="2-Java-Virtual-Machine-Stacks"><a href="#2-Java-Virtual-Machine-Stacks" class="headerlink" title="2. Java Virtual Machine Stacks"></a>2. Java Virtual Machine Stacks</h4><p>JVM Stacks是线程私有的数据区域，用于存储栈帧（frames）。每一个JVM Thread拥有一个私有的JVM Stack。</p>
<p>当JVM中的Thread被创建的时候，JVM Stack会随之一起创建。</p>
<h4 id="3-Heap"><a href="#3-Heap" class="headerlink" title="3. Heap"></a>3. Heap</h4><p>Heap区域被所有的JVM线程共享，在JVM启动时创建。所有的Class实例和数组（arrays）在Heap中创建。</p>
<h4 id="4-Method-Area"><a href="#4-Method-Area" class="headerlink" title="4. Method Area"></a>4. Method Area</h4><p>Method Area是线程共享的内存区域，用于存储类信息（类的名称、方法信息、字段信息等）、常量(constants)、静态常量(static-final constants)、静态变量(static variables)以及JIT编译后的代码（code compiled by the jit compiler）等，此外Method Area中还包含一块特殊的区域——运行时常量池（Run-Time Constant Pool），在第5点单独分析。</p>
<p>Method Area包含的信息一共有：</p>
<h5 id="4-1-Loaded-class-bytecode"><a href="#4-1-Loaded-class-bytecode" class="headerlink" title="4.1 Loaded class bytecode"></a>4.1 Loaded class bytecode</h5><p>JVM将class的bytecode加载至内存的Method Area，bytecode可以是编译生成的.class文件、通过网络传输获取的、或者cglib动态生成的。</p>
<h5 id="4-2-Metadata-objects-such-as-class-method-field"><a href="#4-2-Metadata-objects-such-as-class-method-field" class="headerlink" title="4.2 Metadata objects such as class/method/field"></a>4.2 Metadata objects such as class/method/field</h5><h6 id="①-Type-information"><a href="#①-Type-information" class="headerlink" title="① Type information"></a>① Type information</h6><p>对于每个已加载的类型(class, interface, enum, annotation)，JVM必须保存该类型的以下信息：</p>
<ul>
<li>完整、有效的类型名称(packageName + &lt;typeName&gt;.class)</li>
<li>完整、有效的直接父类的类型名称</li>
<li>类型修饰符(public, abstract, final等)</li>
</ul>
<h6 id="②-Field-information："><a href="#②-Field-information：" class="headerlink" title="② Field information："></a>② Field information：</h6><p>JVM必须保存所有的fileds信息、以及它们的声明顺序：</p>
<p>fields信息包括：filed name、filed type、filed modifier等；</p>
<h6 id="③-Method-information："><a href="#③-Method-information：" class="headerlink" title="③ Method information："></a>③ Method information：</h6><p>JVM必须保存所有的method信息、以及他们的声明顺序：</p>
<ul>
<li>Method名称.</li>
<li>Method返回值</li>
<li>Method 参数的类型和个数</li>
<li>Method 修饰符 (public, private, protected, static, final, synchronized, native, abstract的子集)</li>
<li>Method bytecodes, operand stack, local variable table and size (除了 abstract和 native方法)</li>
<li>Exception table (除了 abstract和 native方法)，每个 exception handling的起始位置和结束位置, PC计数器中code handling 的偏移地址, and the constant pool index of the caught exception class.</li>
</ul>
<h5 id="4-3-Non-final-variables-static-variales和class-variables"><a href="#4-3-Non-final-variables-static-variales和class-variables" class="headerlink" title="4.3 Non-final variables(static variales和class variables)"></a>4.3 Non-final variables(static variales和class variables)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodAreaTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order = <span class="keyword">null</span>;</span><br><span class="line">        order.hello(); <span class="comment">//NO crash</span></span><br><span class="line">        System.out.println(order.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> number = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-4-Compilation-result-of-jit-compiler"><a href="#4-4-Compilation-result-of-jit-compiler" class="headerlink" title="4.4 Compilation result of jit compiler"></a>4.4 Compilation result of jit compiler</h5><h4 id="5-Run-Time-Constant-Pool"><a href="#5-Run-Time-Constant-Pool" class="headerlink" title="5. Run-Time Constant Pool"></a>5. Run-Time Constant Pool</h4><p>Run-Time Constant Pool是Method Area中的一部分，用于存储编译器生成的各种字面量(literals)和符号引用(symbol references)，主要有：numeric literals、string literals、class references、field references、method references。当class或interface被JVM创建时，它们的run-time constant pool就会被构建出来。</p>
<h4 id="6-Native-Method-Stacks"><a href="#6-Native-Method-Stacks" class="headerlink" title="6. Native Method Stacks"></a>6. Native Method Stacks</h4><p>Native Method Stack是线程私有的数据区域，主要用于执行native(non-java)的方法。</p>
<h3 id="二、HotSpot中Method-Area的变迁"><a href="#二、HotSpot中Method-Area的变迁" class="headerlink" title="二、HotSpot中Method Area的变迁"></a>二、HotSpot中Method Area的变迁</h3><p>关于如何实现method area，JVM规范并没有统一的要求。在Hotsport中，在jdk7及以前，通常称Method Area为永久代(permanent generation)。从jdk8起，永久代(permanent generation)被meta-space所替代。</p>
<p>注意：永久代只是Hotspot中的Method Area的实现，在BEA的JRockit和IBM的J9上没有永久代这个概念。</p>
<p>Method Area的大小参数设置：</p>
<p>jdk7及以前(permanent generation)：</p>
<p>-XX:PermSize 设置永久代初始分配空间，默认是20.75M；</p>
<p>-XX:MaxPermSize 设置永久代最大可分配空间，默认32-bit机器上是64M, 64-bit机器上是82M。</p>
<p>jdk8及以后 (meta space):<br>-XX:MetaspaceSize和-XX:MaxMetaspaceSize分别对应前面的-XX:PermSize和-XX:MaxPermSize。<br>默认值视平台而定：<br>在windows上，-XX: MetaspaceSize是21M；-XX:MaxMetaspaceSize是-1，表示没有上限；<br>与永久代不同的是，如果没有指定值的话，虚拟机默认将会用光所有可用的系统内存；如果metadata溢出时，虚拟机会抛出OutOfMemoryError: Metaspace异常。</p>
<h3 id="三、使用实例"><a href="#三、使用实例" class="headerlink" title="三、使用实例"></a>三、使用实例</h3><p>下面通过例子来加深理解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantPool</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//编译后会添加ConstantValue: int 10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> c = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String d = <span class="string">&quot;TAG&quot;</span>; <span class="comment">//编译后会添加ConstantValue: String TAG</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String e = <span class="string">&quot;final variable&quot;</span>; <span class="comment">//编译后添加ConstantValue: String final variable</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Order order = <span class="keyword">new</span> Order();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译完成后，查看class文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$ javap -p -v out/production/JavaSample/com/yxf/sample/ConstantPool.class </span><br><span class="line">Classfile out/production/JavaSample/com/yxf/sample/ConstantPool.class</span><br><span class="line">  Last modified <span class="number">2022</span>-<span class="number">1</span>-<span class="number">23</span>; size <span class="number">898</span> bytes</span><br><span class="line">  MD5 checksum 33e618f45ee1428896943e4b58e6a4b1</span><br><span class="line">  Compiled from <span class="string">&quot;ConstantPool.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">yxf</span>.<span class="title">sample</span>.<span class="title">ConstantPool</span></span></span><br><span class="line"><span class="class">  <span class="title">minor</span> <span class="title">version</span>: 0</span></span><br><span class="line"><span class="class">  <span class="title">major</span> <span class="title">version</span>: 52</span></span><br><span class="line"><span class="class">  <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_SUPER</span></span></span><br><span class="line"><span class="class"><span class="title">Constant</span> <span class="title">pool</span>:</span></span><br><span class="line"><span class="class">   #1 </span>= Methodref          #<span class="number">14.</span>#<span class="number">38</span>        <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">2</span> = Fieldref           #<span class="number">13.</span>#<span class="number">39</span>        <span class="comment">// com/yxf/sample/ConstantPool.a:I</span></span><br><span class="line">   #<span class="number">3</span> = Fieldref           #<span class="number">13.</span>#<span class="number">40</span>        <span class="comment">// com/yxf/sample/ConstantPool.b:I</span></span><br><span class="line">   #<span class="number">4</span> = String             #<span class="number">41</span>            <span class="comment">// final variable</span></span><br><span class="line">   #<span class="number">5</span> = Fieldref           #<span class="number">13.</span>#<span class="number">42</span>        <span class="comment">// com/yxf/sample/ConstantPool.e:Ljava/lang/String;</span></span><br><span class="line">   #<span class="number">6</span> = Class              #<span class="number">43</span>            <span class="comment">// com/yxf/sample/Order</span></span><br><span class="line">   #<span class="number">7</span> = Methodref          #<span class="number">6.</span>#<span class="number">38</span>         <span class="comment">// com/yxf/sample/Order.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">   #<span class="number">8</span> = Fieldref           #<span class="number">13.</span>#<span class="number">44</span>        <span class="comment">// com/yxf/sample/ConstantPool.order:Lcom/yxf/sample/Order;</span></span><br><span class="line">   #<span class="number">9</span> = Fieldref           #<span class="number">45.</span>#<span class="number">46</span>        <span class="comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">10</span> = String             #<span class="number">47</span>            <span class="comment">// Hello World</span></span><br><span class="line">  #<span class="number">11</span> = Methodref          #<span class="number">48.</span>#<span class="number">49</span>        <span class="comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">12</span> = Fieldref           #<span class="number">13.</span>#<span class="number">50</span>        <span class="comment">// com/yxf/sample/ConstantPool.c:I</span></span><br><span class="line">  #<span class="number">13</span> = Class              #<span class="number">51</span>            <span class="comment">// com/yxf/sample/ConstantPool</span></span><br><span class="line">  #<span class="number">14</span> = Class              #<span class="number">52</span>            <span class="comment">// java/lang/Object</span></span><br><span class="line">  #<span class="number">15</span> = Utf8               a</span><br><span class="line">  #<span class="number">16</span> = Utf8               I</span><br><span class="line">  #<span class="number">17</span> = Utf8               ConstantValue</span><br><span class="line">  #<span class="number">18</span> = Integer            <span class="number">10</span></span><br><span class="line">  #<span class="number">19</span> = Utf8               b</span><br><span class="line">  #<span class="number">20</span> = Utf8               c</span><br><span class="line">  #<span class="number">21</span> = Utf8               d</span><br><span class="line">  #<span class="number">22</span> = Utf8               Ljava/lang/String;</span><br><span class="line">  #<span class="number">23</span> = String             #<span class="number">53</span>            <span class="comment">// TAG</span></span><br><span class="line">  #<span class="number">24</span> = Utf8               e</span><br><span class="line">  #<span class="number">25</span> = Utf8               order</span><br><span class="line">  #<span class="number">26</span> = Utf8               Lcom/yxf/sample/Order;</span><br><span class="line">  #<span class="number">27</span> = Utf8               &lt;init&gt;</span><br><span class="line">  #<span class="number">28</span> = Utf8               ()V</span><br><span class="line">  #<span class="number">29</span> = Utf8               Code</span><br><span class="line">  #<span class="number">30</span> = Utf8               LineNumberTable</span><br><span class="line">  #<span class="number">31</span> = Utf8               LocalVariableTable</span><br><span class="line">  #<span class="number">32</span> = Utf8               <span class="keyword">this</span></span><br><span class="line">  #<span class="number">33</span> = Utf8               Lcom/yxf/sample/ConstantPool;</span><br><span class="line">  #<span class="number">34</span> = Utf8               sayHello</span><br><span class="line">  #<span class="number">35</span> = Utf8               &lt;clinit&gt;</span><br><span class="line">  #<span class="number">36</span> = Utf8               SourceFile</span><br><span class="line">  #<span class="number">37</span> = Utf8               ConstantPool.java</span><br><span class="line">  #<span class="number">38</span> = NameAndType        #<span class="number">27</span>:#<span class="number">28</span>        <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">  #<span class="number">39</span> = NameAndType        #<span class="number">15</span>:#<span class="number">16</span>        <span class="comment">// a:I</span></span><br><span class="line">  #<span class="number">40</span> = NameAndType        #<span class="number">19</span>:#<span class="number">16</span>        <span class="comment">// b:I</span></span><br><span class="line">  #<span class="number">41</span> = Utf8               <span class="keyword">final</span> variable</span><br><span class="line">  #<span class="number">42</span> = NameAndType        #<span class="number">24</span>:#<span class="number">22</span>        <span class="comment">// e:Ljava/lang/String;</span></span><br><span class="line">  #<span class="number">43</span> = Utf8               com/yxf/sample/Order</span><br><span class="line">  #<span class="number">44</span> = NameAndType        #<span class="number">25</span>:#<span class="number">26</span>        <span class="comment">// order:Lcom/yxf/sample/Order;</span></span><br><span class="line">  #<span class="number">45</span> = Class              #<span class="number">54</span>            <span class="comment">// java/lang/System</span></span><br><span class="line">  #<span class="number">46</span> = NameAndType        #<span class="number">55</span>:#<span class="number">56</span>        <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">  #<span class="number">47</span> = Utf8               Hello World</span><br><span class="line">  #<span class="number">48</span> = Class              #<span class="number">57</span>            <span class="comment">// java/io/PrintStream</span></span><br><span class="line">  #<span class="number">49</span> = NameAndType        #<span class="number">58</span>:#<span class="number">59</span>        <span class="comment">// println:(Ljava/lang/String;)V</span></span><br><span class="line">  #<span class="number">50</span> = NameAndType        #<span class="number">20</span>:#<span class="number">16</span>        <span class="comment">// c:I</span></span><br><span class="line">  #<span class="number">51</span> = Utf8               com/yxf/sample/ConstantPool</span><br><span class="line">  #<span class="number">52</span> = Utf8               java/lang/Object</span><br><span class="line">  #<span class="number">53</span> = Utf8               TAG</span><br><span class="line">  #<span class="number">54</span> = Utf8               java/lang/System</span><br><span class="line">  #<span class="number">55</span> = Utf8               out</span><br><span class="line">  #<span class="number">56</span> = Utf8               Ljava/io/PrintStream;</span><br><span class="line">  #<span class="number">57</span> = Utf8               java/io/PrintStream</span><br><span class="line">  #<span class="number">58</span> = Utf8               println</span><br><span class="line">  #<span class="number">59</span> = Utf8               (Ljava/lang/String;)V</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PRIVATE, ACC_FINAL</span><br><span class="line">    ConstantValue: <span class="keyword">int</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> b;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> c;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> java.lang.String d;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: ACC_PRIVATE, ACC_STATIC, ACC_FINAL</span><br><span class="line">    ConstantValue: String TAG</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> java.lang.String e;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">    flags: ACC_PRIVATE, ACC_FINAL</span><br><span class="line">    ConstantValue: String <span class="keyword">final</span> variable</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> com.yxf.sample.Order order;</span><br><span class="line">    descriptor: Lcom/yxf/sample/Order;</span><br><span class="line">    flags: ACC_PRIVATE, ACC_FINAL</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> com.yxf.sample.ConstantPool();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">3</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: bipush        <span class="number">10</span></span><br><span class="line">         <span class="number">7</span>: putfield      #<span class="number">2</span>                  <span class="comment">// Field a:I</span></span><br><span class="line">        <span class="number">10</span>: aload_0</span><br><span class="line">        <span class="number">11</span>: iconst_1</span><br><span class="line">        <span class="number">12</span>: putfield      #<span class="number">3</span>                  <span class="comment">// Field b:I</span></span><br><span class="line">        <span class="number">15</span>: aload_0</span><br><span class="line">        <span class="number">16</span>: ldc           #<span class="number">4</span>                  <span class="comment">// String final variable</span></span><br><span class="line">        <span class="number">18</span>: putfield      #<span class="number">5</span>                  <span class="comment">// Field e:Ljava/lang/String;</span></span><br><span class="line">        <span class="number">21</span>: aload_0</span><br><span class="line">        <span class="number">22</span>: <span class="keyword">new</span>           #<span class="number">6</span>                  <span class="comment">// class com/yxf/sample/Order</span></span><br><span class="line">        <span class="number">25</span>: dup</span><br><span class="line">        <span class="number">26</span>: invokespecial #<span class="number">7</span>                  <span class="comment">// Method com/yxf/sample/Order.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">29</span>: putfield      #<span class="number">8</span>                  <span class="comment">// Field order:Lcom/yxf/sample/Order;</span></span><br><span class="line">        <span class="number">32</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">3</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">4</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">5</span>: <span class="number">10</span></span><br><span class="line">        line <span class="number">9</span>: <span class="number">15</span></span><br><span class="line">        line <span class="number">10</span>: <span class="number">21</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>      <span class="number">33</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/yxf/sample/ConstantPool;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: getstatic     #<span class="number">9</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">         <span class="number">3</span>: ldc           #<span class="number">10</span>                 <span class="comment">// String Hello World</span></span><br><span class="line">         <span class="number">5</span>: invokevirtual #<span class="number">11</span>                 <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">         <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">13</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">14</span>: <span class="number">8</span></span><br><span class="line">      LocalVariableTable:</span><br><span class="line">        Start  Length  Slot  Name   Signature</span><br><span class="line">            <span class="number">0</span>       <span class="number">9</span>     <span class="number">0</span>  <span class="keyword">this</span>   Lcom/yxf/sample/ConstantPool;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_2</span><br><span class="line">         <span class="number">1</span>: putstatic     #<span class="number">12</span>                 <span class="comment">// Field c:I</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">6</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;ConstantPool.java&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Class文件常量池"><a href="#Class文件常量池" class="headerlink" title="Class文件常量池"></a>Class文件常量池</h4><p>上述javap输出的Constant Pool是class文件的常量池。包含：</p>
<ul>
<li><p>Methodref：以冒号隔开的一对值，例如com/yxf/sample/Order.”<init>“:()V，第一部分是方法名，第二部分是方法类型；</p>
</li>
<li><p>Fieldref：以冒号隔开的一对值，例如com/yxf/sample/ConstantPool.f:Ljava/lang/String;，第一部分是字段名，第二部分是字段类型</p>
</li>
<li><p>String:  指向Utf8中的字面量；</p>
</li>
<li><p>Class：指向Utf8中的类名全路径。例如com/yxf/sample/ConstantPool；</p>
</li>
<li><p>Integer：整形字面量，就是用final修饰的int类型；</p>
</li>
<li><p>Utf8：类名、字段名、字段类型、函数名、函数类型、this指针、LineNumberTable、LocalVariableTable、ConstantValue等；</p>
</li>
<li><p>NameAndType： 以冒号隔开的一对值，即&lt;name&gt;:&lt;type&gt;。注意这里的名字可以是变量名，也可以是函数名。如果是函数名的话，类型就是函数签名。举例：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//对应的NameAndType是&quot;a:I&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> b = <span class="number">1</span>; <span class="comment">//对应的NameAndType是&quot;b:I&quot;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String d = <span class="string">&quot;TAG&quot;</span>; <span class="comment">//对应的NameAndType是&quot;d:Ljava/lang/String;&quot;</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">//这里有两个NameAndType, out对应的是：&quot;out:Ljava/io/PrintStream;&quot;, println对应的是&quot;println:(Ljava/lang/String;)V&quot;。</span></span><br></pre></td></tr></table></figure>

<h4 id="全局字符串常量池"><a href="#全局字符串常量池" class="headerlink" title="全局字符串常量池"></a>全局字符串常量池</h4><p>Java中创建字符串对象的两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s0 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">&quot;Hello&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Class文件常量池的大部分数据会被加载到Run-time Constant Pool中，包括String字面量。但”Hello”字符串的一个引用会被存储在Non-Heap区域的”字符串常量池”中，而”Hello”本身还是和其它对象一样，在Heap中创建。</p>
<p>当创建s1时，JVM会先从字符串池中查找是否有等于”Hello”的String，如果相等，就把字符串池中的”Hello”赋值给</p>
<p>s1；如果不相等，就会在Heap中创建一个新对象，同时把引用驻留在字符串池中，在把引用赋值给s1。</p>
<h5 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h5><p>[彻底弄懂java中的常量池] <a href="https://cloud.tencent.com/developer/article/1450501">https://cloud.tencent.com/developer/article/1450501</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java位运算的理解</title>
    <url>/2021/12/26/bit_operation/</url>
    <content><![CDATA[<h4 id="一、有符号整数的存储"><a href="#一、有符号整数的存储" class="headerlink" title="一、有符号整数的存储"></a>一、有符号整数的存储</h4><p>有符号整数通常用补码来表示和存储，补码的特征：</p>
<ul>
<li>正整数的补码与原码相同，负整数的原码为除符号位以外的所有位取反后加1；</li>
</ul>
<h4 id="二、Java中的负数存储"><a href="#二、Java中的负数存储" class="headerlink" title="二、Java中的负数存储"></a>二、Java中的负数存储</h4><p>举例:<br>-20<br>调用Integer.toHexString(-20)返回结果：ffffffec。<br>其中toHexString(int i)返回将整型参数作为无符号整数时的16进制字符串表示形式。这里的无符号数取值规则为：</p>
<ol>
<li>如果实参为负数，则对应的无符号数为其值加上2^32；</li>
<li>否则，无符号数为实参本身。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a string representation of the integer argument as an unsigned integer in base 16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br></pre></td></tr></table></figure>
Java中的无符号数是以补码的形式存储的。</li>
</ol>
<p><img src="/images/Java%E4%BD%8D%E8%BF%90%E7%AE%971.jpg" alt="Java位运算1"></p>
<h4 id="三、-gt-gt-与-gt-gt-gt"><a href="#三、-gt-gt-与-gt-gt-gt" class="headerlink" title="三、&gt;&gt;与&gt;&gt;&gt;"></a>三、&gt;&gt;与&gt;&gt;&gt;</h4><h5 id="3-1-gt-gt-带符号位的右移"><a href="#3-1-gt-gt-带符号位的右移" class="headerlink" title="3.1 &gt;&gt;: 带符号位的右移"></a>3.1 &gt;&gt;: 带符号位的右移</h5><p>带符号位右移时，保留符号位，正数右移高位补0，负数右移高位补1。<br>a = -20;<br>a &gt;&gt; 2后：</p>
<p><img src="/images/Java%E4%BD%8D%E8%BF%90%E7%AE%972.png" alt="Java位运算2"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a = -<span class="number">20</span>;</span><br><span class="line"><span class="built_in">int</span> b = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(b); <span class="comment">//-5</span></span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>out.println(<span class="module-access"><span class="module"><span class="identifier">Integer</span>.</span></span><span class="keyword">to</span><span class="constructor">HexString(<span class="params">b</span>)</span>); <span class="comment">//fffffffb</span></span><br></pre></td></tr></table></figure>

<h5 id="3-2-gt-gt-gt-不带符号位的右移"><a href="#3-2-gt-gt-gt-不带符号位的右移" class="headerlink" title="3.2 &gt;&gt;&gt;: 不带符号位的右移"></a>3.2 &gt;&gt;&gt;: 不带符号位的右移</h5><p>不带符号位右移时，高位统统补0。<br>a = -20;<br>a &gt;&gt;&gt; 2后，变为正数。</p>
<p><img src="/images/Java%E4%BD%8D%E8%BF%90%E7%AE%973.png" alt="Java位运算3"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = -<span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> b = a &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">System.out.println(b); <span class="comment">//1073741819</span></span><br><span class="line">System.out.println(Integer.toHexString(b)); <span class="comment">//3ffffffb</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 10中Activity的启动流程</title>
    <url>/2022/02/08/android_activity_start/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java对象布局</title>
    <url>/2022/04/01/java_object_layout/</url>
    <content><![CDATA[<p>在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：</p>
<ul>
<li><p>对象头（Object Header）</p>
</li>
<li><p>实例数据（Instance Data)</p>
</li>
<li><p>对齐填充（Padding）</p>
</li>
</ul>
<h4 id="一、-对象头（Object-Header）"><a href="#一、-对象头（Object-Header）" class="headerlink" title="一、 对象头（Object Header）"></a>一、 对象头（Object Header）</h4><p>Object Header包含两部分：</p>
<ol>
<li><p>MarkWord：32位占4字节，64位占8字节；</p>
</li>
<li><p>KClass Pointer：32位占4字节，64字节开启压缩占4字节、关闭压缩占8字节</p>
<p>如果是数组实例（可能是基本类型数组，也可能是对象数组），则包含第3个：</p>
</li>
<li><p>Array length：4字节。</p>
</li>
</ol>
<p>添加如下VM Options来关闭压缩：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="deletion">-XX:-UseCompressedOops </span></span><br></pre></td></tr></table></figure>

<p><img src="/images/object_header_32.png" alt="object_header_32.png"></p>
<center><font size=1  color=gray>图1：Hotspot 32-bit对象布局</font></center>

<p><img src="/images/object_header_64.png" alt="object_header_64"></p>
<center><font size=1  color=gray>图2：Hotspot 64-bit对象布局</font></center>

<p><img src="/images/object_header_64_coops.png" alt="object_header_64_coops"></p>
<center><font size=1  color=gray>图3：Hotspot 64-bit带压缩的对象布局</font></center>

<p>参考资料：<a href="https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c">https://gist.github.com/arturmkrtchyan/43d6135e8a15798cc46c</a></p>
<p>另外参见注释 <a href="http://hg.openjdk.java.net/jdk8u/jdk8u/hotspot/file/tip/src/share/vm/oops/markOop.hpp#l3">MarkOop</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// The markOop describes the header of an object.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that the mark is not a real oop but just a word.</span></span><br><span class="line"><span class="comment">// It is placed in the oop hierarchy for historical reasons.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Bit-format of an object header (most significant first, big endian layout below):</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  32 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//             hash:25 ------------&gt;| age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//             size:32 ------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//             PromotedObject*:29 ----------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  64 bits:</span></span><br><span class="line"><span class="comment">//  --------</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| unused:1   age:4    biased_lock:1 lock:2 (normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)</span></span><br><span class="line"><span class="comment">//  PromotedObject*:61 ---------------------&gt;| promo_bits:3 -----&gt;| (CMS promoted object)</span></span><br><span class="line"><span class="comment">//  size:64 -----------------------------------------------------&gt;| (CMS free block)</span></span><br><span class="line"><span class="comment">//  unused:25 hash:31 --&gt;| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; normal object)</span></span><br><span class="line"><span class="comment">//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs &amp;&amp; biased object)</span></span><br><span class="line"><span class="comment">//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----&gt;| (COOPs &amp;&amp; CMS promoted object)</span></span><br><span class="line"><span class="comment">//  unused:21 size:35 --&gt;| cms_free:1 unused:7 ------------------&gt;| (COOPs &amp;&amp; CMS free block)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  - hash contains the identity hash value: largest value is</span></span><br><span class="line"><span class="comment">//    31 bits, see os::random().  Also, 64-bit vm&#x27;s require</span></span><br><span class="line"><span class="comment">//    a hash value no bigger than 32 bits because they will not</span></span><br><span class="line"><span class="comment">//    properly generate a mask larger than that: see library_call.cpp</span></span><br><span class="line"><span class="comment">//    and c1_CodePatterns_sparc.cpp.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  - the biased lock pattern is used to bias a lock toward a given</span></span><br><span class="line"><span class="comment">//    thread. When this pattern is set in the low three bits, the lock</span></span><br><span class="line"><span class="comment">//    is either biased toward a given thread or &quot;anonymously&quot; biased,</span></span><br><span class="line"><span class="comment">//    indicating that it is possible for it to be biased. When the</span></span><br><span class="line"><span class="comment">//    lock is biased toward a given thread, locking and unlocking can</span></span><br><span class="line"><span class="comment">//    be performed by that thread without using atomic operations.</span></span><br><span class="line"><span class="comment">//    When a lock&#x27;s bias is revoked, it reverts back to the normal</span></span><br><span class="line"><span class="comment">//    locking scheme described below.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Note that we are overloading the meaning of the &quot;unlocked&quot; state</span></span><br><span class="line"><span class="comment">//    of the header. Because we steal a bit from the age we can</span></span><br><span class="line"><span class="comment">//    guarantee that the bias pattern will never be seen for a truly</span></span><br><span class="line"><span class="comment">//    unlocked object.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    Note also that the biased state contains the age bits normally</span></span><br><span class="line"><span class="comment">//    contained in the object header. Large increases in scavenge</span></span><br><span class="line"><span class="comment">//    times were seen when these bits were absent and an arbitrary age</span></span><br><span class="line"><span class="comment">//    assigned to all biased objects, because they tended to consume a</span></span><br><span class="line"><span class="comment">//    significant fraction of the eden semispaces and were not</span></span><br><span class="line"><span class="comment">//    promoted promptly, causing an increase in the amount of copying</span></span><br><span class="line"><span class="comment">//    performed. The runtime system aligns all JavaThread* pointers to</span></span><br><span class="line"><span class="comment">//    a very large value (currently 128 bytes (32bVM) or 256 bytes (64bVM))</span></span><br><span class="line"><span class="comment">//    to make room for the age bits &amp; the epoch bits (used in support of</span></span><br><span class="line"><span class="comment">//    biased locking), and for the CMS &quot;freeness&quot; bit in the 64bVM (+COOPs).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  - the two lock bits are used to describe three states: locked/unlocked and monitor.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    [JavaThread* | epoch | age | 1 | 01]       biased lock, lock is biased toward given thread</span></span><br><span class="line"><span class="comment">//    [0           | epoch | age | 1 | 01]       biased lock, lock is anonymously biased</span></span><br><span class="line"><span class="comment">//    [header                    | 0 | 01]       unlocked(normal object), regular object header</span></span><br><span class="line"><span class="comment">//    [ptr                           | 00]       locked, ptr points to real header on stack</span></span><br><span class="line"><span class="comment">//    [ptr                           | 10]       monitor, inflated lock (header is wapped out)</span></span><br><span class="line"><span class="comment">//    [ptr                           | 11]       marked, used by markSweep to mark an object</span></span><br></pre></td></tr></table></figure>

<p>其中低三位bit的值如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> </span><br><span class="line">    locked_Value = <span class="number">0</span>, <span class="comment">// 00 lightweight lock</span></span><br><span class="line">    unlocked_Value = <span class="number">1</span>, <span class="comment">// 0 01 no lock,</span></span><br><span class="line">    monitor_Value = <span class="number">2</span>, <span class="comment">// 10 heavyweight lock</span></span><br><span class="line">    marked_Value = <span class="number">3</span>, <span class="comment">// 11 GC flag</span></span><br><span class="line">    biased_lock_Pattern = <span class="number">5</span> <span class="comment">// 1 01 bias lock</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="二、代码测试："><a href="#二、代码测试：" class="headerlink" title="二、代码测试："></a>二、代码测试：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.lelyak.courses.jol;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.info.ClassLayout;</span><br><span class="line"><span class="keyword">import</span> org.openjdk.jol.util.VMSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> net.lelyak.mindview.util.Print.print;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JOLSample_12_ThinLocking</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This is another dive into the mark word.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Among other things, mark words store locking information.</span></span><br><span class="line"><span class="comment">     * We can clearly see how the mark word contents change when</span></span><br><span class="line"><span class="comment">     * we acquire the lock, and release it subsequently.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This one is the example of thin (displaced) lock. The data</span></span><br><span class="line"><span class="comment">     * in mark word when lock is acquired is the reference to the</span></span><br><span class="line"><span class="comment">     * displaced object header, allocated on stack. Once we leave</span></span><br><span class="line"><span class="comment">     * the lock, the displaced header is discarded, and mark word</span></span><br><span class="line"><span class="comment">     * is reverted to the default value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        print(VMSupport.vmDetails());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">        ClassLayout layout = ClassLayout.parseClass(A.class);</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;**** Fresh object&quot;</span>);</span><br><span class="line">        print(layout.toPrintable(a));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">            print(<span class="string">&quot;**** With the lock&quot;</span>);</span><br><span class="line">            print(layout.toPrintable(a));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;**** After the lock&quot;</span>);</span><br><span class="line">        print(layout.toPrintable(a));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="comment">// no fields</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-开启指针压缩-默认"><a href="#1-开启指针压缩-默认" class="headerlink" title="1. 开启指针压缩(默认)"></a>1. 开启指针压缩(默认)</h5><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home/bin/java</span><br><span class="line"></span><br><span class="line">Running 64-bit HotSpot VM.</span><br><span class="line">Using compressed oop with 3-bit shift.</span><br><span class="line">Using compressed klass with 3-bit shift.</span><br><span class="line">Objects are<span class="number"> 8 </span>bytes aligned.</span><br><span class="line">Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8,<span class="number"> 8 </span>[bytes]</span><br><span class="line">Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8,<span class="number"> 8 </span>[bytes]</span><br><span class="line"></span><br><span class="line">**** Fresh object</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">     <span class="number"> 0 </span>   <span class="number"> 4 </span>      (object header)               <span class="number"> 01 </span>00<span class="number"> 00 </span>00 (0000<span class="number"> 0001 </span>0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000 0000)</span><br><span class="line">     <span class="number"> 4 </span>   <span class="number"> 4 </span>      (object header)               <span class="number"> 00 </span>00<span class="number"> 00 </span>00 (0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000 0000)</span><br><span class="line">     <span class="number"> 8 </span>   <span class="number"> 4 </span>      (object header)                f0<span class="number"> 24 </span>01 f8 (1111<span class="number"> 0000 </span>0010<span class="number"> 0100 </span>0000<span class="number"> 0001 </span>1111 1000)</span><br><span class="line">    <span class="number"> 12 </span>   <span class="number"> 4 </span>      (loss due to the next object alignment)</span><br><span class="line">Instance size:<span class="number"> 16 </span>bytes (reported by Instrumentation API)</span><br><span class="line">Space losses:<span class="number"> 0 </span>bytes internal +<span class="number"> 4 </span>bytes external =<span class="number"> 4 </span>bytes total</span><br><span class="line"></span><br><span class="line">**** With the lock</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">     <span class="number"> 0 </span>   <span class="number"> 4 </span>      (object header)                d8 f9 c4<span class="number"> 05 </span>(1101<span class="number"> 1000 </span>1111<span class="number"> 1001 </span>1100<span class="number"> 0100 </span>0000 0101)</span><br><span class="line">     <span class="number"> 4 </span>   <span class="number"> 4 </span>      (object header)               <span class="number"> 03 </span>00<span class="number"> 00 </span>00 (0000<span class="number"> 0011 </span>0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000 0000)</span><br><span class="line">     <span class="number"> 8 </span>   <span class="number"> 4 </span>      (object header)                f0<span class="number"> 24 </span>01 f8 (1111<span class="number"> 0000 </span>0010<span class="number"> 0100 </span>0000<span class="number"> 0001 </span>1111 1000)</span><br><span class="line">    <span class="number"> 12 </span>   <span class="number"> 4 </span>      (loss due to the next object alignment)</span><br><span class="line">Instance size:<span class="number"> 16 </span>bytes (reported by Instrumentation API)</span><br><span class="line">Space losses:<span class="number"> 0 </span>bytes internal +<span class="number"> 4 </span>bytes external =<span class="number"> 4 </span>bytes total</span><br><span class="line"></span><br><span class="line">**** After the lock</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">     <span class="number"> 0 </span>   <span class="number"> 4 </span>      (object header)               <span class="number"> 01 </span>00<span class="number"> 00 </span>00 (0000<span class="number"> 0001 </span>0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000 0000)</span><br><span class="line">     <span class="number"> 4 </span>   <span class="number"> 4 </span>      (object header)               <span class="number"> 00 </span>00<span class="number"> 00 </span>00 (0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000<span class="number"> 0000 </span>0000 0000)</span><br><span class="line">     <span class="number"> 8 </span>   <span class="number"> 4 </span>      (object header)                f0<span class="number"> 24 </span>01 f8 (1111<span class="number"> 0000 </span>0010<span class="number"> 0100 </span>0000<span class="number"> 0001 </span>1111 1000)</span><br><span class="line">    <span class="number"> 12 </span>   <span class="number"> 4 </span>      (loss due to the next object alignment)</span><br><span class="line">Instance size:<span class="number"> 16 </span>bytes (reported by Instrumentation API)</span><br><span class="line">Space losses:<span class="number"> 0 </span>bytes internal +<span class="number"> 4 </span>bytes external =<span class="number"> 4 </span>bytes total</span><br></pre></td></tr></table></figure>

<p><img src="/images/object_header_sample.png" alt="object_header_sample"></p>
<h5 id="2-关闭指针压缩"><a href="#2-关闭指针压缩" class="headerlink" title="2. 关闭指针压缩"></a>2. 关闭指针压缩</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/jdk1.8.0_321.jdk/Contents/Home/bin/java -XX:-UseCompressedOops</span><br><span class="line"></span><br><span class="line">Running 64-bit HotSpot VM.</span><br><span class="line">Objects are 8 bytes aligned.</span><br><span class="line">Field sizes by type: 8, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</span><br><span class="line">Array element sizes: 8, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</span><br><span class="line"></span><br><span class="line">**** Fresh object</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">      0     4       (object header)                05 00 00 00 (0000 0101 0000 0000 0000 0000 0000 0000)</span><br><span class="line">      4     4       (object header)                00 00 00 00 (0000 0000 0000 0000 0000 0000 0000 0000)</span><br><span class="line">      8     4       (object header)                c0 7f e9 23 (1100 0000 0111 1111 1110 1001 0010 0011)</span><br><span class="line">     12     4       (object header)                01 00 00 00 (0000 0001 0000 0000 0000 0000 0000 0000)</span><br><span class="line">Instance size: 16 bytes (reported by Instrumentation API)</span><br><span class="line">Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</span><br><span class="line"></span><br><span class="line">**** With the lock</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">      0     4       (object header)                05 f8 80 a8 (0000 0101 1111 1000 1000 0000 1010 1000)</span><br><span class="line">      4     4       (object header)                a6 7f 00 00 (1010 0110 0111 1111 0000 0000 0000 0000)</span><br><span class="line">      8     4       (object header)                c0 7f e9 23 (1100 0000 0111 1111 1110 1001 0010 0011)</span><br><span class="line">     12     4       (object header)                01 00 00 00 (0000 0001 0000 0000 0000 0000 0000 0000)</span><br><span class="line">Instance size: 16 bytes (reported by Instrumentation API)</span><br><span class="line">Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</span><br><span class="line"></span><br><span class="line">**** After the lock</span><br><span class="line">net.lelyak.courses.jol.JOLSample_12_ThinLocking.A object internals:</span><br><span class="line"> OFFSET  SIZE  TYPE DESCRIPTION                    VALUE</span><br><span class="line">      0     4       (object header)                05 f8 80 a8 (0000 0101 1111 1000 1000 0000 1010 1000)</span><br><span class="line">      4     4       (object header)                a6 7f 00 00 (1010 0110 0111 1111 0000 0000 0000 0000)</span><br><span class="line">      8     4       (object header)                c0 7f e9 23 (1100 0000 0111 1111 1110 1001 0010 0011)</span><br><span class="line">     12     4       (object header)                01 00 00 00 (0000 0001 0000 0000 0000 0000 0000 0000)</span><br><span class="line">Instance size: 16 bytes (reported by Instrumentation API)</span><br><span class="line">Space losses: 0 bytes internal + 0 bytes external = 0 bytes total</span><br></pre></td></tr></table></figure>

<p><img src="/images/object_header_sample_nocompress.png" alt="object_header_sample_nocompress"></p>
<h4 id="三、锁升级"><a href="#三、锁升级" class="headerlink" title="三、锁升级"></a>三、锁升级</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JOLSample_14_FatLocking</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This is the example of fat locking.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If VM detects contention on thread, it needs to delegate the</span></span><br><span class="line"><span class="comment">     * access arbitrage to OS. That involves associating the object</span></span><br><span class="line"><span class="comment">     * with the native lock, i.e. &quot;inflating&quot; the lock.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * In this example, we need to simulate the contention, this is</span></span><br><span class="line"><span class="comment">     * why we have the additional thread. You can see the fresh object</span></span><br><span class="line"><span class="comment">     * has the default mark word, the object before the lock was already</span></span><br><span class="line"><span class="comment">     * acquired by the auxiliary thread, and when the lock was finally</span></span><br><span class="line"><span class="comment">     * acquired by main thread, it had been inflated. The inflation stays</span></span><br><span class="line"><span class="comment">     * there after the lock is released. You can also see the lock is</span></span><br><span class="line"><span class="comment">     * &quot;deflated&quot; after the GC (the lock cleanup proceeds in safepoints,</span></span><br><span class="line"><span class="comment">     * actually).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//print(VMSupport.vmDetails());</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> A a = <span class="keyword">new</span> A();</span><br><span class="line">        ClassLayout layout = ClassLayout.parseClass(A.class);</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&quot;**** Fresh object&quot;</span>);</span><br><span class="line">        <span class="comment">//加了5s的sleep后, Fresh Object为偏向锁状态.</span></span><br><span class="line">        print(layout.toPrintable(a)); <span class="comment">//偏向锁状态, 无threadId(101)</span></span><br><span class="line"></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                    print(<span class="string">&quot;**** Thread lock:&quot;</span>);</span><br><span class="line">                    print(layout.toPrintable(a)); <span class="comment">//偏向锁状态带threadId(101)</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">            print(<span class="string">&quot;**** With the lock&quot;</span>);</span><br><span class="line">            print(layout.toPrintable(a)); <span class="comment">//重量级锁010, inflated lock.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 重量级锁仍旧呆在这儿（010）.</span></span><br><span class="line">        print(<span class="string">&quot;**** After the lock&quot;</span>);</span><br><span class="line">        print(layout.toPrintable(a));</span><br><span class="line"></span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. GC之后锁被重置（001）, deflated lock.</span></span><br><span class="line">        print(<span class="string">&quot;**** After System.gc()&quot;</span>);</span><br><span class="line">        print(layout.toPrintable(a));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">        <span class="comment">// no fields</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Android内存分析工具</title>
    <url>/2022/04/03/Android%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="一、Activity生命周期监控"><a href="#一、Activity生命周期监控" class="headerlink" title="一、Activity生命周期监控"></a>一、Activity生命周期监控</h4><p>调用<code>Application#registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks callback)</code>监控Activity的生命周期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityRefWatcher</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//生命周期监听</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Application.ActivityLifecycleCallbacks lifecycleCallbacks =</span><br><span class="line">      <span class="keyword">new</span> Application.ActivityLifecycleCallbacks() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Activity activity, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(Activity activity, Bundle outState)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">          ActivityRefWatcher.<span class="keyword">this</span>.onActivityDestroyed(activity);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">    refWatcher.watch(activity);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchActivities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure you don&#x27;t get installed twice.</span></span><br><span class="line">    stopWatchingActivities();</span><br><span class="line">    application.registerActivityLifecycleCallbacks(lifecycleCallbacks);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopWatchingActivities</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    application.unregisterActivityLifecycleCallbacks(lifecycleCallbacks);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后会调用<code>RefWatcher.watch(Object watchedReference)</code>。</p>
<p>流程简要图：</p>
<p><img src="/images/leak_canary_memory_leak.png" alt="leak_canary_memory_leak"></p>
<center><font size="2" color="gray">图1：LeakCanary内存泄漏检测图</font></center>



<p>​    核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">RefWatcher</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">(Object watchedReference, String referenceName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == DISABLED) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    checkNotNull(watchedReference, <span class="string">&quot;watchedReference&quot;</span>);</span><br><span class="line">    checkNotNull(referenceName, <span class="string">&quot;referenceName&quot;</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime = System.nanoTime();</span><br><span class="line">    String key = UUID.randomUUID().toString();</span><br><span class="line">    retainedKeys.add(key);</span><br><span class="line">    <span class="keyword">final</span> KeyedWeakReference reference =</span><br><span class="line">        <span class="keyword">new</span> KeyedWeakReference(watchedReference, key, referenceName, queue);</span><br><span class="line"></span><br><span class="line">    ensureGoneAsync(watchStartNanoTime, reference);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureGoneAsync</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime, <span class="keyword">final</span> KeyedWeakReference reference)</span> </span>&#123;</span><br><span class="line">    watchExecutor.execute(<span class="keyword">new</span> Retryable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Retryable.<span class="function">Result <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ensureGone(reference, watchStartNanoTime);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;ReferenceEquality&quot;)</span> <span class="comment">// Explicitly checking for named null.</span></span><br><span class="line">  Retryable.<span class="function">Result <span class="title">ensureGone</span><span class="params">(<span class="keyword">final</span> KeyedWeakReference reference, <span class="keyword">final</span> <span class="keyword">long</span> watchStartNanoTime)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> gcStartNanoTime = System.nanoTime();</span><br><span class="line">    <span class="keyword">long</span> watchDurationMs = NANOSECONDS.toMillis(gcStartNanoTime - watchStartNanoTime);</span><br><span class="line"></span><br><span class="line">    removeWeaklyReachableReferences();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (debuggerControl.isDebuggerAttached()) &#123;</span><br><span class="line">      <span class="comment">// The debugger can create false leaks.</span></span><br><span class="line">      <span class="keyword">return</span> RETRY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (gone(reference)) &#123;</span><br><span class="line">      <span class="keyword">return</span> DONE;</span><br><span class="line">    &#125;</span><br><span class="line">    gcTrigger.runGc();</span><br><span class="line">    removeWeaklyReachableReferences();</span><br><span class="line">    <span class="keyword">if</span> (!gone(reference)) &#123;</span><br><span class="line">      <span class="keyword">long</span> startDumpHeap = System.nanoTime();</span><br><span class="line">      <span class="keyword">long</span> gcDurationMs = NANOSECONDS.toMillis(startDumpHeap - gcStartNanoTime);</span><br><span class="line"></span><br><span class="line">      File heapDumpFile = heapDumper.dumpHeap();</span><br><span class="line">      <span class="keyword">if</span> (heapDumpFile == RETRY_LATER) &#123;</span><br><span class="line">        <span class="comment">// Could not dump the heap.</span></span><br><span class="line">        <span class="keyword">return</span> RETRY;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> heapDumpDurationMs = NANOSECONDS.toMillis(System.nanoTime() - startDumpHeap);</span><br><span class="line">      heapdumpListener.analyze(</span><br><span class="line">          <span class="keyword">new</span> HeapDump(heapDumpFile, reference.key, reference.name, excludedRefs, watchDurationMs,</span><br><span class="line">              gcDurationMs, heapDumpDurationMs));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DONE;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gone</span><span class="params">(KeyedWeakReference reference)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !retainedKeys.contains(reference.key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">removeWeaklyReachableReferences</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// WeakReferences are enqueued as soon as the object to which they point to becomes weakly</span></span><br><span class="line">    <span class="comment">// reachable. This is before finalization or garbage collection has actually happened.</span></span><br><span class="line">    KeyedWeakReference ref;</span><br><span class="line">    <span class="keyword">while</span> ((ref = (KeyedWeakReference) queue.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      retainedKeys.remove(ref.key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、任务调度框架AndroidWatchExecutor"><a href="#二、任务调度框架AndroidWatchExecutor" class="headerlink" title="二、任务调度框架AndroidWatchExecutor"></a>二、任务调度框架AndroidWatchExecutor</h4><p>核心代码RefWatcher#ensureGone()是通过WatchExecutor负责调度执行的。</p>
<p>具体就是当主线程处于空闲状态时，往HandlerThread的Handler中postDelayed一个延时任务，默认5s后执行。</p>
<p>如果任务执行失败、需要重试时采用<strong>指数退避</strong>法，即延时时间5, 10, 20, 40, …, 依次递增。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">AndroidWatchExecutor</span> <span class="keyword">implements</span> <span class="title">WatchExecutor</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Retryable retryable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Looper.getMainLooper().getThread() == Thread.currentThread()) &#123;</span><br><span class="line">      waitForIdle(retryable, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      postWaitForIdle(retryable, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">waitForIdle</span><span class="params">(<span class="keyword">final</span> Retryable retryable, <span class="keyword">final</span> <span class="keyword">int</span> failedAttempts)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This needs to be called from the main thread.</span></span><br><span class="line">    Looper.myQueue().addIdleHandler(<span class="keyword">new</span> MessageQueue.IdleHandler() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">queueIdle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        postToBackgroundWithDelay(retryable, failedAttempts);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">postToBackgroundWithDelay</span><span class="params">(<span class="keyword">final</span> Retryable retryable, <span class="keyword">final</span> <span class="keyword">int</span> failedAttempts)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> exponentialBackoffFactor = (<span class="keyword">long</span>) Math.min(Math.pow(<span class="number">2</span>, failedAttempts), maxBackoffFactor);</span><br><span class="line">    <span class="comment">//delayMilles以指数退避法依次递增.</span></span><br><span class="line">    <span class="keyword">long</span> delayMillis = initialDelayMillis * exponentialBackoffFactor;</span><br><span class="line">    backgroundHandler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Retryable.Result result = retryable.run();</span><br><span class="line">        <span class="keyword">if</span> (result == RETRY) &#123;</span><br><span class="line">          postWaitForIdle(retryable, failedAttempts + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, delayMillis);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">postWaitForIdle</span><span class="params">(<span class="keyword">final</span> Retryable retryable, <span class="keyword">final</span> <span class="keyword">int</span> failedAttempts)</span> </span>&#123;</span><br><span class="line">    mainHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        waitForIdle(retryable, failedAttempts);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>探索WebView的实现内幕</title>
    <url>/2022/03/19/android_webview/</url>
    <content><![CDATA[<p>[/frameworks/base/core/java/android/webkit/WebView.java]</p>
<h4 id="一、WebView的创建"><a href="#一、WebView的创建" class="headerlink" title="一、WebView的创建"></a>一、WebView的创建</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.webkit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.SparseArray;</span><br><span class="line"><span class="keyword">import</span> android.view.DragEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewDebug;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewHierarchyEncoder;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewStructure;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewTreeObserver;</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityNodeInfo;</span><br><span class="line"><span class="keyword">import</span> android.view.accessibility.AccessibilityNodeProvider;</span><br><span class="line"><span class="keyword">import</span> android.view.autofill.AutofillValue;</span><br><span class="line"><span class="keyword">import</span> android.view.inputmethod.EditorInfo;</span><br><span class="line"><span class="keyword">import</span> android.view.inputmethod.InputConnection;</span><br><span class="line"><span class="keyword">import</span> android.view.textclassifier.TextClassifier;</span><br><span class="line"><span class="keyword">import</span> android.widget.AbsoluteLayout;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Implementation notes.</span></span><br><span class="line"><span class="comment">// The WebView is a thin API class that delegates its public API to a backend WebViewProvider</span></span><br><span class="line"><span class="comment">// class instance. WebView extends &#123;@link AbsoluteLayout&#125; for backward compatibility reasons.</span></span><br><span class="line"><span class="comment">// Methods are delegated to the provider implementation: all public API methods introduced in this</span></span><br><span class="line"><span class="comment">// file are fully delegated, whereas public and protected methods from the View base classes are</span></span><br><span class="line"><span class="comment">// only delegated where a specific need exists for them to do so.</span></span><br><span class="line"><span class="meta">@Widget</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebView</span> <span class="keyword">extends</span> <span class="title">AbsoluteLayout</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ViewTreeObserver</span>.<span class="title">OnGlobalFocusChangeListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewGroup</span>.<span class="title">OnHierarchyChangeListener</span>, <span class="title">ViewDebug</span>.<span class="title">HierarchyHandler</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, com.android.internal.R.attr.webViewStyle);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, defStyleRes, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">WebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr,</span></span></span><br><span class="line"><span class="params"><span class="function">            Map&lt;String, Object&gt; javaScriptInterfaces, <span class="keyword">boolean</span> privateBrowsing)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs, defStyleAttr, <span class="number">0</span>, javaScriptInterfaces, privateBrowsing);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span>  <span class="comment">// for super() call into deprecated base class constructor.</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">WebView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr, <span class="keyword">int</span> defStyleRes,</span></span></span><br><span class="line"><span class="params"><span class="function">            Map&lt;String, Object&gt; javaScriptInterfaces, <span class="keyword">boolean</span> privateBrowsing)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr, defStyleRes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// WebView is important by default, unless app developer overrode attribute.</span></span><br><span class="line">        <span class="keyword">if</span> (getImportantForAutofill() == IMPORTANT_FOR_AUTOFILL_AUTO) &#123;</span><br><span class="line">            setImportantForAutofill(IMPORTANT_FOR_AUTOFILL_YES);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Invalid context argument&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mWebViewThread == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">&quot;WebView cannot be initialized on a thread that has no Looper.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sEnforceThreadChecking = context.getApplicationInfo().targetSdkVersion &gt;=</span><br><span class="line">                Build.VERSION_CODES.JELLY_BEAN_MR2;</span><br><span class="line">        checkThread();</span><br><span class="line"></span><br><span class="line">        ensureProviderCreated();</span><br><span class="line">        mProvider.init(javaScriptInterfaces, privateBrowsing);</span><br><span class="line">        <span class="comment">// Post condition of creating a webview is the CookieSyncManager.getInstance() is allowed.</span></span><br><span class="line">        CookieSyncManager.setGetInstanceIsAllowed();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> jian <span class="title">ensureProviderCreated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkThread();</span><br><span class="line">        <span class="keyword">if</span> (mProvider == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// As this can get called during the base class constructor chain, pass the minimum</span></span><br><span class="line">            <span class="comment">// number of dependencies here; the rest are deferred to init().</span></span><br><span class="line">            mProvider = getFactory().createWebView(<span class="keyword">this</span>, <span class="keyword">new</span> PrivateAccess());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建WebViewProvider</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mProvider = getFactory().createWebView(<span class="keyword">this</span>, <span class="keyword">new</span> PrivateAccess());</span><br></pre></td></tr></table></figure>

<p>其中getFactory()是WebView的静态方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebView</span> <span class="keyword">extends</span> <span class="title">AbsoluteLayout</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">ViewTreeObserver</span>.<span class="title">OnGlobalFocusChangeListener</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewGroup</span>.<span class="title">OnHierarchyChangeListener</span>, <span class="title">ViewDebug</span>.<span class="title">HierarchyHandler</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> WebViewFactoryProvider <span class="title">getFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> WebViewFactory.getProvider();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二、通过WebViewFactory-getProvider方法创建WebViewFactoryProvider实例"><a href="#二、通过WebViewFactory-getProvider方法创建WebViewFactoryProvider实例" class="headerlink" title="二、通过WebViewFactory#getProvider方法创建WebViewFactoryProvider实例"></a>二、通过WebViewFactory#getProvider方法创建WebViewFactoryProvider实例</h4><p>[/frameworks/base/core/java/android/webkit/WebViewFactory.java]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.webkit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHROMIUM_WEBVIEW_FACTORY_METHOD = <span class="string">&quot;create&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHROMIUM_WEBVIEW_VMSIZE_SIZE_PROPERTY =</span><br><span class="line">            <span class="string">&quot;persist.sys.webview.vmsize&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGTAG = <span class="string">&quot;WebViewFactory&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Cache the factory both for efficiency, and ensure any one process gets all webviews from the</span></span><br><span class="line">    <span class="comment">// same provider.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebViewFactoryProvider sProviderInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebViewFactoryProvider sProviderInstance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object sProviderLock = <span class="keyword">new</span> Object();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">static</span> WebViewFactoryProvider <span class="title">getProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (sProviderLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sProviderInstance != <span class="keyword">null</span>) <span class="keyword">return</span> sProviderInstance;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> uid = android.os.Process.myUid();</span><br><span class="line">            <span class="keyword">if</span> (uid == android.os.Process.ROOT_UID ||</span><br><span class="line">                    uid == android.os.Process.SYSTEM_UID ||</span><br><span class="line">                    uid == android.os.Process.PHONE_UID ||</span><br><span class="line">                    uid == android.os.Process.NFC_UID ||</span><br><span class="line">                    uid == android.os.Process.BLUETOOTH_UID) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line">                        <span class="string">&quot;For security reasons, WebView is not allowed in privileged processes&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!isWebViewSupported()) &#123;</span><br><span class="line">                <span class="comment">// Device doesn&#x27;t support WebView; don&#x27;t try to load it, just throw.</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sWebViewDisabled) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        <span class="string">&quot;WebView.disableWebView() was called: WebView is disabled&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取名为&quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForP&quot;的Class对象。</span></span><br><span class="line">            Class&lt;WebViewFactoryProvider&gt; providerClass = getProviderClass();</span><br><span class="line">            Method staticFactory = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//获取WebViewChromiumFactoryProviderForP类中的create()方法。</span></span><br><span class="line">                staticFactory = providerClass.getMethod(</span><br><span class="line">                        CHROMIUM_WEBVIEW_FACTORY_METHOD, WebViewDelegate.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//反射调用WebViewChromiumFactoryProviderForP的create()方法。</span></span><br><span class="line">                sProviderInstance = (WebViewFactoryProvider)</span><br><span class="line">                        staticFactory.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> WebViewDelegate());</span><br><span class="line">                <span class="keyword">return</span> sProviderInstance;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                Log.e(LOGTAG, <span class="string">&quot;error instantiating provider&quot;</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-获取名为”com-android-webview-chromium-WebViewChromiumFactoryProviderForP”的Class对象。"><a href="#1-获取名为”com-android-webview-chromium-WebViewChromiumFactoryProviderForP”的Class对象。" class="headerlink" title="1. 获取名为”com.android.webview.chromium.WebViewChromiumFactoryProviderForP”的Class对象。"></a>1. 获取名为”com.android.webview.chromium.WebViewChromiumFactoryProviderForP”的Class对象。</h5><p>首先加载.so动态库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WebViewLibraryLoader.loadNativeLibrary(clazzLoader,</span><br><span class="line">                                       getWebViewLibrary(sPackageInfo.applicationInfo));</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.webkit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewFactory</span> </span>&#123;</span><br><span class="line">     <span class="comment">// visible for WebViewZygoteInit to look up the class by reflection and call preloadInZygote.</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CHROMIUM_WEBVIEW_FACTORY =</span><br><span class="line">            <span class="string">&quot;com.android.webview.chromium.WebViewChromiumFactoryProviderForP&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;WebViewFactoryProvider&gt; <span class="title">getWebViewProviderClass</span><span class="params">(ClassLoader clazzLoader)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Class&lt;WebViewFactoryProvider&gt;) Class.forName(CHROMIUM_WEBVIEW_FACTORY,</span><br><span class="line">                <span class="keyword">true</span>, clazzLoader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-通过反射调用WebViewChromiumFactoryProviderForP-create方法"><a href="#2-通过反射调用WebViewChromiumFactoryProviderForP-create方法" class="headerlink" title="2. 通过反射调用WebViewChromiumFactoryProviderForP#create方法"></a>2. 通过反射调用WebViewChromiumFactoryProviderForP#create方法</h5><p>其中，传递的参数为new WebViewDelegate()对象。</p>
<p>WebViewFactoryProvider</p>
<p>[/frameworks/base/core/java/android/webkit/WebViewFactoryProvider.java]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> android.webkit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.annotation.SystemApi;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This is the main entry-point into the WebView back end implementations, which the WebView</span></span><br><span class="line"><span class="comment"> * proxy class uses to instantiate all the other objects as needed. The backend must provide an</span></span><br><span class="line"><span class="comment"> * implementation of this interface, and make it available to the WebView via mechanism TBD.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SystemApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WebViewFactoryProvider</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This Interface provides glue for implementing the backend of WebView static methods which</span></span><br><span class="line"><span class="comment">     * cannot be implemented in-situ in the proxy class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Statics</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">findAddress</span><span class="params">(String addr)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">String <span class="title">getDefaultUserAgent</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">freeMemoryForTests</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setWebContentsDebuggingEnabled</span><span class="params">(<span class="keyword">boolean</span> enable)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clearClientCertPreferences</span><span class="params">(Runnable onCleared)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">enableSlowWholeDocumentDraw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        Uri[] parseFileChooserResult(<span class="keyword">int</span> resultCode, Intent intent);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">initSafeBrowsing</span><span class="params">(Context context, ValueCallback&lt;Boolean&gt; callback)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setSafeBrowsingWhitelist</span><span class="params">(List&lt;String&gt; hosts, ValueCallback&lt;Boolean&gt; callback)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="function">Uri <span class="title">getSafeBrowsingPrivacyPolicyUrl</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Statics <span class="title">getStatics</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Construct a new WebViewProvider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webView       the WebView instance bound to this implementation instance. Note it will not</span></span><br><span class="line"><span class="comment">     *                      necessarily be fully constructed at the point of this call: defer real initialization to</span></span><br><span class="line"><span class="comment">     *                      WebViewProvider.init().</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateAccess provides access into WebView internal methods.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">WebViewProvider <span class="title">createWebView</span><span class="params">(WebView webView, WebView.PrivateAccess privateAccess)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">GeolocationPermissions <span class="title">getGeolocationPermissions</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">CookieManager <span class="title">getCookieManager</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TokenBindingService <span class="title">getTokenBindingService</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TracingController <span class="title">getTracingController</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServiceWorkerController <span class="title">getServiceWorkerController</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">WebIconDatabase <span class="title">getWebIconDatabase</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">WebStorage <span class="title">getWebStorage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">WebViewDatabase <span class="title">getWebViewDatabase</span><span class="params">(Context context)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getWebViewClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-WebViewChromiumFactoryProviderForP"><a href="#3-WebViewChromiumFactoryProviderForP" class="headerlink" title="3. WebViewChromiumFactoryProviderForP"></a>3. WebViewChromiumFactoryProviderForP</h5><p>该类位于chromium中。</p>
<p>[android_webview/glue/java/src/com/android/webview/chromium/WebViewChromiumAwInit.java]</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.android.webview.chromium;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebViewChromiumFactoryProviderForP</span> <span class="keyword">extends</span> <span class="title">WebViewChromiumFactoryProvider</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebViewChromiumFactoryProvider <span class="title">create</span><span class="params">(android.webkit.WebViewDelegate delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebViewChromiumFactoryProviderForP(delegate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">WebViewChromiumFactoryProviderForP</span><span class="params">(android.webkit.WebViewDelegate delegate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(delegate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="三、WebDelegate"><a href="#三、WebDelegate" class="headerlink" title="三、WebDelegate"></a>三、WebDelegate</h4><p>[/frameworks/base/core/java/android/webkit/WebViewDelegate.java]</p>
]]></content>
      <categories>
        <category>web view</category>
      </categories>
      <tags>
        <tag>webview</tag>
      </tags>
  </entry>
  <entry>
    <title>Reified关键字</title>
    <url>/2021/12/15/kotlin_reified/</url>
    <content><![CDATA[<p>Kotlin提供了一种使用 <code>reified</code> 关键字获取泛型类型参数的运行时类的方法，该关键字只能与 <code>inline</code> 函数一起使用 。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T&gt;</span> <span class="title">test</span><span class="params">(value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//T::class.java: class java.lang.Integer</span></span><br><span class="line">    <span class="comment">//T::class.javaClass: class kotlin.reflect.jvm.internal.KClassImpl</span></span><br><span class="line">    println(<span class="string">&quot;value: &quot;</span> + value + <span class="string">&quot;, type:&quot;</span> + T::<span class="keyword">class</span>.java +</span><br><span class="line">                <span class="string">&quot;, javaClass: &quot;</span> + T::<span class="keyword">class</span>.javaClass)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    test(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果不使用reified关键字时，只能通过Class<T>参数才能获取T的类型。</T></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">test</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;, value: <span class="type">T</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//编译报错: Cannot use &#x27;T&#x27; as reified type. Use a class instead.</span></span><br><span class="line">    <span class="comment">//println(T::class.java)</span></span><br><span class="line">    println(value);</span><br><span class="line">    println(<span class="string">&quot;Type of T: <span class="subst">$&#123;clazz&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    test&lt;<span class="built_in">Int</span>&gt;(<span class="built_in">Int</span>::<span class="keyword">class</span>.java, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面再看一个复杂的例子：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.kotlin</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlin.reflect.KFunction1</span><br><span class="line"></span><br><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>(<span class="keyword">val</span> name: String) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sleep</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">canSwim</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>(</span><br><span class="line">    <span class="keyword">val</span> catName: String, <span class="keyword">var</span> catWeight: <span class="built_in">Int</span></span><br><span class="line">) : Animal(catName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Panda</span></span>(<span class="keyword">val</span> pandaName: String) : Animal(pandaName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>(<span class="keyword">val</span> dogName: String) : Animal(dogName) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">canSwim</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> Animal.<span class="title">knownSpeciesCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">is</span> Cat -&gt; <span class="number">2</span></span><br><span class="line">        <span class="keyword">is</span> Dog -&gt; <span class="number">3</span></span><br><span class="line">        <span class="keyword">is</span> Panda -&gt; <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">animalFactCheck</span><span class="params">(mammal: <span class="type">Animal</span>, factCheck: <span class="type">KFunction1</span>&lt;<span class="type">Animal</span>, <span class="built_in">Int</span>&gt;)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> factCheck(mammal)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过滤T类型的动物</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Animal&gt;</span> <span class="title">printAnimalsFiltered</span><span class="params">(clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;, list: <span class="type">List</span>&lt;<span class="type">Animal</span>&gt;, factCheck: <span class="type">Animal</span>.() -&gt; <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.isNotEmpty()) &#123;</span><br><span class="line">        list.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.isInstance(it)) &#123;</span><br><span class="line">                println(<span class="string">&quot;<span class="subst">$&#123;it.javaClass.name&#125;</span> - <span class="subst">$&#123;it.factCheck()&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展函数版本：过滤T类型的动物</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : Animal&gt;</span> List<span class="type">&lt;Animal&gt;</span>.<span class="title">printAnimalsExtensionFiltered</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    clazz: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    factCheck: <span class="type">Animal</span>.() -&gt; <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: List&lt;Animal&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.filter &#123; clazz.isInstance(it) &#125;</span><br><span class="line">            .forEach &#123;</span><br><span class="line">                println(<span class="string">&quot;<span class="subst">$&#123;it.javaClass.name&#125;</span> - <span class="subst">$&#123;it.factCheck()&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * reified版本：过滤T类型的动物</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Animal&gt;</span> <span class="title">printAnimalsFiltered</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    list: <span class="type">List</span>&lt;<span class="type">Animal</span>&gt;,</span></span></span><br><span class="line"><span class="params"><span class="function">    factCheck: <span class="type">Animal</span>.() -&gt; <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: List&lt;Animal&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (list.isNotEmpty()) &#123;</span><br><span class="line">        list.filterIsInstance&lt;T&gt;()</span><br><span class="line">            .forEach &#123; println(<span class="string">&quot;<span class="subst">$&#123;it.javaClass.name&#125;</span> - <span class="subst">$&#123;it.factCheck()&#125;</span>&quot;</span>) &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展函数的reified版本：过滤T类型的动物</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;<span class="keyword">reified</span> T : Animal&gt;</span> List<span class="type">&lt;Animal&gt;</span>.<span class="title">printAnimalsExtensionFiltered</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    factCheck: <span class="type">Animal</span>.() -&gt; <span class="type">Int</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: List&lt;Animal&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isNotEmpty()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.filterIsInstance&lt;T&gt;()</span><br><span class="line">            .forEach &#123;</span><br><span class="line">                println(<span class="string">&quot;<span class="subst">$&#123;it.javaClass.name&#125;</span> - <span class="subst">$&#123;it.factCheck()&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> animals = listOf(</span><br><span class="line">        Cat(<span class="string">&quot;Jerry&quot;</span>, <span class="number">15</span>),</span><br><span class="line">        Panda(<span class="string">&quot;Tegan&quot;</span>),</span><br><span class="line">        Dog(<span class="string">&quot;Manny&quot;</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤Panda类型的动物</span></span><br><span class="line">    animals.filterIsInstance&lt;Panda&gt;()</span><br><span class="line">        .forEach &#123;</span><br><span class="line">            println(</span><br><span class="line">                <span class="string">&quot;<span class="subst">$&#123;it.javaClass.name&#125;</span> - &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;<span class="subst">$&#123;animalFactCheck(it, Animal::knownSpeciesCount)&#125;</span>&quot;</span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;------ Class -------&quot;</span>)</span><br><span class="line">    printAnimalsFiltered(Cat::<span class="keyword">class</span>.java, animals, Animal::knownSpeciesCount)</span><br><span class="line">    animals.printAnimalsExtensionFiltered(Cat::<span class="keyword">class</span>.java, Animal::knownSpeciesCount)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;------ Reified -------&quot;</span>)</span><br><span class="line">    printAnimalsFiltered&lt;Dog&gt;(animals, Animal::knownSpeciesCount)</span><br><span class="line">    animals.printAnimalsExtensionFiltered&lt;Dog&gt;(Animal::knownSpeciesCount)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>通过Wireshark抓包来分析Https协议的内容。</title>
    <url>/2022/01/16/understanding_https/</url>
    <content><![CDATA[<p>通过Wireshark抓包来分析Https协议的内容。</p>
<h4 id="一、HTTPS协议详情"><a href="#一、HTTPS协议详情" class="headerlink" title="一、HTTPS协议详情"></a>一、HTTPS协议详情</h4><h4 id="1-Client-Hello-（Client-gt-Server）"><a href="#1-Client-Hello-（Client-gt-Server）" class="headerlink" title="1. Client Hello （Client -&gt; Server）"></a>1. Client Hello （Client -&gt; Server）</h4><p>​    客户端发送所支持的TLS协议版本、支持的密码套件列表、数据压缩方式及一个客户端随机数（client random）等信息发给服务端。</p>
<p>1）Handleshake Protocol </p>
<p>2）TLS协议版本</p>
<p>3）户端生成的随机数client.random（32字节）</p>
<p>4）支持的加密算法套件(Cipher Suites)，例如TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)</p>
<p>5）支持的压缩方法</p>
<p>6）扩展属性</p>
<p>其中密码套件算法包含如下几部分：</p>
<ol>
<li> ECDHE：密钥交换算法（Elliptic Curve Diffie-Hellman Ephemeral，ECDHE）</li>
<li> RSA：认证算法（Rivest Shamir Adleman algorithm, RSA）</li>
<li> AES-128-GCM：数据加密算法（Advanced Encryption Standard 128 bit Galois/Counter Mode）</li>
<li>SHA256：消息摘要（MAC）算法（Secure Hash Algorithm 256 bit）</li>
</ol>
<p>注意ec_point_formats的扩展，可以看出客户端支持28个椭圆曲线。</p>
<p>注意SessionTicket扩展，</p>
<p><img src="https://xifengcoder.github.io/images/https_client_hello.jpg" alt="Client Hello"></p>
<h4 id="2-Server-Hello-（Server-–-gt-Client-）"><a href="#2-Server-Hello-（Server-–-gt-Client-）" class="headerlink" title="2.  Server Hello （Server –&gt; Client ）"></a>2.  Server Hello （Server –&gt; Client ）</h4><p>​    服务端在收到Client Hello消息后，发送服务端TLS协议版本、选择的密码套件（Cipher Suite）及服务器随机数（server random）等</p>
<p>信息给客户端。服务器根据客户端传递的密码套件列表，选择一个双方都支持的密码套件进行处理。为了协商出预备主密钥，需要使用</p>
<p>ECDHE密钥协商算法，客户端和服务端每次连接的时候，服务端需要传递动态的DH信息（DH参数和DH公钥），传递的DH信息需要使用</p>
<p>RSA签名算法签名后发送给客户端，相关细节会在Server Key Exchange子消息中说明。</p>
<p>包含内容:</p>
<p>1）Handleshake Protocol </p>
<p>2）TLS协议版本</p>
<p>3）服务器生成的随机数server.random（32字节）</p>
<p>4）Session ID(32字节)</p>
<p>5）选择的Cipher Suit</p>
<p>6）扩展部分</p>
<p>从输出可以看出，ECC椭圆曲线是不压缩的，协商出的密码套件是：TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210240623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZmVucw==,size_16,color_FFFFFF,t_70" alt="Server Hello"></p>
<h4 id="3-Server-Certificate-（Server-–-gt-Client-）"><a href="#3-Server-Certificate-（Server-–-gt-Client-）" class="headerlink" title="3.  Server Certificate （Server –&gt; Client ）"></a>3.  Server Certificate （Server –&gt; Client ）</h4><p>服务端发送Certificate给客户端，Certificate包括以下几部分：</p>
<p>1）版本号(version): v3 (2)；</p>
<p>2）序列号(serialNumber):  长度16字节，例如：0x03aa20c7c44887f2b628b63d28a39e78；</p>
<p>3）签名算法(signature): sha256WithRSAEncryption，它包含一个Algorithm Id，例如1.2.840.113549.1.1.11，用来标识该签名算法；</p>
<p>4）版本者(issuer)；</p>
<p>5）有效期(validity)，包含起始时间(notBefore)和结束时间(notAfter)；</p>
<p>6）使用者(subject)</p>
<ul>
<li><p>6.1 使用者公钥信息(subjectPublicKeyInfo)，包含以下内容：</p>
<p> ① 算法类型(algorithm)，例如：rsaEncryption，其Algorithm Id是: 1.2.840.113549.1.1.1 (rsaEncryption)</p>
<p> ② 公钥信息(subjectPublicKey)，包括公钥(modulus，长度256字节），指数(publicExponent，65537) </p>
</li>
<li><p>6.2 算法标识(algorithmIdentifier)，例如：sha256WithRSAEncryption，具体含义是：</p>
</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Public</span>-Key Cryptography Standards (PKCS) #<span class="number">1</span> version <span class="number">1</span>.<span class="number">5</span> signature algorithm with Secure Hash Algorithm <span class="number">256</span> (SHA<span class="number">256</span>) and Rivest, Shamir and Adleman (RSA) encryption.</span><br></pre></td></tr></table></figure>

<p>6.3 证书签名(encrypted)，长度256字节，例如：88291e3da5b2d39ed5406cb1185d27fd3abe233d3e4c2050…</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210317796.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZmVucw==,size_16,color_FFFFFF,t_70" alt="Server Certificate"></p>
<h4 id="4-Client-Certificate-Client-–-gt-Server，可选"><a href="#4-Client-Certificate-Client-–-gt-Server，可选" class="headerlink" title="4. Client Certificate (Client –&gt; Server，可选)"></a>4. Client Certificate (Client –&gt; Server，可选)</h4><p>​    服务端要求认证客户端的证书，这种情况使用的比较少。</p>
<h4 id="5-Server-Key-Exchange-Server-–-gt-Client"><a href="#5-Server-Key-Exchange-Server-–-gt-Client" class="headerlink" title="5. Server Key Exchange (Server –&gt; Client)"></a>5. Server Key Exchange (Server –&gt; Client)</h4><p>​    如果服务端提供的证书不足以使客户端生成预备主秘钥（premaster key）时，那么必须发送Server Key Exchange消息。服务器发送动态或静态的DH信息（DH参数和DH公钥），使用服务器的私钥进行签名。</p>
<p>本例中，ECDHE使用的ECC命名曲线是secp256r1，服务器ECDHE公钥是04f3f88d904af655faeeded2ba6453d34b1ba95160aaf427… </p>
<p>(65字节)，ECDH信息使用rsa_pkcs1_sha256算法进行签名，签名值是4809b694a751868299023f90385b2012ed9a2916c957da16…</p>
<p>(256字节)，签名算法（SignatureAndHashAlgorithm）是rsa_pkcs1_sha256(0x0401)。</p>
<p><img src="https://img-blog.csdnimg.cn/2019022321034489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZmVucw==,size_16,color_FFFFFF,t_70" alt="Server Key Exchange"></p>
<h4 id="6-Server-Hello-Done-Server–-gt-Client"><a href="#6-Server-Hello-Done-Server–-gt-Client" class="headerlink" title="6. Server Hello Done (Server–&gt; Client )"></a>6. Server Hello Done (Server–&gt; Client )</h4><p>​    服务端确认Server Hello消息的结束。<br><img src="https://img-blog.csdnimg.cn/20190223210417283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZmVucw==,size_16,color_FFFFFF,t_70" alt="Server Hello Done"></p>
<h4 id="7-Client-Key-Exchange-Client-–-gt-Server"><a href="#7-Client-Key-Exchange-Client-–-gt-Server" class="headerlink" title="7. Client Key Exchange (Client –&gt; Server)"></a>7. Client Key Exchange (Client –&gt; Server)</h4><p>客户端在收到Server Hello Done消息后会发送Client Key Exchange消息，如果服务端要求校验Client Certificate的话，Client Key Exchange消息在发送Client Certificate之后发送。</p>
<p>如果密码套件中的秘钥协商写法是ECDHE，那么客户端需要发送ECDH的公钥。</p>
<p>这里的重点是如何计算PreMaster Key。</p>
<ul>
<li>若采用RSA， 客户端随机生成46字节+2字节的client_version，作为PreMaster Key，通过步骤（3）得到的证书中的公钥、或者Server Key Exchange消息中的临时RSA公钥，对其进行加密发送给服务器。</li>
<li>若采用DH算法（dhe_dss/dhe_rsa/dh_dss/dh_rsa/dh_anon等，下图就是DH算法生成PreMaster Key），直接根据已经交换的两个随机数可以算出PreMaster Key。</li>
</ul>
<p>￼<img src="https://img-blog.csdnimg.cn/20190223210510907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpZmVucw==,size_16,color_FFFFFF,t_70" alt="Client Key Exchange"></p>
<h4 id="8-Client-Change-Cipher-Spec-Client-→-Server"><a href="#8-Client-Change-Cipher-Spec-Client-→-Server" class="headerlink" title="8. Client Change Cipher Spec (Client → Server)"></a>8. Client Change Cipher Spec (Client → Server)</h4><p>表示客户端准备切换到加密环境，从这个消息后，客户端发送到的数据都将使用对称秘钥加密。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210528625.png" alt="Client Change Cipher Spec"></p>
<h4 id="9-Client-Encrypted-handshake-message-（Client-–-gt-Server）"><a href="#9-Client-Encrypted-handshake-message-（Client-–-gt-Server）" class="headerlink" title="9. Client Encrypted handshake message （Client –&gt; Server）"></a>9. Client Encrypted handshake message （Client –&gt; Server）</h4><p> Encrypted handshake message是使用对称秘钥加密后的第一个报文。 如果这个报文加解密校验成功，那么就说明对称秘钥是正确的。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210536632.png" alt="Client encrypted handshake message"></p>
<h4 id="10-Server-Change-Cipher-Spec-Server-–-gt-Client"><a href="#10-Server-Change-Cipher-Spec-Server-–-gt-Client" class="headerlink" title="10. Server Change Cipher Spec (Server –&gt; Client)"></a>10. Server Change Cipher Spec (Server –&gt; Client)</h4><p>服务端开始切换加密环境。</p>
<p>服务端收到pre-master key之后，使用自己的Private Key来解密，服务端和客户端使用client random + server random + pre-master计算出master key（长度48bytes）。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">master_secret = PRF(pre_master_secret, <span class="string">&quot;master secret&quot;</span>, ClientHello.random + ServerHello.random) [<span class="number">0.</span><span class="number">.47</span>];</span><br></pre></td></tr></table></figure>
<p>后面的消息就使用master key作为秘钥进行对称加密后在传输。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210612136.png" alt="Server change cipher cipher"></p>
<h4 id="11-Server-Encrypted-handshake-message-Server-–-gt-Client"><a href="#11-Server-Encrypted-handshake-message-Server-–-gt-Client" class="headerlink" title="11. Server Encrypted handshake message (Server –&gt; Client)"></a>11. Server Encrypted handshake message (Server –&gt; Client)</h4><p>Encrypted HandShake Message是服务端使用对称秘钥加密后发送的第一条报文。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210621830.png" alt="Server Encrypted handshake message"></p>
<h4 id="12-Application-Data-Protocol-Client-gt-Server"><a href="#12-Application-Data-Protocol-Client-gt-Server" class="headerlink" title="12. Application Data Protocol(Client -&gt; Server)"></a>12. Application Data Protocol(Client -&gt; Server)</h4><p>客户端发给服务端的应用层数据，已使用对称秘钥加密。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210644486.png" alt="Client Application data protocol"></p>
<h4 id="13-Application-Data-Protocol-Server–-gt-Client"><a href="#13-Application-Data-Protocol-Server–-gt-Client" class="headerlink" title="13. Application Data Protocol (Server–&gt; Client)"></a>13. Application Data Protocol (Server–&gt; Client)</h4><p>服务端发给客户端的应用程层数据，已使用对称秘钥加密。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210700490.png" alt="Server Application data protocol"></p>
<h4 id="14-Entrypted-Alert-Server-–-gt-Client"><a href="#14-Entrypted-Alert-Server-–-gt-Client" class="headerlink" title="14. Entrypted Alert(Server –&gt; Client)"></a>14. Entrypted Alert(Server –&gt; Client)</h4><p>Alert（21）消息是一种通知消息（Close Notify），表示连接可以关闭了，通常用于数据已发送完成、没有数据要发送时。</p>
<p><img src="https://img-blog.csdnimg.cn/20190223210720641.png" alt="Encrypted Alert Message"></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Https</tag>
      </tags>
  </entry>
  <entry>
    <title>Cache-Control的理解</title>
    <url>/2021/12/26/http_cache_control/</url>
    <content><![CDATA[<h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>计算一个response的Freshness Lifetime（新鲜生命周期、有效期）值的规则为：</p>
<ol>
<li>如果cache是共享的、且response中含有s-maxage，则值为s-maxage；</li>
<li>如果response中含有max-age，则值为max-age；</li>
<li>如果response的header中含有Expires，则值为Expires减去response header中的Date；</li>
<li>否则的话，表示response中没有显式的过期时间，可能会采用探测型的策略（Last-Modified）；同时，Cache会在任何age超过24小时的response上附加113告警（如果还没有添加过的话）。</li>
</ol>
<h3 id="Request-Cache-Control-Directives："><a href="#Request-Cache-Control-Directives：" class="headerlink" title="Request Cache-Control Directives："></a>Request Cache-Control Directives：</h3><ol>
<li><p>max-age: &lt;delta-seconds&gt;</p>
<p>表示client愿意接收age在delta-seconds秒内的response。在Request和Response的Header中都可以设置。<br> 在Response中设置max-age的时间信息，可以在APP端生成缓存文件，在缓存不过期的情况下，APP不会直接向服务器请求数据，在缓存过期的情况下，APP客户端会向服务器直接请求生成新的缓存。<br> 如果是仅仅设置Request中的max-age时间，是不会生成缓存文件，并且没有缓存是否过期的情况，都是直接向后台服务器直接请求数据。<br> 如果同时设置了Response和Request中的max-age 缓存时间，如果Request中的max-age时间小于Response中的max-age时间，APP会根据Request中max-age时间周期去直接进行网络请求，如果碰到断网或者网络请求不通的情况，即使缓存还在有效期内（Response中设置的max-age时间足够大），在Request设置的max-age过期之后，APP也会直接去进行网络请求。</p>
</li>
<li><p>max-stale: &lt;delta-seconds&gt;<br>表示client希望接收一个超过其新鲜生命周期（freshness lifetime)、且超出值不大于特定值（秒）的response。如果max-stale未被赋值，则表示client愿意接收任何年龄的response。仅仅在Request的Header中有效。</p>
</li>
<li><p>min-fresh<br>表示client希望接收一个其新鲜生命周期（freshness lifetime）在现有的基础上再增加不少于特定值（秒）的response。</p>
</li>
<li><p>no-cache</p>
<p>表示在没有成功验证server时，</p>
</li>
<li><p>no-store</p>
</li>
<li><p>no-transform</p>
</li>
<li><p>only-if-cached</p>
<p>表示client仅仅愿意接受一个stored response。server如果有缓存则返回缓存，否则返回504错误。</p>
</li>
</ol>
<p>表示client愿意接受超过其freshness lifetime一定时间的response。如果max-stale没有被赋值，则表示client愿意接受任何陈旧（stale）的值。</p>
<h3 id="Response-Cache-Control-Directives"><a href="#Response-Cache-Control-Directives" class="headerlink" title="Response Cache-Control Directives"></a>Response Cache-Control Directives</h3><ol>
<li><p>must-revalidate</p>
</li>
<li><p>no-cache</p>
</li>
</ol>
<p>在使用任何cached response之前，必须先重新验证服务器（revalidate with the server）。首先连接服务器、并比较服务器上资源的ETag和缓存中的ETag是否一样，如果一样，则返回缓存的资源；</p>
<p>   否则，就意味着资源已经发生更新，client需要下载最新的资源并返回。</p>
<ol start="3">
<li><p>no-store</p>
</li>
<li><p>no-transform</p>
</li>
<li><p>public</p>
</li>
<li><p>private</p>
</li>
<li><p>proxy-revalidate</p>
</li>
<li><p>max-age=&lt;delta-seconds&gt;</p>
<p>用于计算该response的有效期，该字段的优先级高于Header中的Expires字段。</p>
</li>
<li><p>s-maxage=&lt;delta-seconds&gt;</p>
<p>在共享的缓存中，s-maxage会覆盖max-age指令值或者Expires header的值。</p>
</li>
</ol>
<h3 id="Response中的Age字段"><a href="#Response中的Age字段" class="headerlink" title="Response中的Age字段"></a>Response中的Age字段</h3><p>表示该response从产生到现在经过的时间。</p>
<h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>   If-Modified-Since 是一个条件式请求首部，服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回，状态码为 200  。如果请求的资源从那时起未经修改，那么返回一个不带有消息主体的  304  响应，而在 Last-Modified 首部中会带有上次修改时间。 If-Modified-Since 只可以用在 GET 或 HEAD 请求中。</p>
<h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p>If-None-Match 是一个条件式请求首部。对于 GETGET 和 HEAD 请求方法来说，当且仅当服务器上没有任何资源的 ETag 属性值与这个首部中列出的相匹配的时候，服务器端会才返回所请求的资源，响应码为  200  。对于其他方法来说，当且仅当最终确认没有已存在的资源的  ETag 属性值与这个首部中所列出的相匹配的时候，才会对请求进行相应的处理。</p>
<p>对于  GET 和 HEAD 方法来说，当验证失败的时候，服务器端必须返回响应码 304 （Not Modified，未改变）。对于能够引发服务器状态改变的方法，则返回 412 （Precondition Failed，前置条件失败）。需要注意的是，服务器端在生成状态码为 304 的响应的时候，必须同时生成以下会存在于对应的 200 响应中的首部：Cache-Control、Content-Location、Date、ETag、Expires 和 Vary 。</p>
<p>ETag 属性之间的比较采用的是弱比较算法，即两个文件除了每个比特都相同外，内容一致也可以认为是相同的。例如，如果两个页面仅仅在页脚的生成时间有所不同，就可以认为二者是相同的。</p>
<p>当与  If-Modified-Since  一同使用的时候，If-None-Match 优先级更高（假如服务器支持的话）。<br>以下是两个常见的应用场景：</p>
<p>采用 GET 或 HEAD  方法，来更新拥有特定的ETag 属性值的缓存。<br>采用其他方法，尤其是  PUT，将 If-None-Match used 的值设置为 * ，用来生成事先并不知道是否存在的文件，可以确保先前并没有进行过类似的上传操作，防止之前操作数据的丢失。这个问题属于更新丢失问题的一种。</p>
<p>示例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">If-None-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span><br><span class="line">If-None-Match: W/&quot;67ab43&quot;, &quot;54ed21&quot;, &quot;7892dd&quot;</span><br><span class="line">If-None-Match: *</span><br></pre></td></tr></table></figure>
<p>参考文档：<a href="https://blog.csdn.net/polo2044/article/details/82228886">https://blog.csdn.net/polo2044/article/details/82228886</a></p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>OKhttp的理解-CacheInterceptor</title>
    <url>/2021/12/26/okhttp_interceptor/</url>
    <content><![CDATA[<h3 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h3><h4 id="1-noCache"><a href="#1-noCache" class="headerlink" title="1. noCache"></a>1. noCache</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">        .cacheControl(<span class="keyword">new</span> CacheControl.Builder().noCache().build())</span><br><span class="line">        .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure>

<h4 id="2-maxAge"><a href="#2-maxAge" class="headerlink" title="2. maxAge"></a>2. maxAge</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.<span class="constructor">Builder()</span></span><br><span class="line">    .cache<span class="constructor">Control(<span class="params">new</span> CacheControl.Builder()</span>.max<span class="constructor">Age(0, TimeUnit.SECONDS)</span>.build<span class="literal">()</span>)</span><br><span class="line">    .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">    .build<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>

<h4 id="3-Only-If-Cached"><a href="#3-Only-If-Cached" class="headerlink" title="3. Only-If-Cached"></a>3. Only-If-Cached</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.<span class="constructor">Builder()</span></span><br><span class="line">      .cache<span class="constructor">Control(<span class="params">new</span> CacheControl.Builder()</span></span><br><span class="line">      .only<span class="constructor">IfCached()</span></span><br><span class="line">      .build<span class="literal">()</span>)</span><br><span class="line">      .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">      .build<span class="literal">()</span>;</span><br><span class="line">Response forceCacheResponse = client.<span class="keyword">new</span><span class="constructor">Call(<span class="params">request</span>)</span>.execute<span class="literal">()</span>;</span><br><span class="line"><span class="keyword">if</span> (forceCacheResponse.code<span class="literal">()</span> != <span class="number">504</span>) &#123;</span><br><span class="line">    <span class="comment">// The resource was cached! Show it.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// The resource was not cached.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-MaxStale"><a href="#4-MaxStale" class="headerlink" title="4. MaxStale"></a>4. MaxStale</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">Request request = <span class="keyword">new</span> Request.<span class="constructor">Builder()</span></span><br><span class="line">        .cache<span class="constructor">Control(<span class="params">new</span> CacheControl.Builder()</span></span><br><span class="line">        .max<span class="constructor">Stale(365, TimeUnit.DAYS)</span></span><br><span class="line">        .build<span class="literal">()</span>)</span><br><span class="line">        .url(<span class="string">&quot;http://publicobject.com/helloworld.txt&quot;</span>)</span><br><span class="line">        .build<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<h3 id="二、Cache的设计"><a href="#二、Cache的设计" class="headerlink" title="二、Cache的设计"></a>二、Cache的设计</h3><p>CacheInterceptor负责对缓存的处理。<br>根据当前时间戳、源request和该request对应的response缓存（cacheCandidate变量， 存储在cache中（InternalCache实例））三个因素来确定缓存逻辑。</p>
<ol>
<li>如果request中禁用了网络、同时cacheResponse为空，则直接返回504错误；</li>
<li>如果request中禁用了网络，同时cacheResponse不为空，则直接返回cacheResponse;</li>
<li>如果以上2条不满足，则将request传递给下一个责任链处理，即会请求网络。继续后面的处理。</li>
<li>如果cacheResponse不为空，且responseCode为304（HTTP_NOT_MODIFIED），则基于cacheResponse和networkResponse构建新的response，并更新本地缓存。</li>
<li>如果cacheResponse为空：<br>如果该response中含有body、并且该response是可缓存的，则将该response存入cache（InternalCache实例）中。</li>
<li>如果该request非GET请求，则从cache中移除该请求。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="meta">@Nullable</span> InternalCache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheInterceptor</span><span class="params">(<span class="meta">@Nullable</span> InternalCache cache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Response cacheCandidate = cache != <span class="keyword">null</span></span><br><span class="line">                ? cache.get(chain.request())</span><br><span class="line">                : <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        CacheStrategy strategy = <span class="keyword">new</span> CacheStrategy.Factory(now, chain.request(), cacheCandidate).get();</span><br><span class="line">        Request networkRequest = strategy.networkRequest;</span><br><span class="line">        Response cacheResponse = strategy.cacheResponse;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cache.trackResponse(strategy);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cacheCandidate != <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            closeQuietly(cacheCandidate.body()); <span class="comment">// The cache candidate wasn&#x27;t applicable. Close it.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we&#x27;re forbidden from using the network and the cache is insufficient, fail.</span></span><br><span class="line">        <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span> &amp;&amp; cacheResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Response.Builder()</span><br><span class="line">                    .request(chain.request())</span><br><span class="line">                    .protocol(Protocol.HTTP_1_1)</span><br><span class="line">                    .code(<span class="number">504</span>)</span><br><span class="line">                    .message(<span class="string">&quot;Unsatisfiable Request (only-if-cached)&quot;</span>)</span><br><span class="line">                    .body(Util.EMPTY_RESPONSE)</span><br><span class="line">                    .sentRequestAtMillis(-<span class="number">1L</span>)</span><br><span class="line">                    .receivedResponseAtMillis(System.currentTimeMillis())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we don&#x27;t need the network, we&#x27;re done.</span></span><br><span class="line">        <span class="keyword">if</span> (networkRequest == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cacheResponse.newBuilder()</span><br><span class="line">                    .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Response networkResponse = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            networkResponse = chain.proceed(networkRequest);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// If we&#x27;re crashing on I/O or otherwise, don&#x27;t leak the cache body.</span></span><br><span class="line">            <span class="keyword">if</span> (networkResponse == <span class="keyword">null</span> &amp;&amp; cacheCandidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                closeQuietly(cacheCandidate.body());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we have a cache response too, then we&#x27;re doing a conditional get.</span></span><br><span class="line">        <span class="keyword">if</span> (cacheResponse != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (networkResponse.code() == HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">                Response response = cacheResponse.newBuilder()</span><br><span class="line">                        .headers(combine(cacheResponse.headers(), networkResponse.headers()))</span><br><span class="line">                        .sentRequestAtMillis(networkResponse.sentRequestAtMillis())</span><br><span class="line">                        .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis())</span><br><span class="line">                        .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">                        .networkResponse(stripBody(networkResponse))</span><br><span class="line">                        .build();</span><br><span class="line">                networkResponse.body().close();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Update the cache after combining headers but before stripping the</span></span><br><span class="line">                <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></span><br><span class="line">                cache.trackConditionalCacheHit();</span><br><span class="line">                cache.update(cacheResponse, response);</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                closeQuietly(cacheResponse.body());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Response response = networkResponse.newBuilder()</span><br><span class="line">                .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">                .networkResponse(stripBody(networkResponse))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (HttpHeaders.hasBody(response) &amp;&amp; CacheStrategy.isCacheable(response, networkRequest)) &#123;</span><br><span class="line">                <span class="comment">// Offer this request to the cache.</span></span><br><span class="line">                CacheRequest cacheRequest = cache.put(response);</span><br><span class="line">                <span class="keyword">return</span> cacheWritingResponse(cacheRequest, response);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (HttpMethod.invalidatesCache(networkRequest.method())) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cache.remove(networkRequest);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ignored) &#123;</span><br><span class="line">                    <span class="comment">// The cache cannot be written.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
注意点：<br>CacheRequest put(Response response)<br>put操作的缓存逻辑：</li>
<li>如果是非GET请求，则不作缓存；</li>
<li>如果response的headers中含有Vary指令、且值包含“*”，则不作缓存；</li>
<li>其他情况下可以缓存，put方法返回CacheRequestImpl实例（CacheRequest接口）。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="keyword">implements</span> <span class="title">Closeable</span>, <span class="title">Flushable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> InternalCache internalCache = <span class="keyword">new</span> InternalCache() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function">Response <span class="title">get</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Cache.<span class="keyword">this</span>.get(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function">CacheRequest <span class="title">put</span><span class="params">(Response response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Cache.<span class="keyword">this</span>.put(response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Request request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.remove(request);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Response cached, Response network)</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.update(cached, network);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trackConditionalCacheHit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.trackConditionalCacheHit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trackResponse</span><span class="params">(CacheStrategy cacheStrategy)</span> </span>&#123;</span><br><span class="line">            Cache.<span class="keyword">this</span>.trackResponse(cacheStrategy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">final</span> DiskLruCache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cache</span><span class="params">(File directory, <span class="keyword">long</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(directory, maxSize, FileSystem.SYSTEM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Cache(File directory, <span class="keyword">long</span> maxSize, FileSystem fileSystem) &#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = DiskLruCache.create(fileSystem, directory, VERSION, ENTRY_COUNT, maxSize);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、DiskLruCache"><a href="#三、DiskLruCache" class="headerlink" title="三、DiskLruCache"></a>三、DiskLruCache</h3><p>一个journal文件的格式：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">libcore</span>.io.DiskLruCache</span><br><span class="line"><span class="attribute">1</span></span><br><span class="line"><span class="attribute">100</span></span><br><span class="line"><span class="attribute">2</span></span><br><span class="line"><span class="attribute">CLEAN</span> <span class="number">3400330</span>d<span class="number">1</span>dfc<span class="number">7</span>f<span class="number">3</span>f<span class="number">7</span>f<span class="number">4</span>b<span class="number">8</span>d<span class="number">4</span>d<span class="number">803</span>dfcf<span class="number">6</span> <span class="number">832</span> <span class="number">21054</span></span><br><span class="line"><span class="attribute">DIRTY</span> <span class="number">335</span>c<span class="number">4</span>c<span class="number">6028171</span>cfddfbaae<span class="number">1</span>a<span class="number">9</span>c<span class="number">313</span>c<span class="number">52</span></span><br><span class="line"><span class="attribute">CLEAN</span> <span class="number">335</span>c<span class="number">4</span>c<span class="number">6028171</span>cfddfbaae<span class="number">1</span>a<span class="number">9</span>c<span class="number">313</span>c<span class="number">52</span> <span class="number">3934</span> <span class="number">2342</span></span><br><span class="line"><span class="attribute">REMOVE</span> <span class="number">335</span>c<span class="number">4</span>c<span class="number">6028171</span>cfddfbaae<span class="number">1</span>a<span class="number">9</span>c<span class="number">313</span>c<span class="number">52</span></span><br><span class="line"><span class="attribute">DIRTY</span> <span class="number">1</span>ab<span class="number">96</span>a<span class="number">171</span>faeeee<span class="number">38496</span>d<span class="number">8</span>b<span class="number">330771</span>a<span class="number">7</span>a</span><br><span class="line"><span class="attribute">CLEAN</span> <span class="number">1</span>ab<span class="number">96</span>a<span class="number">171</span>faeeee<span class="number">38496</span>d<span class="number">8</span>b<span class="number">330771</span>a<span class="number">7</span>a <span class="number">1600</span> <span class="number">234</span></span><br><span class="line"><span class="attribute">READ</span> <span class="number">335</span>c<span class="number">4</span>c<span class="number">6028171</span>cfddfbaae<span class="number">1</span>a<span class="number">9</span>c<span class="number">313</span>c<span class="number">52</span></span><br><span class="line"><span class="attribute">READ</span> <span class="number">3400330</span>d<span class="number">1</span>dfc<span class="number">7</span>f<span class="number">3</span>f<span class="number">7</span>f<span class="number">4</span>b<span class="number">8</span>d<span class="number">4</span>d<span class="number">803</span>dfcf<span class="number">6</span></span><br></pre></td></tr></table></figure>
<h4 id="3-1-关键类SnapShot"><a href="#3-1-关键类SnapShot" class="headerlink" title="3.1 关键类SnapShot"></a>3.1 关键类SnapShot</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DiskLruCache</span> <span class="keyword">implements</span> <span class="title">Closeable</span>, <span class="title">Flushable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String key;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span>[] lengths;</span><br><span class="line">        <span class="keyword">final</span> File[] cleanFiles;</span><br><span class="line">        <span class="keyword">final</span> File[] dirtyFiles;</span><br><span class="line">        <span class="keyword">boolean</span> readable; <span class="comment">//该Entry是否已经成功发布</span></span><br><span class="line">        Editor currentEditor; <span class="comment">//如果该Entry正在编辑状态时, currentEditor为非空.</span></span><br><span class="line">        <span class="keyword">long</span> sequenceNumber; <span class="comment">//最近一次提交到该Entry的commit的序列号.</span></span><br><span class="line"></span><br><span class="line">        Entry(String key) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            lengths = <span class="keyword">new</span> <span class="keyword">long</span>[valueCount];</span><br><span class="line">            cleanFiles = <span class="keyword">new</span> File[valueCount];</span><br><span class="line">            dirtyFiles = <span class="keyword">new</span> File[valueCount];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The names are repetitive so re-use the same builder to avoid allocations.</span></span><br><span class="line">            StringBuilder fileBuilder = <span class="keyword">new</span> StringBuilder(key).append(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">int</span> truncateTo = fileBuilder.length();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">                fileBuilder.append(i);</span><br><span class="line">                cleanFiles[i] = <span class="keyword">new</span> File(directory, fileBuilder.toString());</span><br><span class="line">                fileBuilder.append(<span class="string">&quot;.tmp&quot;</span>);</span><br><span class="line">                dirtyFiles[i] = <span class="keyword">new</span> File(directory, fileBuilder.toString());</span><br><span class="line">                fileBuilder.setLength(truncateTo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为lengths[]赋值</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLengths</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将lengths[]中的值写入writer中.</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">writeLengths</span><span class="params">(BufferedSink writer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> IOException <span class="title">invalidLengths</span><span class="params">(String[] strings)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;unexpected journal line: &quot;</span> + Arrays.toString(strings));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回该Entry的一个snapshot.</span></span><br><span class="line">        <span class="function">Snapshot <span class="title">snapshot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A snapshot of the values for an entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Snapshot</span> <span class="keyword">implements</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceNumber;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Source[] sources;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span>[] lengths;</span><br><span class="line"></span><br><span class="line">        Snapshot(String key, <span class="keyword">long</span> sequenceNumber, Source[] sources, <span class="keyword">long</span>[] lengths) &#123;</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">            <span class="keyword">this</span>.sequenceNumber = sequenceNumber;</span><br><span class="line">            <span class="keyword">this</span>.sources = sources;</span><br><span class="line">            <span class="keyword">this</span>.lengths = lengths;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">key</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns an editor for this snapshot&#x27;s entry, or null if either the entry has changed since</span></span><br><span class="line"><span class="comment">         * this snapshot was created or if another edit is in progress.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="meta">@Nullable</span> <span class="function">Editor <span class="title">edit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> DiskLruCache.<span class="keyword">this</span>.edit(key, sequenceNumber);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Source <span class="title">getSource</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> sources[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLength</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> lengths[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (Source in : sources) &#123;</span><br><span class="line">                Util.closeQuietly(in);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Edits the values for an entry.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Entry entry;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span>[] written;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> done;</span><br><span class="line"></span><br><span class="line">        Editor(Entry entry) &#123;</span><br><span class="line">            <span class="keyword">this</span>.entry = entry;</span><br><span class="line">            <span class="keyword">this</span>.written = (entry.readable) ? <span class="keyword">null</span> : <span class="keyword">new</span> <span class="keyword">boolean</span>[valueCount];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">detach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; valueCount; i++) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fileSystem.delete(entry.dirtyFiles[i]);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="comment">// This file is potentially leaked. Not much we can do about that.</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                entry.currentEditor = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns an unbuffered input stream to read the last committed value, or null if no value has</span></span><br><span class="line"><span class="comment">         * been committed.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Source <span class="title">newSource</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Sink <span class="title">newSink</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Commits this edit so it is visible to readers.  This releases the edit lock so another edit</span></span><br><span class="line"><span class="comment">         * may be started on the same key.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">this</span>) &#123;</span><br><span class="line">                    completeEdit(<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                done = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Aborts this edit. This releases the edit lock so another edit may be started on the same</span></span><br><span class="line"><span class="comment">         * key.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abort</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DiskLruCache.<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (entry.currentEditor == <span class="keyword">this</span>) &#123;</span><br><span class="line">                    completeEdit(<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                done = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abortUnlessCommitted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>微信Mars连接库学习</title>
    <url>/2021/12/26/network_mars/</url>
    <content><![CDATA[<h4 id="主要目标"><a href="#主要目标" class="headerlink" title="主要目标"></a>主要目标</h4><p>在尽量不影响用户收消息<strong>及时性</strong>的前提下，根据网络类型<strong>自适应</strong>的找出保活信令TCP连接的<strong>尽可能大的心跳间隔</strong>，从而达到减少因心跳引起的空中信道资源消耗，减少心跳Server的负载，以及减少部分因心跳引起的耗电。</p>
<h4 id="自适应心跳间隔优化："><a href="#自适应心跳间隔优化：" class="headerlink" title="自适应心跳间隔优化："></a>自适应心跳间隔优化：</h4><h5 id="影响TCP连接寿命的因素"><a href="#影响TCP连接寿命的因素" class="headerlink" title="影响TCP连接寿命的因素"></a>影响TCP连接寿命的因素</h5><ol>
<li>NAT超时</li>
<li>DHCP的租期</li>
<li>网络状态变化</li>
</ol>
<h5 id="心跳范围选择"><a href="#心跳范围选择" class="headerlink" title="心跳范围选择"></a>心跳范围选择</h5><ol>
<li><h6 id="前后台区分处理"><a href="#前后台区分处理" class="headerlink" title="前后台区分处理"></a>前后台区分处理</h6><p>为了保证微信收消息及时性的体验，当微信处于前台活跃状态时，使用固定心跳；</p>
<p>微信进入后台时，先用几次最小心跳维持长链接。然后进入后台自适应心跳计算。这样做的目的是尽量选择用户不活跃的时间段，来减少心跳计算可能产生的消息不及时收取影响。</p>
</li>
<li><h6 id="后台自适应心跳选择区间"><a href="#后台自适应心跳选择区间" class="headerlink" title="后台自适应心跳选择区间"></a>后台自适应心跳选择区间</h6><p><strong>2.1 自适应心跳算法描述：</strong></p>
<p><strong>按网络类型区分计算：</strong></p>
<p><strong>a）变量说明</strong></p>
<p>[MinHeart，MaxHeart]——心跳可选区间，具体是[4.5min,  9min50s]；<br>NetHeartbeatInfo.cur_heart_ ——当前心跳间隔<br>NetHeartbeatInfo.success_curr_heart_count_——当前心跳间隔下的成功次数。当心跳间隔变化时，该值清零。<br>NetHeartbeatInfo.fail_heart_count_——当前心跳间隔下的失败次数。当心跳间隔变化时，该值清零。</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Heartbeart Range</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MinHeartInterval (4  * 60 * 1000 + 30 * 1000)   <span class="comment">//最小心跳间隔（4.5min）</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxHeartInterval (9 * 60 * 1000 + 50 * 1000)   <span class="comment">//最大心跳间隔（9min50s）</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HeartStep (60 * 1000)  <span class="comment">//心跳增加步长</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SuccessStep  (20 * 1000) <span class="comment">//稳定期后的探测步长</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxHeartFailCount (3)    <span class="comment">//最大心跳失败次数阈值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BaseSuccCount (3) <span class="comment">//当前心跳间隔下的成功次数阈值</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NetStableTestCount (3)  <span class="comment">//使用最小心跳值达到3次时，开始探测动态心跳。</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>长链接建立时，先用最小心跳（MinHeartInterval），当成功次数达到NetStableTestCount(3)时，开始心跳探测。<br>当前心跳间隔（current_net_heart_info_.cur_heart_）下：</p>
<ol>
<li>如果成功次数达到阈值时，在当前心跳间隔的基础上增加HeartStep(60s)，最大不高于MaxHeartInterval（9min50s）；<br>当心跳值达到阈值时，设置心跳间隔为MaxHeartInterval - SuccessStep，并设为稳定态，同时成功和失败次数清零。</li>
<li>如果失败次数达到阈值时，注意这里面根据是否是稳定状态（is_stable_）分开处理：<br>稳定状态：心跳值直接用最小值，并翻转为非稳定状态，同时成功和失败次数清零；<br>非稳定状态：在当前心跳间隔的基础上减小（HeartStep + SuccessStep），最小不低于MinHeartInterval（4.5mins），并翻转为稳定状态。同时成功和失败次数清零。</li>
</ol>
<h3 id="动态超时机制"><a href="#动态超时机制" class="headerlink" title="动态超时机制"></a>动态超时机制</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kWifiTaskDelay = <span class="number">1500</span>; <span class="comment">//Wifi下延迟时间(ms)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kGPRSTaskDelay = <span class="number">3000</span>; <span class="comment">//GPRS下延迟时间(ms)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kGPRSMinRate = <span class="number">4</span> * <span class="number">1024</span>; <span class="comment">//GPRS下最低网速（bit/s）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kWifiMinRate = <span class="number">12</span> * <span class="number">1024</span>; <span class="comment">// Wifi下最低网速（bit/s）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kDynTimeFirstPackageWifiTimeout = <span class="number">7</span> * <span class="number">1000</span>; <span class="comment">//wifi下动态传输时间（网络状况佳）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kDynTimeFirstPackageGPRSTimeout = <span class="number">10</span> * <span class="number">1000</span>; <span class="comment">//mobile动态首包传输时间（网络状况佳）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//基准首包传输时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kBaseFirstPackageWifiTimeout = <span class="number">12</span> * <span class="number">1000</span>; <span class="comment">//wifi下基准首包传输时间</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kBaseFirstPackageGPRSTimeout = <span class="number">15</span> * <span class="number">1000</span>; <span class="comment">//GPRS下基准首包传输时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大超时时间阈值</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kMaxFirstPackageWifiTimeout = <span class="number">22</span> * <span class="number">1000</span>; <span class="comment">//wifi下首包最大超时时间（阈值）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kMaxFirstPackageGPRSTimeout = <span class="number">30</span> * <span class="number">1000</span>; <span class="comment">//GPRS下手包最大超时时间（阈值）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> kMaxRecvLen = <span class="number">64</span> * <span class="number">1024</span>; <span class="comment">//最大接收长度</span></span><br></pre></td></tr></table></figure>

<h4 id="首包超时时间："><a href="#首包超时时间：" class="headerlink" title="首包超时时间："></a>首包超时时间：</h4><ol>
<li><p>网络状态Excellent、且没有设置服务器的处理耗时时间，则首包超时时间(ms)为：</p>
<p>动态首包传输时间 + 排队个数 * 任务延迟时间</p>
</li>
<li><p>如果设置了服务器的处理耗时（StnLogic.Task的serverProcessCost字段），则首包超时时间(ms)：</p>
<p>传入的服务器处理耗时 + 1000 *  发包大小 / 最低网速 + 排队个数 * 任务延迟时间;</p>
</li>
<li><p>否则的话，首包超时时间(ms)为：</p>
<p>基准首包传输时间 + 1000 * 发包大小 / 最低网速+ 排队个数 * 任务延迟时间</p>
</li>
</ol>
<h4 id="读写超时时间："><a href="#读写超时时间：" class="headerlink" title="读写超时时间："></a>读写超时时间：</h4><p>首包超时时间 + 1000 * 最大接收长度 / 最小传输速率</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>ARouter使用指南与原理分析</title>
    <url>/2021/12/26/deep_in_arouter/</url>
    <content><![CDATA[<p>Arouter通过APT技术生成的文件如下：<br>package: com.alibaba.android.arouter.routes;</p>
<ul>
<li>ARouter$$Group$$&lt;groupName&gt;.java</li>
<li>ARouter$$Interceptors$$&lt;moduleName&gt;.java</li>
<li>ARouter$$Providers$$&lt;moduleName&gt;.java</li>
<li>ARouter$$Root$$&lt;moduleName&gt;.java</li>
</ul>
<p>如果使用AutoWired的话，会在原有的package下生成：</p>
<ul>
<li>&lt;ClassName&gt;$$ARouter$$Autowired.java</li>
</ul>
<p>下面分别举例说明：</p>
<ol>
<li>ARouter$$Group$$&lt;groupName&gt;.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.enums.RouteType;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.yxf.arouter.other.OtherActivity;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Group</span>$$<span class="title">other</span> <span class="keyword">implements</span> <span class="title">IRouteGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; atlas)</span> </span>&#123;</span><br><span class="line">    atlas.put(<span class="string">&quot;/other/otherActivity&quot;</span>, RouteMeta.build(RouteType.ACTIVITY, OtherActivity.class, <span class="string">&quot;/other/otheractivity&quot;</span>, <span class="string">&quot;other&quot;</span>, <span class="keyword">null</span>, -<span class="number">1</span>, -<span class="number">2147483648</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ARouter$$Providers$$&lt;moduleName&gt;.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.model.RouteMeta;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IProviderGroup;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Providers</span>$$<span class="title">moduleother</span> <span class="keyword">implements</span> <span class="title">IProviderGroup</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, RouteMeta&gt; providers)</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>ARouter$$Root$$&lt;moduleName&gt;.java<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.android.arouter.routes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteGroup;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.android.arouter.facade.template.IRouteRoot;</span><br><span class="line"><span class="keyword">import</span> java.lang.Class;</span><br><span class="line"><span class="keyword">import</span> java.lang.Override;</span><br><span class="line"><span class="keyword">import</span> java.lang.String;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DO NOT EDIT THIS FILE!!! IT WAS GENERATED BY AROUTER. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ARouter</span>$$<span class="title">Root</span>$$<span class="title">moduleother</span> <span class="keyword">implements</span> <span class="title">IRouteRoot</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInto</span><span class="params">(Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt; routes)</span> </span>&#123;</span><br><span class="line">    routes.put(<span class="string">&quot;other&quot;</span>, ARouter$$Group$$other.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="WareHouse的数据结构："><a href="#WareHouse的数据结构：" class="headerlink" title="WareHouse的数据结构："></a>WareHouse的数据结构：</h4><img src="https://img2020.cnblogs.com/blog/368055/202110/368055-20211006214111989-1436169959.jpg" alt="test.png"><br><img src="https://img2020.cnblogs.com/blog/368055/202110/368055-20211006214135774-245463483.jpg"><br><img src="https://img2020.cnblogs.com/blog/368055/202110/368055-20211006214149891-914672834.jpg"></li>
</ol>
<h4 id="Arouter的初始化："><a href="#Arouter的初始化：" class="headerlink" title="Arouter的初始化："></a>Arouter的初始化：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Arouter.init(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p>主要工作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LogisticsCenter.init(mContext, executor);</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * LogisticsCenter init, load all metas in memory. Demand initialization</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, ThreadPoolExecutor tpe)</span> <span class="keyword">throws</span> HandlerException </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        executor = tpe;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">long</span> startInit = System.currentTimeMillis();</span><br><span class="line">            <span class="comment">//load by plugin first</span></span><br><span class="line">            loadRouterMap();</span><br><span class="line">            <span class="keyword">if</span> (registerByPlugin) &#123;</span><br><span class="line">                logger.info(TAG, <span class="string">&quot;Load router map by arouter-auto-register plugin.&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Set&lt;String&gt; routerMap;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// It will rebuild router map every times when debuggable.</span></span><br><span class="line">                <span class="keyword">if</span> (ARouter.debuggable() || PackageUtils.isNewVersion(context)) &#123;</span><br><span class="line">                    routerMap = ClassUtils.getFileNameByPackageName(mContext, ROUTE_ROOT_PAKCAGE);</span><br><span class="line">                    <span class="keyword">if</span> (!routerMap.isEmpty()) &#123;</span><br><span class="line">                        context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).edit().putStringSet(AROUTER_SP_KEY_MAP, routerMap).apply();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    PackageUtils.updateVersion(context);    <span class="comment">// Save new version name when router map update finishes.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    routerMap = <span class="keyword">new</span> HashSet&lt;&gt;(context.getSharedPreferences(AROUTER_SP_CACHE_KEY, Context.MODE_PRIVATE).getStringSet(AROUTER_SP_KEY_MAP, <span class="keyword">new</span> HashSet&lt;String&gt;()));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                startInit = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (String className : routerMap) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_ROOT)) &#123;</span><br><span class="line">                        <span class="comment">//以com.alibaba.android.arouter.routes.ARouter$$Root开头。</span></span><br><span class="line">                        ((IRouteRoot) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.groupsIndex);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_INTERCEPTORS)) &#123;</span><br><span class="line">                        <span class="comment">//以com.alibaba.android.arouter.routes.ARouter$$Interceptors开头。</span></span><br><span class="line">                        ((IInterceptorGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.interceptorsIndex);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className.startsWith(ROUTE_ROOT_PAKCAGE + DOT + SDK_NAME + SEPARATOR + SUFFIX_PROVIDERS)) &#123;</span><br><span class="line">                        <span class="comment">//以com.alibaba.android.arouter.routes.ARouter$$Providers开头。</span></span><br><span class="line">                        ((IProviderGroup) (Class.forName(className).getConstructor().newInstance())).loadInto(Warehouse.providersIndex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">&quot;ARouter init logistics center exception! [&quot;</span> + e.getMessage() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中使用的executor为DefaultPoolExecutor.getInstance()。</p>
<ol>
<li>扫描com.alibaba.android.arouter.routes包名下的所有className，存放入HashSet中；</li>
<li>遍历该HashSet, 分三种情况：<br>（1）针对ARouter$$Root开头的className，实例化IRouteRoot并调用loadInfo()加载到Warehouse.groupsIndex（Map&lt;String, Class&lt;? extends IRouteGroup&gt;&gt;类型）；<br>（2）针对ARouer$$Interceptors开头的className，实例化IInterceptorGroup并调用loadInfo()加载到Warehouse.interceptorsIndex（Map&lt;Integer, Class&lt;? extends IInterceptor&gt;&gt;类型）；<br>（3）针对ARouer$$Providers开头的className，实例化IProviderGroup并调用loadInfo()加载到Warehouse.providersIndex（Map&lt;String, RouteMeta&gt;类型）。</li>
</ol>
<h4 id="Arouter-getInstance-build-String-path"><a href="#Arouter-getInstance-build-String-path" class="headerlink" title="Arouter.getInstance().build(String path);"></a>Arouter.getInstance().build(String path);</h4><p>通过path和group构建一个Postcard实例；</p>
<h3 id="Postcard-navigation"><a href="#Postcard-navigation" class="headerlink" title="Postcard$navigation()"></a>Postcard$navigation()</h3><p>-&gt; Postcard#navigation(Context)<br>-&gt; Postcard#navigation(Context context, NavigationCallback callback)<br>-&gt; Arouter#navigation(Context mContext, Postcard postcard, int requestCode, NavigationCallback callback)<br>-&gt; LogisticsCenter#completion(Postcard postcard)</p>
<p>下面重点分析一下LogisticsCenter#completion(Postcard)方法。</p>
<ol>
<li>根据postcard的path，从Warehouse.routes(Map&lt;String, RouteMeta&gt;)中查找RouteMeta实例routeMeta；</li>
<li>如果routeMeta为空，则先从Warehouse.groupsIndex中查找postcard所属的group对应的Class&lt;? extends IRouteGroup&gt;实例，然后通过反射构造出IRouteGroup实例，然后调用iGroupInstance.loadInto(Warehouse.routes)，然后再将postcard所属的group从Warehouse.groupsIndex中移除。然后再次调用LogisticsCenter#completion(Postcard)方法。</li>
<li>设置PostCard的destination、type、priority和extra。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogisticsCenter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Completion the postcard by route metas</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> postcard Incomplete postcard, should complete by this method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">completion</span><span class="params">(Postcard postcard)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == postcard) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">&quot;No postcard!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RouteMeta routeMeta = Warehouse.routes.get(postcard.getPath());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == routeMeta) &#123;    <span class="comment">// Maybe its does&#x27;t exist, or didn&#x27;t load.</span></span><br><span class="line">            Class&lt;? extends IRouteGroup&gt; groupMeta = Warehouse.groupsIndex.get(postcard.getGroup());  <span class="comment">// Load route meta.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == groupMeta) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoRouteFoundException(TAG + <span class="string">&quot;There is no route match the path [&quot;</span> + postcard.getPath() + <span class="string">&quot;], in group [&quot;</span> + postcard.getGroup() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Load route and cache it into memory, then delete from metas.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ...</span><br><span class="line">                    IRouteGroup iGroupInstance = groupMeta.getConstructor().newInstance();</span><br><span class="line">                    iGroupInstance.loadInto(Warehouse.routes);</span><br><span class="line">                    Warehouse.groupsIndex.remove(postcard.getGroup());</span><br><span class="line">                    ...</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(TAG + <span class="string">&quot;Fatal exception when loading group meta. [&quot;</span> + e.getMessage() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                completion(postcard);   <span class="comment">// Reload</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            postcard.setDestination(routeMeta.getDestination());</span><br><span class="line">            postcard.setType(routeMeta.getType());</span><br><span class="line">            postcard.setPriority(routeMeta.getPriority());</span><br><span class="line">            postcard.setExtra(routeMeta.getExtra());</span><br><span class="line"></span><br><span class="line">            Uri rawUri = postcard.getUri();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != rawUri) &#123;   <span class="comment">// Try to set params into bundle.</span></span><br><span class="line">                Map&lt;String, String&gt; resultMap = TextUtils.splitQueryParameters(rawUri);</span><br><span class="line">                Map&lt;String, Integer&gt; paramsType = routeMeta.getParamsType();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (MapUtils.isNotEmpty(paramsType)) &#123;</span><br><span class="line">                    <span class="comment">// Set value by its type, just for params which annotation by @Param</span></span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; params : paramsType.entrySet()) &#123;</span><br><span class="line">                        setValue(postcard,</span><br><span class="line">                                params.getValue(),</span><br><span class="line">                                params.getKey(),</span><br><span class="line">                                resultMap.get(params.getKey()));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Save params name which need auto inject.</span></span><br><span class="line">                    postcard.getExtras().putStringArray(ARouter.AUTO_INJECT, paramsType.keySet().toArray(<span class="keyword">new</span> String[]&#123;&#125;));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Save raw uri</span></span><br><span class="line">                postcard.withString(ARouter.RAW_URI, rawUri.toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (routeMeta.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> PROVIDER:  <span class="comment">// if the route is provider, should find its instance</span></span><br><span class="line">                    <span class="comment">// Its provider, so it must implement IProvider</span></span><br><span class="line">                    Class&lt;? extends IProvider&gt; providerMeta = (Class&lt;? extends IProvider&gt;) routeMeta.getDestination();</span><br><span class="line">                    IProvider instance = Warehouse.providers.get(providerMeta);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123; <span class="comment">// There&#x27;s no instance of this provider</span></span><br><span class="line">                        IProvider provider;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            provider = providerMeta.getConstructor().newInstance();</span><br><span class="line">                            provider.init(mContext);</span><br><span class="line">                            Warehouse.providers.put(providerMeta, provider);</span><br><span class="line">                            instance = provider;</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> HandlerException(<span class="string">&quot;Init provider failed! &quot;</span> + e.getMessage());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    postcard.setProvider(instance);</span><br><span class="line">                    postcard.greenChannel();    <span class="comment">// Provider should skip all of interceptors</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                    postcard.greenChannel();    <span class="comment">// Fragment needn&#x27;t interceptors</span></span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li><p>调用ARouter#_navigation(final Context context, final Postcard postcard, final int requestCode, final NavigationCallback callback)实现跳转功能。</p>
<p> 如果是Activity的跳转，则会调用ARouter#startActivity(int requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">_ARouter</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">_navigation</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Postcard postcard, <span class="keyword">final</span> <span class="keyword">int</span> requestCode, <span class="keyword">final</span> NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Context currentContext = <span class="keyword">null</span> == context ? mContext : context;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (postcard.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> ACTIVITY:</span><br><span class="line">                <span class="comment">// Build intent</span></span><br><span class="line">                <span class="keyword">final</span> Intent intent = <span class="keyword">new</span> Intent(currentContext, postcard.getDestination());</span><br><span class="line">                intent.putExtras(postcard.getExtras());</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set flags.</span></span><br><span class="line">                <span class="keyword">int</span> flags = postcard.getFlags();</span><br><span class="line">                <span class="keyword">if</span> (-<span class="number">1</span> != flags) &#123;</span><br><span class="line">                    intent.setFlags(flags);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(currentContext <span class="keyword">instanceof</span> Activity)) &#123;    <span class="comment">// Non activity, need less one flag.</span></span><br><span class="line">                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set Actions</span></span><br><span class="line">                String action = postcard.getAction();</span><br><span class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(action)) &#123;</span><br><span class="line">                    intent.setAction(action);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Navigation in main looper.</span></span><br><span class="line">                runInMainThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        startActivity(requestCode, currentContext, intent, postcard, callback);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PROVIDER:</span><br><span class="line">                <span class="keyword">return</span> postcard.getProvider();</span><br><span class="line">            <span class="keyword">case</span> BOARDCAST:</span><br><span class="line">            <span class="keyword">case</span> CONTENT_PROVIDER:</span><br><span class="line">            <span class="keyword">case</span> FRAGMENT:</span><br><span class="line">                Class fragmentMeta = postcard.getDestination();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object instance = fragmentMeta.getConstructor().newInstance();</span><br><span class="line">                    <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> Fragment) &#123;</span><br><span class="line">                        ((Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance <span class="keyword">instanceof</span> android.support.v4.app.Fragment) &#123;</span><br><span class="line">                        ((android.support.v4.app.Fragment) instance).setArguments(postcard.getExtras());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> instance;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    logger.error(Consts.TAG, <span class="string">&quot;Fetch fragment instance error, &quot;</span> + TextUtils.formatStackTrace(ex.getStackTrace()));</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> METHOD:</span><br><span class="line">            <span class="keyword">case</span> SERVICE:</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start activity</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> ActivityCompat</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActivity</span><span class="params">(<span class="keyword">int</span> requestCode, Context currentContext, Intent intent, Postcard postcard, NavigationCallback callback)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (requestCode &gt;= <span class="number">0</span>) &#123;  <span class="comment">// Need start for result</span></span><br><span class="line">            <span class="keyword">if</span> (currentContext <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">                ActivityCompat.startActivityForResult((Activity) currentContext, intent, requestCode, postcard.getOptionsBundle());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger.warning(Consts.TAG, <span class="string">&quot;Must use [navigation(activity, ...)] to support [startActivityForResult]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ActivityCompat.startActivity(currentContext, intent, postcard.getOptionsBundle());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((-<span class="number">1</span> != postcard.getEnterAnim() &amp;&amp; -<span class="number">1</span> != postcard.getExitAnim()) &amp;&amp; currentContext <span class="keyword">instanceof</span> Activity) &#123;    <span class="comment">// Old version.</span></span><br><span class="line">            ((Activity) currentContext).overridePendingTransition(postcard.getEnterAnim(), postcard.getExitAnim());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != callback) &#123; <span class="comment">// Navigation over.</span></span><br><span class="line">            callback.onArrival(postcard);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扫描dex文件中包名com-alibaba-android-arouter-routes下的所有class文件"><a href="#扫描dex文件中包名com-alibaba-android-arouter-routes下的所有class文件" class="headerlink" title="扫描dex文件中包名com.alibaba.android.arouter.routes下的所有class文件"></a>扫描dex文件中包名com.alibaba.android.arouter.routes下的所有class文件</h3><p>ClassUtils.getFileNameByPackageName()方法返回指定包名下的所有class文件名。</p>
</li>
</ol>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.alibaba.android.arouter.routes.ARouter$$Root$$app</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Root$$moduleother，</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Root$$modulethird,</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Root$$moduleservice,</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Root$$arouterapi,</span><br><span class="line"></span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Group$$arouter, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Group$$main, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Group$$other, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Group$$third, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Group$$service, </span><br><span class="line"></span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Providers$$arouterapi,</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Providers$$app, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Providers$$moduleother,</span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Providers$$modulethird, </span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Providers$$moduleservice,</span><br><span class="line"></span><br><span class="line">com.alibaba.android.arouter.routes.ARouter$$Interceptors$$app</span><br></pre></td></tr></table></figure>

<p>具体代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ClassUtils.java</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getFileNameByPackageName</span><span class="params">(Context context, <span class="keyword">final</span> String packageName)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> PackageManager.NameNotFoundException, IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Set&lt;String&gt; classNames = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; paths = getSourcePaths(context);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch parserCtl = <span class="keyword">new</span> CountDownLatch(paths.size());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">final</span> String path : paths) &#123;</span><br><span class="line">            DefaultPoolExecutor.getInstance().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    DexFile dexfile = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//path: /data/app/com.yxf.arouter.sample-c4N-3bLkk7jsTmTOlMbi-w==/base.apk</span></span><br><span class="line">                        <span class="keyword">if</span> (path.endsWith(EXTRACTED_SUFFIX)) &#123;</span><br><span class="line">                            <span class="comment">//NOT use new DexFile(path), because it will throw &quot;permission error in /data/dalvik-cache&quot;</span></span><br><span class="line">                            dexfile = DexFile.loadDex(path, path + <span class="string">&quot;.tmp&quot;</span>, <span class="number">0</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            dexfile = <span class="keyword">new</span> DexFile(path);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        Enumeration&lt;String&gt; dexEntries = dexfile.entries();</span><br><span class="line">                        <span class="keyword">while</span> (dexEntries.hasMoreElements()) &#123;</span><br><span class="line">                            String className = dexEntries.nextElement();</span><br><span class="line">                            <span class="keyword">if</span> (className.startsWith(packageName)) &#123;</span><br><span class="line">                                classNames.add(className);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;ARouter&quot;</span>, <span class="string">&quot;Scan map file in dex files made error.&quot;</span>, ignore);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">null</span> != dexfile) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                dexfile.close();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        parserCtl.countDown();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parserCtl.await();</span><br><span class="line"></span><br><span class="line">        Log.d(Consts.TAG, <span class="string">&quot;Filter &quot;</span> + classNames.size() + <span class="string">&quot; classes by packageName &lt;&quot;</span> + packageName + <span class="string">&quot;&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> classNames;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="arouter-register"><a href="#arouter-register" class="headerlink" title="arouter-register"></a>arouter-register</h4><p>会扫描所有以下三种的接口实例：</p>
<ol>
<li>IRouteRoot</li>
<li>IInterceptorGroup</li>
<li>IProviderGroup</li>
</ol>
<p>然后添加到</p>
<p>例如：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">private <span class="keyword">static</span> void loadRouterMap() &#123;</span><br><span class="line">    registerByPlugin = true;</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Root</span><span class="variable">$</span><span class="variable">$arouterapi</span>&quot;</span>);</span><br><span class="line">    register( <span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Root</span><span class="variable">$</span><span class="variable">$moduleother</span>&quot;</span>);</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Root</span><span class="variable">$</span><span class="variable">$modulethird</span>&quot;</span>);</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Root</span><span class="variable">$</span><span class="variable">$app</span>&quot;</span>);</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Providers</span><span class="variable">$</span><span class="variable">$arouterapi</span>&quot;</span>);</span><br><span class="line">    register( <span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Providers</span><span class="variable">$</span><span class="variable">$moduleother</span>&quot;</span>);</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Providers</span><span class="variable">$</span><span class="variable">$modulethird</span>&quot;</span>);</span><br><span class="line">    register(<span class="string">&quot;com.alibaba.android.arouter.routes.ARouter<span class="variable">$</span><span class="variable">$Providers</span><span class="variable">$</span><span class="variable">$app</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>路由组件</tag>
      </tags>
  </entry>
  <entry>
    <title>Android应用架构之MVVM模式</title>
    <url>/2022/01/27/android_mvvm/</url>
    <content><![CDATA[<h4 id="一、ViewModel部分"><a href="#一、ViewModel部分" class="headerlink" title="一、ViewModel部分"></a>一、ViewModel部分</h4><h5 id="1-ViewModelProvider"><a href="#1-ViewModelProvider" class="headerlink" title="1. ViewModelProvider"></a>1. ViewModelProvider</h5><p>使用方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> viewmodel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(MyViewModel::<span class="keyword">class</span>.java)</span><br><span class="line"><span class="keyword">val</span> viewModel2 = ViewModelProvider(<span class="keyword">this</span>, Injection.provideViewModelFactory(<span class="keyword">this</span>))</span><br><span class="line">            .<span class="keyword">get</span>(MyViewModel::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure>

<p>对应的ViewModelProvider构造方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.MainThread;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelProvider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_KEY =</span><br><span class="line">            <span class="string">&quot;androidx.lifecycle.ViewModelProvider.DefaultKey&quot;</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建创建一个类型为T的实例，其中T必须继承自ViewModel类。</span></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        &lt;T extends ViewModel&gt; <span class="function">T <span class="title">create</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Factory mFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ViewModelStore mViewModelStore;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//构造方法1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(<span class="meta">@NonNull</span> ViewModelStoreOwner owner)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(owner.getViewModelStore(), owner <span class="keyword">instanceof</span> HasDefaultViewModelProviderFactory</span><br><span class="line">                ? ((HasDefaultViewModelProviderFactory) owner).getDefaultViewModelProviderFactory()</span><br><span class="line">                : NewInstanceFactory.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//构造方法2</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(<span class="meta">@NonNull</span> ViewModelStoreOwner owner, <span class="meta">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(owner.getViewModelStore(), factory);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//构造方法3</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewModelProvider</span><span class="params">(<span class="meta">@NonNull</span> ViewModelStore store, <span class="meta">@NonNull</span> Factory factory)</span> </span>&#123;</span><br><span class="line">        mFactory = factory;</span><br><span class="line">        mViewModelStore = store;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(<span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">        String canonicalName = modelClass.getCanonicalName();</span><br><span class="line">        <span class="keyword">if</span> (canonicalName == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Local and anonymous classes can not be ViewModels&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> get(DEFAULT_KEY + <span class="string">&quot;:&quot;</span> + canonicalName, modelClass);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T extends ViewModel&gt; <span class="function">T <span class="title">get</span><span class="params">(<span class="meta">@NonNull</span> String key, <span class="meta">@NonNull</span> Class&lt;T&gt; modelClass)</span> </span>&#123;</span><br><span class="line">        ViewModel viewModel = mViewModelStore.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modelClass.isInstance(viewModel)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mFactory <span class="keyword">instanceof</span> OnRequeryFactory) &#123;</span><br><span class="line">                ((OnRequeryFactory) mFactory).onRequery(viewModel);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//noinspection StatementWithEmptyBody</span></span><br><span class="line">            <span class="keyword">if</span> (viewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> log a warning.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mFactory <span class="keyword">instanceof</span> KeyedFactory) &#123;</span><br><span class="line">            viewModel = ((KeyedFactory) mFactory).create(key, modelClass);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            viewModel = mFactory.create(modelClass);</span><br><span class="line">        &#125;</span><br><span class="line">        mViewModelStore.put(key, viewModel);</span><br><span class="line">        <span class="keyword">return</span> (T) viewModel;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-ViewModelStoreOwner"><a href="#2-ViewModelStoreOwner" class="headerlink" title="2. ViewModelStoreOwner"></a>2. ViewModelStoreOwner</h5><p>单一方法接口，用于获取一个ViewModelStore实例。</p>
<p>实现ViewModelStoreOwnwe的类有：</p>
<ul>
<li><p>androidx.activity.ComponentActivity</p>
</li>
<li><p>androidx.fragment.app.Fragment</p>
</li>
<li><p>androidx.fragment.app.FragmentActivity, etc.</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>androidx.activity.ComponentActivity中对该接口的实现如下：</p>
<p>首先通过父类android.app.Activity的**getLastNonConfigurationInstance()**方法获取一个自定义的NonConfigurationInstances实例。</p>
<p>注意ComponentActivity类的**onRetainNonConfigurationInstance()**方法被定义为final的，即不允许子类override。但是，又重新定义了一个onRetainCustomNonConfigurationInstance()，供子类使用，功能与onRetainNonConfigurationInstance()完全一样。</p>
<p>重点方法：</p>
<ul>
<li>getViewModelStore() ——获取ViewModelStore实例：</li>
</ul>
<p>​    如果成员变量mViewModelStore中有值，则直接返回mViewModelStore; </p>
<p>从getLastNonConfigurationInstance()中获取，如果有值，则赋给mViewModelStore并返回；</p>
<p>如果getLastNonConfigurationInstance()中无值，则new一个ViewModelStore实例，赋给mViewModelStore并返回。</p>
<ul>
<li>onRetainNonConfigurationInstance() ——数据的保存与恢复</li>
</ul>
<p>​    当configuration放生变化时，onRetainNonConfigurationInstance()会被系统调用，处于onStop和onDestroy之间，可以用来保存</p>
<p>任何Object的对象实例，当新的Activity实例被创建时通过getLastNonConfigurationInstance()获取上次保存的对象。</p>
<ol>
<li>如果成员变量mViewModelStore已经有值，则构造一个NonConfigurationInstances实例返回；</li>
<li>如果mViewModelStore为空，则尝试从getLastNonConfigurationInstance()中获取：</li>
</ol>
<p>​    ①  getLastNonConfigurationInstance()无值、且onRetainCustomNonConfigurationInstance()中也无值，返回null；</p>
<p>​    ②  构造一个NonConfigurationInstances实例返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentActivity</span> <span class="keyword">extends</span> <span class="title">androidx</span>.<span class="title">core</span>.<span class="title">app</span>.<span class="title">ComponentActivity</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">LifecycleOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewModelStoreOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">SavedStateRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">OnBackPressedDispatcherOwner</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonConfigurationInstances</span> </span>&#123;</span><br><span class="line">        Object custom;</span><br><span class="line">        ViewModelStore viewModelStore;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> ViewModelStore mViewModelStore;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取ViewModelStore实例：</span></span><br><span class="line"><span class="comment">     * 1. 如果成员变量mViewModelStore中有值，则直接返回mViewModelStore;</span></span><br><span class="line"><span class="comment">     * 2. 从getLastNonConfigurationInstance()中获取，如果有值，则赋给mViewModelStore并返回；</span></span><br><span class="line"><span class="comment">     * 3. 如果getLastNonConfigurationInstance()中无值，则new一个ViewModelStore实例，赋给mViewModelStore并返回。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (getApplication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Your activity is not yet attached to the &quot;</span></span><br><span class="line">                    + <span class="string">&quot;Application instance. You can&#x27;t request ViewModel before onCreate call.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mViewModelStore == <span class="keyword">null</span>) &#123;</span><br><span class="line">            NonConfigurationInstances nc =</span><br><span class="line">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class="line">            <span class="keyword">if</span> (nc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Restore the ViewModelStore from NonConfigurationInstances</span></span><br><span class="line">                mViewModelStore = nc.viewModelStore;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (mViewModelStore == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mViewModelStore = <span class="keyword">new</span> ViewModelStore();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mViewModelStore;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当configuration放生变化时，onRetainNonConfigurationInstance()会被系统调用，处于onStop和onDestroy之间，可以用来保存任何Object的对象实例，当新的Activity实例被创建时通过getLastNonConfigurationInstance()获取上次保存的对象。</span></span><br><span class="line"><span class="comment">     * 1. 如果成员变量mViewModelStore已经有值，则构造一个NonConfigurationInstances实例返回；</span></span><br><span class="line"><span class="comment">     * 2. 如果mViewModelStore为空，则尝试从getLastNonConfigurationInstance()中获取：</span></span><br><span class="line"><span class="comment">     *   1) getLastNonConfigurationInstance()无值、且onRetainCustomNonConfigurationInstance()中也无值，返回null；</span></span><br><span class="line"><span class="comment">     *   2) 构造一个NonConfigurationInstances实例返回。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">onRetainNonConfigurationInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object custom = onRetainCustomNonConfigurationInstance();</span><br><span class="line"></span><br><span class="line">        ViewModelStore viewModelStore = mViewModelStore;</span><br><span class="line">        <span class="keyword">if</span> (viewModelStore == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No one called getViewModelStore(), so see if there was an existing</span></span><br><span class="line">            <span class="comment">// ViewModelStore from our last NonConfigurationInstance</span></span><br><span class="line">            NonConfigurationInstances nc =</span><br><span class="line">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class="line">            <span class="keyword">if</span> (nc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                viewModelStore = nc.viewModelStore;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (viewModelStore == <span class="keyword">null</span> &amp;&amp; custom == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        NonConfigurationInstances nci = <span class="keyword">new</span> NonConfigurationInstances();</span><br><span class="line">        nci.custom = custom;</span><br><span class="line">        nci.viewModelStore = viewModelStore;</span><br><span class="line">        <span class="keyword">return</span> nci;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-ViewModelStore"><a href="#3-ViewModelStore" class="headerlink" title="3. ViewModelStore"></a>3. ViewModelStore</h5><p>ViewModelStore用来保存ViewModel实例。</p>
<p>ViewModelStore的实例在configuration发生变化时，必须继续保留(retained)；</p>
<p>如果一个ViewModelStore的owner由于configuration的 变化被重新创建时，新的owner实例应该继续持有同一个ViewModelStore实例。</p>
<p>如果一个ViewModelStore的owner被destroyed、并且不准备被重新创建，应该调用ViewModelStore的clear()方法通知该ViewModelStore。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class="line">            vm.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        mMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-ViewModel"><a href="#4-ViewModel" class="headerlink" title="4. ViewModel"></a>4. ViewModel</h5><p>ViewModel负责准备、管理android.app.Activity或androidx.fragment.app.Fragment的数据，用于UI展示。</p>
<p>当LifeCyclerOwner由于configuration的变化(屏幕旋转)被destroyed时，ViewModel不会被destroyed，新的owner实例获取的仍然是原有的ViewModel实例。</p>
<p>千万不要在ViewModel中访问View对象、或者持有Activity或者Fragment的引用。</p>
<h5 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h5><p>onSaveInstanceState方法是当Activity调用了onStop后，会调用到ActivityThread的callActivityOnSaveInstanceState()方法，把Activity需要保存的数据放入Bundle对象中，并且随后通过IPC进程间通信机制，调用ActivityManagerService的activityStopped方法，将Bundle对象保存到AMS端的ActivityRecord中。</p>
<p>作者：字节小站<br>链接：<a href="https://juejin.cn/post/6987566061499449357">https://juejin.cn/post/6987566061499449357</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<h4 id="二、Lifecycle部分"><a href="#二、Lifecycle部分" class="headerlink" title="二、Lifecycle部分"></a>二、Lifecycle部分</h4><h5 id="1-LifecycleOwner"><a href="#1-LifecycleOwner" class="headerlink" title="1. LifecycleOwner"></a>1. LifecycleOwner</h5><p>实现了androidx.lifecycle.LifecycleOwner接口的类：</p>
<ul>
<li><p>androidx.activity.ComponentActivity和androidx.core.app.ComponentActivity；</p>
</li>
<li><p>androidx.fragment.app.Fragment；</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A class that has an Android lifecycle. These events can be used by custom components to</span></span><br><span class="line"><span class="comment"> * handle lifecycle changes without implementing any code inside the Activity or the Fragment.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Lifecycle</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ViewTreeLifecycleOwner</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&#123;&quot;WeakerAccess&quot;, &quot;unused&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleOwner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">Lifecycle <span class="title">getLifecycle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-LifecycleObserver"><a href="#2-LifecycleObserver" class="headerlink" title="2. LifecycleObserver"></a>2. LifecycleObserver</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空方法的接口，依赖于OnLifecycleEvent注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-DefaultLifecycleObserver"><a href="#3-DefaultLifecycleObserver" class="headerlink" title="3. DefaultLifecycleObserver"></a>3. DefaultLifecycleObserver</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback interface for listening to &#123;<span class="doctag">@link</span> LifecycleOwner&#125; state changes.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * If you use Java 8 language, &lt;b&gt;always&lt;/b&gt; prefer it over annotations.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unused&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultLifecycleObserver</span> <span class="keyword">extends</span> <span class="title">FullLifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果某一个组件需要感知生命周期的话，则直接去继承 <code>LifecycleObserver</code> 接口。</p>
<p>如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CustomComponent希望感知生命周期</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomComponent</span> <span class="keyword">implements</span> <span class="title">DefaultLifecycleObserver</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在Activity或Fragment中添加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//现在CustomComponent可以感知MainActivity的生命周期了。</span></span><br><span class="line">        getLifecycle().addObserver(<span class="keyword">new</span> CustomComponent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-ReportFragment"><a href="#4-ReportFragment" class="headerlink" title="4. ReportFragment"></a>4. ReportFragment</h5><p>版本号：androidx.lifecycle:lifecycle-livedata:2.3.1</p>
<p>生命周期的观察，分为Android 9及以上、Android 9以下两种情况：</p>
<ol>
<li>Build.VERSION.SDK_INT &gt;= 29</li>
</ol>
<p>  通过activity.registerActivityLifecycleCallbacks来感知生命周期；</p>
<ol start="2">
<li>Build.VERSION.SDK_INT &lt; 29</li>
</ol>
<p>  通过给activity绑定一个Fragment（名字为ReportFragment），然后使用Fragment的回调方法来感知声明周期。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> androidx.lifecycle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.os.Build;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.RequiresApi;</span><br><span class="line"><span class="keyword">import</span> androidx.annotation.RestrictTo;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportFragment</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REPORT_FRAGMENT_TAG = <span class="string">&quot;androidx.lifecycle&quot;</span></span><br><span class="line">            + <span class="string">&quot;.LifecycleDispatcher.report_fragment_tag&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> ActivityInitializationListener mProcessListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">            LifecycleCallbacks.registerIn(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//获取ReportFragment</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ReportFragment <span class="title">get</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (ReportFragment) activity.getFragmentManager().findFragmentByTag(</span><br><span class="line">                REPORT_FRAGMENT_TAG);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        dispatchCreate(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        dispatchStart(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        dispatchResume(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPause();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_STOP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        <span class="comment">// just want to be sure that we won&#x27;t leak reference to an activity</span></span><br><span class="line">        mProcessListener = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setProcessListener</span><span class="params">(ActivityInitializationListener processListener)</span> </span>&#123;</span><br><span class="line">        mProcessListener = processListener;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">   <span class="class"><span class="keyword">interface</span> <span class="title">ActivityInitializationListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequiresApi(29)</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleCallbacks</span> <span class="keyword">implements</span> <span class="title">Application</span>.<span class="title">ActivityLifecycleCallbacks</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">            activity.registerActivityLifecycleCallbacks(<span class="keyword">new</span> LifecycleCallbacks());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="meta">@Nullable</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPostCreated</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_CREATE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStarted</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPostStarted</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_START);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResumed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPostResumed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_RESUME);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPrePaused</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_PAUSE);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPaused</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPreStopped</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_STOP);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityStopped</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivitySaveInstanceState</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span></span><br><span class="line"><span class="params"><span class="function">                <span class="meta">@NonNull</span> Bundle bundle)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityPreDestroyed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">            dispatch(activity, Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityDestroyed</span><span class="params">(<span class="meta">@NonNull</span> Activity activity)</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-LifecycleRegistry"><a href="#5-LifecycleRegistry" class="headerlink" title="5. LifecycleRegistry"></a>5. LifecycleRegistry</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">getCurrentState</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">        ON_CREATE,</span><br><span class="line">        ON_START,</span><br><span class="line">        ON_RESUME,</span><br><span class="line">        ON_PAUSE,</span><br><span class="line">        ON_STOP,</span><br><span class="line">        ON_DESTROY,</span><br><span class="line">        ON_ANY;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使得参数State降低一级时所需的Event。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Event <span class="title">downFrom</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> CREATED:</span><br><span class="line">                    <span class="keyword">return</span> ON_DESTROY;</span><br><span class="line">                <span class="keyword">case</span> STARTED:</span><br><span class="line">                    <span class="keyword">return</span> ON_STOP;</span><br><span class="line">                <span class="keyword">case</span> RESUMED:</span><br><span class="line">                    <span class="keyword">return</span> ON_PAUSE;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 降级成为参数的State时所需的Event</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Event <span class="title">downTo</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> DESTROYED:</span><br><span class="line">                    <span class="keyword">return</span> ON_DESTROY;</span><br><span class="line">                <span class="keyword">case</span> CREATED:</span><br><span class="line">                    <span class="keyword">return</span> ON_STOP;</span><br><span class="line">                <span class="keyword">case</span> STARTED:</span><br><span class="line">                    <span class="keyword">return</span> ON_PAUSE;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 从参数State升级为更高一级的State时所需的Event。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Event <span class="title">upFrom</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> INITIALIZED:</span><br><span class="line">                    <span class="keyword">return</span> ON_CREATE;</span><br><span class="line">                <span class="keyword">case</span> CREATED:</span><br><span class="line">                    <span class="keyword">return</span> ON_START;</span><br><span class="line">                <span class="keyword">case</span> STARTED:</span><br><span class="line">                    <span class="keyword">return</span> ON_RESUME;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 升级为参数的State时所需的Event。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Event <span class="title">upTo</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> CREATED:</span><br><span class="line">                    <span class="keyword">return</span> ON_CREATE;</span><br><span class="line">                <span class="keyword">case</span> STARTED:</span><br><span class="line">                    <span class="keyword">return</span> ON_START;</span><br><span class="line">                <span class="keyword">case</span> RESUMED:</span><br><span class="line">                    <span class="keyword">return</span> ON_RESUME;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回上报该Event后的新的State。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@NonNull</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> State <span class="title">getTargetState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">                <span class="keyword">case</span> ON_STOP:</span><br><span class="line">                    <span class="keyword">return</span> State.CREATED;</span><br><span class="line">                <span class="keyword">case</span> ON_START:</span><br><span class="line">                <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">                    <span class="keyword">return</span> State.STARTED;</span><br><span class="line">                <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">                    <span class="keyword">return</span> State.RESUMED;</span><br><span class="line">                <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">                    <span class="keyword">return</span> State.DESTROYED;</span><br><span class="line">                <span class="keyword">case</span> ON_ANY:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="keyword">this</span> + <span class="string">&quot; has no target state&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    DESTROYED,</span><br><span class="line">    INITIALIZED,</span><br><span class="line">    CREATED,</span><br><span class="line">    STARTED,</span><br><span class="line">    RESUMED;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//是否不低于参数所指的State。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAtLeast</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compareTo(state) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="三、LiveData部分"><a href="#三、LiveData部分" class="headerlink" title="三、LiveData部分"></a>三、LiveData部分</h4><ul>
<li><p>LiveData是一个可被观测的数据的持有类(data holder class)。源数据使用LiveData包装后，可以被observer观察；</p>
</li>
<li><p>LifecycleOwner用于表示一个类拥有Lifecycle，而Observer则可以通过注册一个listener去监听生命周期的变化。使用LiveData的observe(LifecycleOwner owner, Observer&lt;? super T&gt; observer)方法将一个Observer对象attach到该LiveData对象上；</p>
</li>
<li><p>Observers只感知处于活跃生命周期状态（STARTED、RESUMED）的LifecycleOwner（Activity/Fragment）的数据变化，如果LifecycleOwner进入DESTROYED状态的话，则observers会被自动移除。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LiveData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  	<span class="keyword">final</span> Object mDataLock = <span class="keyword">new</span> Object(); <span class="comment">//</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mVersion;</span><br><span class="line">  </span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">boolean</span> mDispatchingValue;</span><br><span class="line">  </span><br><span class="line">	  <span class="meta">@SuppressWarnings(&quot;FieldCanBeLocal&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mDispatchInvalidated;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Object mData;</span><br><span class="line">  </span><br><span class="line">  	<span class="keyword">private</span> SafeIterableMap&lt;Observer&lt;? <span class="keyword">super</span> T&gt;, ObserverWrapper&gt; mObservers =</span><br><span class="line">            <span class="keyword">new</span> SafeIterableMap&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sets the value. If there are active observers, the value will be dispatched to them.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * This method must be called from the main thread. If you need set a value from a background</span></span><br><span class="line"><span class="comment">     * thread, you can use &#123;<span class="doctag">@link</span> #postValue(Object)&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The new value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        assertMainThread(<span class="string">&quot;setValue&quot;</span>);</span><br><span class="line">        mVersion++;</span><br><span class="line">        mData = value;</span><br><span class="line">        dispatchingValue(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@SuppressWarnings(&quot;WeakerAccess&quot;)</span> <span class="comment">/* synthetic access */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">            mDispatchInvalidated = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mDispatchingValue = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            mDispatchInvalidated = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (initiator != <span class="keyword">null</span>) &#123;</span><br><span class="line">                considerNotify(initiator);</span><br><span class="line">                initiator = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="keyword">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                        mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                    considerNotify(iterator.next().getValue());</span><br><span class="line">                    <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">        mDispatchingValue = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  	<span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">considerNotify</span><span class="params">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!observer.mActive) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Check latest state b4 dispatch. Maybe it changed state but we didn&#x27;t get the event yet.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// we still first check observer.active to keep it as the entrance for events. So even if</span></span><br><span class="line">        <span class="comment">// the observer moved to an active state, if we&#x27;ve not received that event, we better not</span></span><br><span class="line">        <span class="comment">// notify for a more predictable notification order.</span></span><br><span class="line">        <span class="keyword">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class="line">            observer.activeStateChanged(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        observer.mLastVersion = mVersion;</span><br><span class="line">        observer.mObserver.onChanged((T) mData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-postValue连续执行多次会怎样？"><a href="#1-postValue连续执行多次会怎样？" class="headerlink" title="1. postValue连续执行多次会怎样？"></a>1. postValue连续执行多次会怎样？</h5><p>postValue会将任务post到主线程执行，如果连续多次调用改方法时，如果前面的Task还没开始执行、则后面的Task只是修改一下mPendingData就返回了，也就是说只会分发最新的值。</p>
<h5 id="2-postValue和setValue同时执行会怎样？"><a href="#2-postValue和setValue同时执行会怎样？" class="headerlink" title="2. postValue和setValue同时执行会怎样？"></a>2. postValue和setValue同时执行会怎样？</h5><p>如果在主线程连续调用postValue和setValue，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">liveData.postValue(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">liveData.setValue(<span class="string">&quot;b&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>那么Observer会首先观察到b，然后再更新到a。因为postValue底层是用Handler#post(Runnable)来执行的，会比立即执行要慢。</p>
<h4 id="四、onSaveInstanceState-VS-onRetainNonConfigurationInstance"><a href="#四、onSaveInstanceState-VS-onRetainNonConfigurationInstance" class="headerlink" title="四、onSaveInstanceState VS onRetainNonConfigurationInstance"></a>四、onSaveInstanceState VS onRetainNonConfigurationInstance</h4><ul>
<li>onSaveInstanceState方法是当Activity调用了onStop后，会调用到ActivityThread的callActivityOnSaveInstanceState()方法，把Activity需要保存的数据放入Bundle对象中，并且随后通过IPC进程间通信机制，调用ActivityManagerService的activityStopped方法，将Bundle对象保存到AMS端的ActivityRecord中。</li>
<li>onRetainNonConfigurationInstance方法返回的Object会赋值给ActivityClientRecord的lastNonConfigurationInstances。</li>
</ul>
<h5 id="1-区别"><a href="#1-区别" class="headerlink" title="1. 区别"></a>1. 区别</h5><ul>
<li><p>颗粒度不一样。onSaveInstanceState()是保存到Bundle中，只能保存Bundle能接受的数据类型，比如一些基本类型的数据。而</p>
<p>  onRetainNonConfigurationInstance() 可以保存任何类型的数据，数据类型是Object</p>
</li>
<li><p>onSaveInstanceState()数据最终存储到ActivityManagerService的ActivityRecord中了，也就是存到系统进程中去了。而onRetainNonConfigurationInstance() 数据是存储到ActivityClientRecord中，也就是存到应用本身的进程中了</p>
</li>
<li><p>onSaveInstanceState存到系统进程中，所以App被杀之后还是能恢复的。而onRetainNonConfigurationInstance存到本身进程中，</p>
<p>  App被杀是没法恢复的。</p>
</li>
</ul>
<h4 id="四、参考文献"><a href="#四、参考文献" class="headerlink" title="四、参考文献"></a>四、参考文献</h4><ol>
<li>ViewModel源码研究之聊聊onSaveInstanceState和onRetainNonConfigurationInstance的区别<br>（<a href="https://juejin.cn/post/6987566061499449357%EF%BC%89">https://juejin.cn/post/6987566061499449357）</a></li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>mvvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Looper类的设计</title>
    <url>/2021/05/01/android_looper/</url>
    <content><![CDATA[<h3 id="1-Looper类的设计"><a href="#1-Looper类的设计" class="headerlink" title="1. Looper类的设计"></a>1. Looper类的设计</h3><ol>
<li>没有事件发生时， 每隔30s pollOnce()会被wake函数唤醒一次，timeoutMillis = -1;</li>
<li>Looper主线程负责循环；</li>
<li>添加、删除fd的操作在system_server其他线程中完成；</li>
</ol>
<p>[/system/core/include/utils/Looper.h]</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param timeoutMillis 超时时间(ms), 在事件驱动循环中这个timoutMillis参数是动态计算的。</span></span><br><span class="line"><span class="comment"> *     timeoutMillis = 0，立即返回；</span></span><br><span class="line"><span class="comment"> *     timeoutMillis &lt; 0，无限等待直到有event到来；</span></span><br><span class="line"><span class="comment"> * @return 返回值有以下几种：</span></span><br><span class="line"><span class="comment"> *     POLL_WAKE(-1): 在timeoutMillis消耗完之前wake()被调用；</span></span><br><span class="line"><span class="comment"> *     POLL_CALLBACK(-2): 由一个或多个callback函数被调用；</span></span><br><span class="line"><span class="comment"> *     POLL_TIMEOUT(-3):在timeoutMillis消耗完之前没有数据到来；</span></span><br><span class="line"><span class="comment"> *     POLL_ERROR(-4): 出现错误。</span></span><br><span class="line"><span class="comment"> *     &gt;= 0: 有事件发生、且该事件的fd没有callback函数时，返回该fd携带的ident，即addFd()函数传入的indent; </span></span><br><span class="line"><span class="comment"> *           当且仅当此时，outFd、outEvents和outData参数包含与该fd相关的信息； </span></span><br><span class="line"><span class="comment"> *           除此之外，outFd和outEvents被赋值0, *out被赋值NULL(如果这些实参非NULL的话)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pollOnce</span><span class="params">(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief: 异步的唤醒poll;</span></span><br><span class="line"><span class="comment"> *         该函数可以在任一thread中被调用，而且立即返回。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wake</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief:</span></span><br><span class="line"><span class="comment"> * @param fd：要添加的fd;</span></span><br><span class="line"><span class="comment"> * @param ident: 该事件的标识(identifier),该值要么是POLL_CALLBACK，要么必须&gt;=0;</span></span><br><span class="line"><span class="comment"> * @param events: </span></span><br><span class="line"><span class="comment"> * @param callback: 当该fd上有事件发生时，要调用的函数；</span></span><br><span class="line"><span class="comment"> * @data: callback函数的参数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addFd</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> ident, <span class="keyword">int</span> events, <span class="keyword">const</span> sp&lt;LooperCallback&gt;&amp; callback, <span class="keyword">void</span>* data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 从Looper中移除以前添加过的fd，该函数可以在任一线程中调用。</span></span><br><span class="line"><span class="comment"> * @return 1: 该fd成功移除；</span></span><br><span class="line"><span class="comment"> *         0: 该fd未曾注册过。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">removeFd</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief: 入列一个Message，等待特定的handler来处理, 该函数可以在任一线程中调用。</span></span><br><span class="line"><span class="comment"> * @param handler: handler必须非空。</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">void sendMessage(const sp&lt;MessageHandler&gt;&amp; handler, const Message&amp; message);</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Looper类的成员变量"><a href="#2-Looper类的成员变量" class="headerlink" title="2. Looper类的成员变量"></a>2. Looper类的成员变量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">bool</span> mAllowNonCallbacks;<span class="comment">//表示是否允许空的CallBack出现, 不可改变。</span></span><br><span class="line"><span class="keyword">int</span> mWakeEventFd; <span class="comment">//在构造函数中赋值。</span></span><br><span class="line"></span><br><span class="line">Mutex mLock;</span><br><span class="line">KeyedVector&lt;<span class="keyword">int</span>, Request&gt; mRequests; <span class="comment">//由mLock保护</span></span><br><span class="line"><span class="keyword">int</span> mEpollFd; <span class="comment">//有mLock保护，但是只在looper线程中被修改.</span></span><br><span class="line"><span class="keyword">bool</span> mEpollRebuildRequired; <span class="comment">//由mLock保护.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mNextRequestSeq; <span class="comment">//下一个要请求添加的文件描述符序号。</span></span><br><span class="line"><span class="keyword">size_t</span> mResponseIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在pollOnce函数中被修改， 调用epoll_wait()前被置true， epoll_wait()返回后立即被置false，无需加锁。</span></span><br><span class="line"><span class="keyword">volatile</span> <span class="keyword">bool</span> mPolling; </span><br><span class="line">Vector&lt;Response&gt; mResponses; <span class="comment">//只在pollOnce()函数中被修改。</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Looper内部数据结构"><a href="#3-Looper内部数据结构" class="headerlink" title="3. Looper内部数据结构"></a>3. Looper内部数据结构</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Result from Looper_pollOnce() and Looper_pollAll():</span></span><br><span class="line"><span class="comment">     * The poll was awoken using wake() before the timeout expired</span></span><br><span class="line"><span class="comment">     * and no callbacks were executed and no other file descriptors were ready.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POLL_WAKE = <span class="number">-1</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Result from Looper_pollOnce() and Looper_pollAll():</span></span><br><span class="line"><span class="comment">     * One or more callbacks were executed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POLL_CALLBACK = <span class="number">-2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Result from Looper_pollOnce() and Looper_pollAll():</span></span><br><span class="line"><span class="comment">     * The timeout expired.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POLL_TIMEOUT = <span class="number">-3</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Result from Looper_pollOnce() and Looper_pollAll():</span></span><br><span class="line"><span class="comment">     * An error occurred.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POLL_ERROR = <span class="number">-4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    EVENT_INPUT = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">    EVENT_OUTPUT = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">    EVENT_ERROR = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">    EVENT_HANGUP = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">    EVENT_INVALID = <span class="number">1</span> &lt;&lt; <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperCallback</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> RefBase &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">LooperCallback</span>() &#123; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** handleEvent(返回0表示从Looper中解除该fd; 返回1表示继续接受监听。*/</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">handleEvent</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> events, <span class="keyword">void</span>* data)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Request</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> ident;</span><br><span class="line">    <span class="keyword">int</span> events; </span><br><span class="line">    <span class="keyword">int</span> seq;</span><br><span class="line">    sp&lt;LooperCallback&gt; callback;</span><br><span class="line">    <span class="keyword">void</span>* data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 使用Request的成员变量初始化epoll_event实例。*/</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initEventItem</span><span class="params">(struct epoll_event* eventItem)</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Response</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> events; <span class="comment">//值为EVENT_INPUT、EVENT_OUTPUT、EVENT_ERROR和EVENT_HANGUP中的0、1或多个。</span></span><br><span class="line">    Request request;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="4-Looper的实现"><a href="#4-Looper的实现" class="headerlink" title="4. Looper的实现"></a>4. Looper的实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[/system/core/libutils/Looper.cpp]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Looper的构造函数中做了以下事情：</span></span><br><span class="line"><span class="comment"> * 1. 创建事件通知的非阻塞文件描述符mWakeEventFd；</span></span><br><span class="line"><span class="comment"> * 2. 重新创建epoll文件描述符mEpollFd，添加mWakeEventFd、mRequest列表中已有fd集合到epoll监听队列中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Looper::<span class="built_in">Looper</span>(<span class="keyword">bool</span> allowNonCallbacks) :</span><br><span class="line">        <span class="built_in">mAllowNonCallbacks</span>(allowNonCallbacks), <span class="built_in">mSendingMessage</span>(<span class="literal">false</span>),</span><br><span class="line">        <span class="built_in">mPolling</span>(<span class="literal">false</span>), <span class="built_in">mEpollFd</span>(<span class="number">-1</span>), <span class="built_in">mEpollRebuildRequired</span>(<span class="literal">false</span>),</span><br><span class="line">        <span class="built_in">mNextRequestSeq</span>(<span class="number">0</span>), <span class="built_in">mResponseIndex</span>(<span class="number">0</span>), <span class="built_in">mNextMessageUptime</span>(LLONG_MAX) &#123;</span><br><span class="line">    mWakeEventFd = <span class="built_in">eventfd</span>(<span class="number">0</span>, EFD_NONBLOCK | EFD_CLOEXEC);</span><br><span class="line"></span><br><span class="line">    AutoMutex _l(mLock);</span><br><span class="line">    <span class="built_in">rebuildEpollLocked</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Looper::rebuildEpollLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mEpollFd &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">close</span>(mEpollFd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mEpollFd = <span class="built_in">epoll_create</span>(EPOLL_SIZE_HINT);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">    <span class="built_in">memset</span>(&amp;eventItem, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(epoll_event));</span><br><span class="line">    eventItem.events = EPOLLIN;</span><br><span class="line">    eventItem.data.fd = mWakeEventFd;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_ADD, mWakeEventFd, &amp; eventItem);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mRequests.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> Request&amp; request = mRequests.<span class="built_in">valueAt</span>(i);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">        request.<span class="built_in">initEventItem</span>(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_ADD, request.fd, &amp; eventItem);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief: 先调用epoll_ctrl()对fd作添加或修改操作, 然后构建请求信息(struct Request)，以fd为索引，添加到mRequests中。</span></span><br><span class="line"><span class="comment"> * @param fd：要添加的fd;</span></span><br><span class="line"><span class="comment"> * @param ident: 该事件的标识(identifier), 由pollOnce()函数返回得来；该值要么是POLL_CALLBACK，要么必须&gt;=0;</span></span><br><span class="line"><span class="comment"> * @param events: </span></span><br><span class="line"><span class="comment"> * @param callback: </span></span><br><span class="line"><span class="comment">     当该fd上有事件发生时，要调用的函数；</span></span><br><span class="line"><span class="comment"> *   callback为NULL时, mAllowNonCallbacks必须为true且ident必须&gt;0, 否则return -1；</span></span><br><span class="line"><span class="comment"> *   callback不为NULL时，实参ident值可忽略, 会被重新赋值为POLL_CALLACK。 </span></span><br><span class="line"><span class="comment"> * @data: callback函数的参数。</span></span><br><span class="line"><span class="comment"> * @return: 添加成功, 返回1；添加失败, 返回-1。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Looper::addFd</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> ident, <span class="keyword">int</span> events, <span class="keyword">const</span> sp&lt;LooperCallback&gt;&amp; callback, <span class="keyword">void</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!callback.<span class="built_in">get</span>()) &#123;</span><br><span class="line">        <span class="comment">//mAllowNonCallbacks为false表示不允许空的CallBack出现。</span></span><br><span class="line">        <span class="keyword">if</span> (! mAllowNonCallbacks) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ident &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//callback不为NULL.</span></span><br><span class="line">        ident = POLL_CALLBACK;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        AutoMutex _l(mLock);</span><br><span class="line"></span><br><span class="line">        Request request;</span><br><span class="line">        request.fd = fd;</span><br><span class="line">        request.ident = ident;</span><br><span class="line">        request.events = events;</span><br><span class="line">        request.seq = mNextRequestSeq++;</span><br><span class="line">        request.callback = callback;</span><br><span class="line">        request.data = data;</span><br><span class="line">        <span class="keyword">if</span> (mNextRequestSeq == <span class="number">-1</span>) mNextRequestSeq = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">        request.<span class="built_in">initEventItem</span>(&amp;eventItem);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">ssize_t</span> requestIndex = mRequests.<span class="built_in">indexOfKey</span>(fd);</span><br><span class="line">        <span class="keyword">if</span> (requestIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//mRequests中不存在fd.</span></span><br><span class="line">            <span class="keyword">int</span> epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_ADD, fd, &amp; eventItem);</span><br><span class="line">            <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mRequests.<span class="built_in">add</span>(fd, request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//mRequests中已经存在fd.</span></span><br><span class="line">            <span class="keyword">int</span> epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_MOD, fd, &amp; eventItem);</span><br><span class="line">            <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果是ENOENT错误，则尝试重新添加。</span></span><br><span class="line">                <span class="keyword">if</span> (errno == ENOENT) &#123;</span><br><span class="line">                    epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_ADD, fd, &amp; eventItem);</span><br><span class="line">                    <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">scheduleEpollRebuildLocked</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mRequests.<span class="built_in">replaceValueAt</span>(requestIndex, request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 从Map集合mRequests中移除文件描述符fd, 如果参数seq不等于-1, 则需要校验Request对象中的seq是否与实参seq一致。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Looper::removeFd</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">int</span> seq)</span> </span>&#123;</span><br><span class="line">    &#123; <span class="comment">// acquire lock</span></span><br><span class="line">        AutoMutex _l(mLock);</span><br><span class="line">        <span class="keyword">ssize_t</span> requestIndex = mRequests.<span class="built_in">indexOfKey</span>(fd);</span><br><span class="line">        <span class="keyword">if</span> (requestIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (seq != <span class="number">-1</span> &amp;&amp; mRequests.<span class="built_in">valueAt</span>(requestIndex).seq != seq) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mRequests.<span class="built_in">removeItemsAt</span>(requestIndex);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> epollResult = <span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_DEL, fd, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (epollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (seq != <span class="number">-1</span> &amp;&amp; (errno == EBADF || errno == ENOENT)) &#123;</span><br><span class="line">                <span class="built_in">scheduleEpollRebuildLocked</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">scheduleEpollRebuildLocked</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="comment">// release lock</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 将mEpollRebuildRequired设为true, 并且调用wake()函数，使得rebuildEpollLocked()函数能马上执行。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Looper::scheduleEpollRebuildLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mEpollRebuildRequired) &#123;</span><br><span class="line">        mEpollRebuildRequired = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">wake</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief 往mWakeEventFd中写入1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Looper::wake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint64_t</span> inc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> nWrite = <span class="built_in">TEMP_FAILURE_RETRY</span>(<span class="built_in">write</span>(mWakeEventFd, &amp;inc, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">uint64_t</span>)));</span><br><span class="line">    <span class="keyword">if</span> (nWrite != <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">uint64_t</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != EAGAIN) &#123;</span><br><span class="line">            <span class="built_in">ALOGW</span>(<span class="string">&quot;Could not write wake signal, errno=%d&quot;</span>, errno);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param timeoutMillis 超时时间(ms)</span></span><br><span class="line"><span class="comment"> *     timeoutMillis = 0，立即返回；</span></span><br><span class="line"><span class="comment"> *     timeoutMillis &lt; 0，无限等待直到有event到来；</span></span><br><span class="line"><span class="comment"> * @return 返回值有以下几种：</span></span><br><span class="line"><span class="comment"> *     POLL_WAKE(-1): 在timeoutMillis消耗完之前wake()被调用；</span></span><br><span class="line"><span class="comment"> *     POLL_CALLBACK(-2): 由一个或多个callback函数被调用；</span></span><br><span class="line"><span class="comment"> *     POLL_TIMEOUT(-3):在timeoutMillis消耗完之前没有数据到来；</span></span><br><span class="line"><span class="comment"> *     POLL_ERROR(-4): 出现错误。</span></span><br><span class="line"><span class="comment"> *     &gt;= 0: 有事件发生、且该事件的fd没有callback函数时，返回该fd携带的ident，即addFd()函数传入的indent; </span></span><br><span class="line"><span class="comment"> *           当且仅当此时，outFd、outEvents和outData参数包含与该fd相关的信息； </span></span><br><span class="line"><span class="comment"> *           除此之外，outFd和outEvents被赋值0, *out被赋值NULL(如果这些实参非NULL的话)。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Looper::pollOnce</span><span class="params">(<span class="keyword">int</span> timeoutMillis, <span class="keyword">int</span>* outFd, <span class="keyword">int</span>* outEvents, <span class="keyword">void</span>** outData)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//首先遍历[mResponseIndex, mResponse.size()), 找出ident&gt;=0的项，直接返回该indent。 同时，</span></span><br><span class="line">        <span class="comment">//mResponseIndex指向下一个要处理的项。</span></span><br><span class="line">        <span class="keyword">while</span> (mResponseIndex &lt; mResponses.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">const</span> Response&amp; response = mResponses.<span class="built_in">itemAt</span>(mResponseIndex++);</span><br><span class="line">            <span class="keyword">int</span> ident = response.request.ident;</span><br><span class="line">            <span class="comment">//ident&gt;=0，表示调用者提供的callback函数为NULL， 返回信息给调用者，由其自己处理。</span></span><br><span class="line">            <span class="keyword">if</span> (ident &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> fd = response.request.fd;</span><br><span class="line">                <span class="keyword">int</span> events = response.events;</span><br><span class="line">                <span class="keyword">void</span>* data = response.request.data;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (outFd != <span class="literal">NULL</span>) *outFd = fd;</span><br><span class="line">                <span class="keyword">if</span> (outEvents != <span class="literal">NULL</span>) *outEvents = events;</span><br><span class="line">                <span class="keyword">if</span> (outData != <span class="literal">NULL</span>) *outData = data;</span><br><span class="line">                <span class="keyword">return</span> ident;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (outFd != <span class="literal">NULL</span>) *outFd = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (outEvents != <span class="literal">NULL</span>) *outEvents = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (outData != <span class="literal">NULL</span>) *outData = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//pollInner()函数会重置并填充mResponses，重置mResponseIndex为0。</span></span><br><span class="line">        result = <span class="built_in">pollInner</span>(timeoutMillis);</span><br><span class="line">    &#125; <span class="comment">//for(;;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief: </span></span><br><span class="line"><span class="comment"> *     1. 重新计算超时时间；</span></span><br><span class="line"><span class="comment"> *     2. 清空mResponse(Vector&lt;Response&gt;类型)，重置mResponseIndex为0，result为POLL_WAKE，mPolling为true；</span></span><br><span class="line"><span class="comment"> *     3. 等待epoll_ctr()函数返回， 返回后置mPolling为false, 然后加锁处理以下内容：</span></span><br><span class="line"><span class="comment"> *         返回值 &lt; 0： 置result为POLL_ERROR；</span></span><br><span class="line"><span class="comment"> *         返回值 = 0： 置result为POLL_TIMEOUT;</span></span><br><span class="line"><span class="comment"> *         返回值 &gt; 0： 表示发生事件的数量, 依次将所有事件fd、及对应类型插入到mResponses(Vector&lt;Response&gt;类型)中。</span></span><br><span class="line"><span class="comment"> *         將锁释放；</span></span><br><span class="line"><span class="comment"> *     4. 依次处理mResponses中的所有事件，如果有POLL_CALLBACK的事件，则置result为POLL_CALLBACK；</span></span><br><span class="line"><span class="comment"> *     5. 返回result。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment">int Looper::pollInner(int timeoutMillis) &#123;</span></span><br><span class="line"><span class="comment">    /**</span></span><br><span class="line"><span class="comment">     * 重新计算超时时间：</span></span><br><span class="line"><span class="comment">      1. 如果mNextMessageUptime已被赋值, 则计算mNextMessageUptime与当前时间的差值(换算成ms), 记为messageTimeoutMillis。</span></span><br><span class="line"><span class="comment">            若messageTimeoutMillis &lt; 0, 则超时超时时间为timeOutMills；</span></span><br><span class="line"><span class="comment">            若messageTimeoutMillis &gt;= 0, 且messageTimeoutMillis &lt; timeoutMillis, 则超时时间调整为messageTimeoutMillis。</span></span><br><span class="line"><span class="comment">      2. 如果mNextMessageUptime为LLONG_MAX, 则超时时间为timeoutMills。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (timeoutMillis != <span class="number">0</span> &amp;&amp; mNextMessageUptime != LLONG_MAX) &#123;</span><br><span class="line">        <span class="keyword">nsecs_t</span> now = <span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">        <span class="keyword">int</span> messageTimeoutMillis = <span class="built_in">toMillisecondTimeoutDelay</span>(now, mNextMessageUptime);</span><br><span class="line">        <span class="keyword">if</span> (messageTimeoutMillis &gt;= <span class="number">0</span></span><br><span class="line">                &amp;&amp; (timeoutMillis &lt; <span class="number">0</span> || messageTimeoutMillis &lt; timeoutMillis)) &#123;</span><br><span class="line">            timeoutMillis = messageTimeoutMillis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = POLL_WAKE;</span><br><span class="line">    mResponses.<span class="built_in">clear</span>();</span><br><span class="line">    mResponseIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    mPolling = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItems</span>[<span class="title">EPOLL_MAX_EVENTS</span>];</span></span><br><span class="line">    <span class="keyword">int</span> eventCount = <span class="built_in">epoll_wait</span>(mEpollFd, eventItems, EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line"></span><br><span class="line">    mPolling = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Acquire lock.</span></span><br><span class="line">    mLock.<span class="built_in">lock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mEpollRebuildRequired) &#123;</span><br><span class="line">        mEpollRebuildRequired = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">rebuildEpollLocked</span>();</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//epoll出错。</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno == EINTR) &#123;</span><br><span class="line">            <span class="keyword">goto</span> Done;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;Poll failed with an unexpected error, errno=%d&quot;</span>, errno);</span><br><span class="line">        result = POLL_ERROR;</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//epoll超时</span></span><br><span class="line">    <span class="keyword">if</span> (eventCount == <span class="number">0</span>) &#123;</span><br><span class="line">        result = POLL_TIMEOUT;</span><br><span class="line">        <span class="keyword">goto</span> Done;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将epoll_ctrl()函数返回值中读取发生的事件信息，依次将所有的事件fd、及对应事件类型插入到mResponses向量表中。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eventCount; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fd = eventItems[i].data.fd;</span><br><span class="line">        <span class="keyword">uint32_t</span> epollEvents = eventItems[i].events;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fd == mWakeEventFd) &#123;</span><br><span class="line">            <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) &#123;</span><br><span class="line">                <span class="built_in">awoken</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">ALOGW</span>(<span class="string">&quot;Ignoring unexpected epoll events 0x%x on wake event fd.&quot;</span>, epollEvents);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果fd已经从mRequests中移除, 则不再处理该fd的事件。</span></span><br><span class="line">            <span class="keyword">ssize_t</span> requestIndex = mRequests.<span class="built_in">indexOfKey</span>(fd);</span><br><span class="line">            <span class="keyword">if</span> (requestIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//构建新的Response实例, 添加到mResponses中，Response实例由events和Request两部分组成。</span></span><br><span class="line">                <span class="keyword">int</span> events = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLIN) events |= EVENT_INPUT;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLOUT) events |= EVENT_OUTPUT;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLERR) events |= EVENT_ERROR;</span><br><span class="line">                <span class="keyword">if</span> (epollEvents &amp; EPOLLHUP) events |= EVENT_HANGUP;</span><br><span class="line">                <span class="built_in">pushResponse</span>(events, mRequests.<span class="built_in">valueAt</span>(requestIndex));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">ALOGW</span>(<span class="string">&quot;Ignoring unexpected epoll events 0x%x on fd %d that is &quot;</span></span><br><span class="line">                        <span class="string">&quot;no longer registered.&quot;</span>, epollEvents, fd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//if</span></span><br><span class="line">    &#125;<span class="comment">//for</span></span><br><span class="line"></span><br><span class="line">Done: ;       </span><br><span class="line">    mNextMessageUptime = LLONG_MAX;</span><br><span class="line">    <span class="keyword">while</span> (mMessageEnvelopes.<span class="built_in">size</span>() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">nsecs_t</span> now = <span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">        <span class="keyword">const</span> MessageEnvelope&amp; messageEnvelope = mMessageEnvelopes.<span class="built_in">itemAt</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (messageEnvelope.uptime &lt;= now) &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                sp&lt;MessageHandler&gt; handler = messageEnvelope.handler;</span><br><span class="line">                Message message = messageEnvelope.message;</span><br><span class="line">                mMessageEnvelopes.<span class="built_in">removeAt</span>(<span class="number">0</span>);</span><br><span class="line">                mSendingMessage = <span class="literal">true</span>;</span><br><span class="line">                mLock.<span class="built_in">unlock</span>();</span><br><span class="line">                handler-&gt;<span class="built_in">handleMessage</span>(message);</span><br><span class="line">            &#125; <span class="comment">// release handler</span></span><br><span class="line"></span><br><span class="line">            mLock.<span class="built_in">lock</span>();</span><br><span class="line">            mSendingMessage = <span class="literal">false</span>;</span><br><span class="line">            result = POLL_CALLBACK;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mNextMessageUptime = messageEnvelope.uptime;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//while</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Release lock.</span></span><br><span class="line">    mLock.<span class="built_in">unlock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理mResponse中的所有事件。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; mResponses.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        Response&amp; response = mResponses.<span class="built_in">editItemAt</span>(i);</span><br><span class="line">        <span class="comment">//如果ident不是POLL_BACK时，不做任何处理。</span></span><br><span class="line">        <span class="keyword">if</span> (response.request.ident == POLL_CALLBACK) &#123;</span><br><span class="line">            <span class="keyword">int</span> fd = response.request.fd;</span><br><span class="line">            <span class="keyword">int</span> events = response.events;</span><br><span class="line">            <span class="keyword">void</span>* data = response.request.data;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> callbackResult = response.request.callback-&gt;<span class="built_in">handleEvent</span>(fd, events, data);</span><br><span class="line">            <span class="comment">//如果handleEvent()函数返回0, 则从mRequests中移除fd。</span></span><br><span class="line">            <span class="keyword">if</span> (callbackResult == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">removeFd</span>(fd, response.request.seq);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response.request.callback.<span class="built_in">clear</span>();</span><br><span class="line">            result = POLL_CALLBACK;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解Kotlin协程</title>
    <url>/2021/12/11/undestanding_kotlin/</url>
    <content><![CDATA[<h4 id="1-suspend关键字"><a href="#1-suspend关键字" class="headerlink" title="1. suspend关键字"></a>1. suspend关键字</h4><p>suspend关键字用在function前面，表示一个function在执行期间可以被paused或resumed。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">sample</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：一个suspend函数只能在coroutine或者另一个suspend函数中被调用。</p>
<h4 id="2-Coroutine的生命周期"><a href="#2-Coroutine的生命周期" class="headerlink" title="2. Coroutine的生命周期"></a>2. Coroutine的生命周期</h4><p><img src="https://xifengcoder.github.io/images/coroutine_state.JPG" alt="Coroutine的状态"></p>
<h4 id="3-CoroutineContext"><a href="#3-CoroutineContext" class="headerlink" title="3. CoroutineContext"></a>3. CoroutineContext</h4><p>CoroutineContext是CoroutineScope的上下文（context）。CoroutineContext是封裝在CoroutineScope中的一个属性，在实现CoroutineBuilders时会用到，CoroutineBuilders是定义在CoroutineScope上的扩展。通常情况下，不推荐直接使用coroutineContext，除了访问Job实例进行一些高级用法之外。</p>
<p>一个CoroutineContext通过使用如下的四种元素来定义coroutine的行为：</p>
<ul>
<li>Job：控制coroutine的生命周期；</li>
<li>CoroutineDispatcher：将任务分发到相应的线程上，默认值为Dispatchers.Default；</li>
<li>CoroutineName：coroutine的名称，调试时很有用，默认值为”coroutine”；</li>
<li>CoroutineExceptionHandler：处理未捕获的异常 ，默认值为None。</li>
</ul>
<p>每个元素的默认值如下：</p>
<p><img src="https://xifengcoder.github.io/images/coroutine_context.JPG" alt="CoroutineContext的元素"></p>
<h5 id="3-1-Job"><a href="#3-1-Job" class="headerlink" title="3.1 Job"></a>3.1 Job</h5><p>Job是coroutine的句柄（handle），每一个使用launch或者async创建的coroutine会返回一个Job实例，用来唯一标识该coroutine、并且管理其生命周期。</p>
<h5 id="3-2-Dispatchers"><a href="#3-2-Dispatchers" class="headerlink" title="3.2 Dispatchers"></a>3.2 Dispatchers</h5><p>用于指定操作是在哪个线程上执行。Android系统有是三个Dispatchers。</p>
<ul>
<li>Dispatchers.Main</li>
<li>Dispatchers.Default</li>
<li>Dispatchers.IO</li>
</ul>
<p>通过使用withContext来在不同的Dispatchers中切换。</p>
<p>CoroutineContext的获取：</p>
<p><img src="https://xifengcoder.github.io/images/coroutine_context_default.JPG" alt="CoroutineContext获取"></p>
<h5 id="3-3-CoroutineExceptionHandler"><a href="#3-3-CoroutineExceptionHandler" class="headerlink" title="3.3 CoroutineExceptionHandler"></a>3.3 CoroutineExceptionHandler</h5><p><img src="https://xifengcoder.github.io/images/coroutine_exception_handler.JPG" alt="Coroutine Exception Handler"></p>
<h6 id="3-3-1-在构建CoroutineScope时，传入handler可以捕捉到异常"><a href="#3-3-1-在构建CoroutineScope时，传入handler可以捕捉到异常" class="headerlink" title="3.3.1 在构建CoroutineScope时，传入handler可以捕捉到异常"></a>3.3.1 在构建CoroutineScope时，传入handler可以捕捉到异常</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class="line">    println(<span class="string">&quot;Caught <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(Job() + handler)</span><br><span class="line"><span class="keyword">val</span> job = scope.launch(handler) &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&quot;Failed coroutine&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">job.join()</span><br></pre></td></tr></table></figure>

<h6 id="3-3-2-在scope的launch函数中安装handler，可以捕捉到异常"><a href="#3-3-2-在scope的launch函数中安装handler，可以捕捉到异常" class="headerlink" title="3.3.2 在scope的launch函数中安装handler，可以捕捉到异常"></a>3.3.2 在scope的launch函数中安装handler，可以捕捉到异常</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class="line">    println(<span class="string">&quot;Caught <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(Job())</span><br><span class="line"><span class="keyword">val</span> job = scope.launch(handler) &#123;</span><br><span class="line">    launch &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&quot;Failed coroutine&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">job.join()</span><br></pre></td></tr></table></figure>

<h6 id="3-3-3-handler被安装到内部协程时，无法捕获到异常"><a href="#3-3-3-handler被安装到内部协程时，无法捕获到异常" class="headerlink" title="3.3.3 handler被安装到内部协程时，无法捕获到异常"></a>3.3.3 handler被安装到内部协程时，无法捕获到异常</h6><p> 异常不会被捕获的原因是因为 handler 没有被安装给正确的 CoroutineContext。内部协程会在异常出现时传播异常并传递给它的父级，由于父级并不知道 handler 的存在，异常就没有被捕获。 </p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class="line">    println(<span class="string">&quot;Caught <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(Job())</span><br><span class="line"><span class="keyword">val</span> job = scope.launch &#123;</span><br><span class="line">    <span class="comment">//WARN: handler被安装到内部协程时，无法捕获异常</span></span><br><span class="line">    launch(handler) &#123;</span><br><span class="line">        <span class="keyword">throw</span> Exception(<span class="string">&quot;Failed coroutine&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">job.join()</span><br></pre></td></tr></table></figure>

<h5 id="coroutineScope-vs-supervisorScope"><a href="#coroutineScope-vs-supervisorScope" class="headerlink" title="coroutineScope vs supervisorScope"></a>coroutineScope vs supervisorScope</h5><p>（1）使用coroutineScope</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        <span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class="line">            println(<span class="string">&quot;Caught <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> scope = coroutineScope &#123;</span><br><span class="line">            launch(handler) &#123;</span><br><span class="line">                <span class="keyword">throw</span> Exception(<span class="string">&quot;Failed coroutine&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scope.join();</span><br><span class="line">        println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.Exception: Failed coroutine</span><br><span class="line">	at com.yxf.kotlin.coroutines.exception_handling.CoroutineExceptionHandlerKt$main$<span class="number">1</span>$scope$<span class="number">1</span>$<span class="number">1.</span>invokeSuspend(CoroutineExceptionHandler.kt:<span class="number">15</span>)</span><br><span class="line">	at kotlin.coroutines.jvm.<span class="keyword">internal</span>.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:<span class="number">33</span>)</span><br><span class="line">	at kotlinx.coroutines.DispatchedTask.run(Dispatched.kt:<span class="number">233</span>)</span><br><span class="line">	at kotlinx.coroutines.EventLoopImplBase.processNextEvent(EventLoop.kt:<span class="number">116</span>)</span><br><span class="line">	at kotlinx.coroutines.BlockingCoroutine.joinBlocking(Builders.kt:<span class="number">76</span>)</span><br><span class="line">	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking(Builders.kt:<span class="number">53</span>)</span><br><span class="line">	at kotlinx.coroutines.BuildersKt.runBlocking(Unknown Source)</span><br><span class="line">	at kotlinx.coroutines.BuildersKt__BuildersKt.runBlocking$default(Builders.kt:<span class="number">35</span>)</span><br><span class="line">	at kotlinx.coroutines.BuildersKt.runBlocking$default(Unknown Source)</span><br><span class="line">	at com.yxf.kotlin.coroutines.exception_handling.CoroutineExceptionHandlerKt.main(CoroutineExceptionHandler.kt:<span class="number">8</span>)</span><br><span class="line">	at com.yxf.kotlin.coroutines.exception_handling.CoroutineExceptionHandlerKt.main(CoroutineExceptionHandler.kt)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>（2）使用supervisorScope</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        <span class="keyword">val</span> handler = CoroutineExceptionHandler &#123; _, exception -&gt;</span><br><span class="line">            println(<span class="string">&quot;Caught <span class="variable">$exception</span>&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> scope = supervisorScope &#123;</span><br><span class="line">            launch(handler) &#123;</span><br><span class="line">                <span class="keyword">throw</span> Exception(<span class="string">&quot;Failed coroutine&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scope.join();</span><br><span class="line">        println(<span class="string">&quot;Done!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line">Caught java.lang.Exception: Failed coroutine</span><br><span class="line">Done!</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h4 id="4-CoroutineScope"><a href="#4-CoroutineScope" class="headerlink" title="4. CoroutineScope"></a>4. CoroutineScope</h4><p>CoroutineScope会追踪每一个您通过launch或async创建的协程，任何时候都可以通过scope.cancel()来取消正在运行的协程。</p>
<ul>
<li>管理Coroutines的生命周期</li>
</ul>
<p>​    一个CoroutineScope定义了在其上启动的Coroutines的生命周期。CoroutineScope在一旦创建后就会启动，在它被取消时、或者它关联的Job或 SupervisorJob完成时结束。</p>
<ul>
<li>CoroutineScope的创建</li>
</ul>
<p>如果传入的context参数不包含Job元素，则会使用默认的Job( )，否则会使用传入的Job对象。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Suppress(<span class="meta-string">&quot;FunctionName&quot;</span>)</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="title">CoroutineScope</span><span class="params">(context: <span class="type">CoroutineContext</span>)</span></span>: CoroutineScope =</span><br><span class="line">    ContextScope(<span class="keyword">if</span> (context[Job] != <span class="literal">null</span>) context <span class="keyword">else</span> context + Job())</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scope1 = CoroutineScope(Dispatchers.Main + SupervisorJob())</span><br><span class="line"><span class="keyword">val</span> scope2 = MainScope();</span><br></pre></td></tr></table></figure>
<p>另外一种用法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomethingWithALifecycle</span> : <span class="type">CoroutineScope &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext = Dispatchers.IO + SupervisorJob()</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomethingWithALifecycle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> scope = CoroutineScope(Dispatchers.IO + SupervisorJob())</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">destroy</span><span class="params">()</span></span> &#123;</span><br><span class="line">        scope.cancel()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>GlobalScope: 没有绑定任何Job的Scope。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">object</span> GlobalScope : CoroutineScope &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns [EmptyCoroutineContext].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineContext</span><br><span class="line">        <span class="keyword">get</span>() = EmptyCoroutineContext</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="5-协程的启动"><a href="#5-协程的启动" class="headerlink" title="5. 协程的启动"></a>5. 协程的启动</h4><p>启动一个新的协程, 常用的主要有以下几种方式，它们被称为<code>coroutine builders</code>。</p>
<h5 id="5-1-launch"><a href="#5-1-launch" class="headerlink" title="5.1 launch"></a>5.1 launch</h5><p>launch为定义在CoroutineScope上的扩展函数，接受一个CoroutineContext参数（默认为EmptyCoroutineContext）、一个CoroutineStart参数（默认为CoroutineStart.DEFAULT），以及一个定义在CoroutineScope上的suspend函数，类型为suspend CoroutineScope.() -&gt; Unit，返回类型为Job。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> CoroutineScope.<span class="title">launch</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">Unit</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Job &#123;</span><br><span class="line">    <span class="keyword">val</span> newContext = newCoroutineContext(context)</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span> (start.isLazy)</span><br><span class="line">        LazyStandaloneCoroutine(newContext, block) <span class="keyword">else</span></span><br><span class="line">        StandaloneCoroutine(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    coroutine.start(start, coroutine, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-async"><a href="#5-2-async" class="headerlink" title="5.2 async"></a>5.2 async</h5><p>async为定义在CoroutineScope上的扩展函数，接受一个CoroutineContext参数（默认为EmptyCoroutineContext）、一个CoroutineStart参数（默认为CoroutineStart.DEFAULT），以及一个定义在CoroutineScope上的suspend函数，类型为suspend CoroutineScope.() -&gt; Unit，返回类型为Deferred<T>。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> CoroutineScope.<span class="title">async</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    context: <span class="type">CoroutineContext</span> = EmptyCoroutineContext,</span></span></span><br><span class="line"><span class="params"><span class="function">    start: <span class="type">CoroutineStart</span> = CoroutineStart.DEFAULT,</span></span></span><br><span class="line"><span class="params"><span class="function">    block: <span class="type">suspend</span> <span class="type">CoroutineScope</span>.() -&gt; <span class="type">T</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>: Deferred&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> newContext = newCoroutineContext(context)</span><br><span class="line">    <span class="keyword">val</span> coroutine = <span class="keyword">if</span> (start.isLazy)</span><br><span class="line">        LazyDeferredCoroutine(newContext, block) <span class="keyword">else</span></span><br><span class="line">        DeferredCoroutine&lt;T&gt;(newContext, active = <span class="literal">true</span>)</span><br><span class="line">    coroutine.start(start, coroutine, block)</span><br><span class="line">    <span class="keyword">return</span> coroutine</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-3-runBlocking"><a href="#5-3-runBlocking" class="headerlink" title="5.3 runBlocking"></a>5.3 runBlocking</h5><p>runBlocking用来连接non-coroutine世界的代码和协程代码的桥梁。<br>runBlocking可以建立一个阻塞当前线程的协程. 所以它主要被用来在main函数中或者测试中使用, 作为连接函数。</p>
<h5 id="5-4-coroutineScope"><a href="#5-4-coroutineScope" class="headerlink" title="5.4 coroutineScope"></a>5.4 coroutineScope</h5><h5 id="5-5-supervisorScope"><a href="#5-5-supervisorScope" class="headerlink" title="5.5 supervisorScope"></a>5.5 supervisorScope</h5><h4 id="6-上下文切换withContext"><a href="#6-上下文切换withContext" class="headerlink" title="6. 上下文切换withContext"></a>6. 上下文切换withContext</h4><p>withContext是一个suspend函数，它会等待代码块中所有的corotines都完成以后再结束。如果其中任一coroutine失败，则整个代码块会抛出异常、并会自动取消代码块中其他的coroutines。但是withContext外的coroutines不受影响。</p>
<h4 id="7-Kotlin协程中的异常处理"><a href="#7-Kotlin协程中的异常处理" class="headerlink" title="7. Kotlin协程中的异常处理"></a>7. Kotlin协程中的异常处理</h4><h5 id="7-1-launch或async对异常的默认处理"><a href="#7-1-launch或async对异常的默认处理" class="headerlink" title="7.1 launch或async对异常的默认处理"></a>7.1 launch或async对异常的默认处理</h5><p>Coroutine Builders处理异常一般分两种情况：</p>
<ol>
<li>自动传播异常（通过launch启动时）；</li>
<li>将异常抛给用户（通过async启动时）：依赖用户去捕获该异常，否则程序会崩溃；</li>
</ol>
<p>举例：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.kotlin.coroutines.exception_handling</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.GlobalScope</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.async</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> logger: Logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> = runBlocking &#123;</span><br><span class="line">    <span class="keyword">val</span> asyncJob = GlobalScope.launch &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;1. Exception created via launch coroutine&quot;</span>)</span><br><span class="line">        <span class="comment">//异常信息由Thread.defaultUncaughtExceptionHandler打印在控制台</span></span><br><span class="line">        <span class="keyword">throw</span> IndexOutOfBoundsException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    asyncJob.join()</span><br><span class="line">    logger.info(<span class="string">&quot;2. Joined failed job&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> deferred = GlobalScope.async &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Exception created via async coroutine&quot;</span>)</span><br><span class="line">        <span class="comment">//不会有异常信息打印，依赖用户调用await()</span></span><br><span class="line">        <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        deferred.await()</span><br><span class="line">        logger.info(<span class="string">&quot;4. Unreachable, this statement is never executed&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        <span class="comment">//捕捉async()抛出的异常</span></span><br><span class="line">        logger.error(<span class="string">&quot;5. Caught <span class="subst">$&#123;e.javaClass.simpleName&#125;</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">57.760</span>[DefaultDispatcher-worker-<span class="number">2</span>] INFO Main.kt[<span class="number">14</span>]: <span class="number">1.</span> Exception created via launch coroutine</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;DefaultDispatcher-worker-2&quot;</span> java.lang.IndexOutOfBoundsException</span><br><span class="line">	at com.yxf.kotlin.coroutines.exception_handling.MainKt$main$<span class="number">1</span>$asyncJob$<span class="number">1.</span>invokeSuspend(Main.kt:<span class="number">17</span>)</span><br><span class="line">	at kotlin.coroutines.jvm.<span class="keyword">internal</span>.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:<span class="number">33</span>)</span><br><span class="line">	at kotlinx.coroutines.DispatchedTask.run(Dispatched.kt:<span class="number">233</span>)</span><br><span class="line">	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:<span class="number">594</span>)</span><br><span class="line">	at kotlinx.coroutines.scheduling.CoroutineScheduler.access$runSafely(CoroutineScheduler.kt:<span class="number">60</span>)</span><br><span class="line">	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:<span class="number">742</span>)</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">57.826</span>[main] INFO Main.kt[<span class="number">21</span>]: <span class="number">2.</span> Joined failed job</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">57.835</span>[DefaultDispatcher-worker-<span class="number">2</span>] INFO Main.kt[<span class="number">24</span>]: Exception created via async coroutine</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">20</span>:<span class="number">40</span>:<span class="number">57.840</span>[main] ERROR Main.kt[<span class="number">33</span>]: <span class="number">5.</span> Caught ArithmeticException</span><br></pre></td></tr></table></figure>

<h5 id="7-2-某个协程突然运行失败怎么办-—Job-VS-SupervisorJob"><a href="#7-2-某个协程突然运行失败怎么办-—Job-VS-SupervisorJob" class="headerlink" title="7.2 某个协程突然运行失败怎么办? —Job VS SupervisorJob"></a>7.2 某个协程突然运行失败怎么办? —Job VS SupervisorJob</h5><p>​    当某一个协程由于异常而运行失败时，默认情况下它会传播这个异常并传递给它父级。接下来，父级会进行下面的操作：</p>
<p>取消它自己的Child；</p>
<p>取消它自己；</p>
<p>将异常传播并传递给它的父级；</p>
<p><img src="https://xifengcoder.github.io/images/coroutine_exception.gif" alt="Coroutine的状态"></p>
<p>​    如果想要在某一个协程出现错误时，不会退出父级和影响其他的兄弟协程，就需要使用 SupervisorJob 或 supervisorScope 。具体实现有三种：</p>
<p>(1) 在构造CoroutineScope时，使用SuperVisorJob()；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用SupervisorJob()可以在jobs1异常中止时，不影响job2的正常运行。</span></span><br><span class="line"><span class="keyword">val</span> scope = CoroutineScope(SupervisorJob())</span><br><span class="line">        </span><br><span class="line"><span class="keyword">val</span> job1 = scope.launch &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Launching child1&quot;</span>)</span><br><span class="line">    delay(<span class="number">500L</span>)</span><br><span class="line">    <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> job2 = scope.launch &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Launching child2&quot;</span>)</span><br><span class="line">    delay(<span class="number">5000L</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;Child2 completed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Waiting for jobs finish...&quot;</span>)</span><br><span class="line">job1.join()</span><br><span class="line">job2.join()</span><br><span class="line">logger.info(<span class="string">&quot;Jobs Done...&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>(2) 将SupervisorJob安装在launch函数上；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> scope = CoroutineScope(Job())</span><br><span class="line"><span class="keyword">val</span> supervisorJob = SupervisorJob()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将SupervisorJob安装在launch函数上；</span></span><br><span class="line"><span class="keyword">val</span> job1 = scope.launch(supervisorJob) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Launching child1&quot;</span>)</span><br><span class="line">    delay(<span class="number">500L</span>)</span><br><span class="line">    <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> job2 = scope.launch(supervisorJob) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Launching child2&quot;</span>)</span><br><span class="line">    delay(<span class="number">5000L</span>)</span><br><span class="line">    logger.info(<span class="string">&quot;Child2 completed&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">&quot;Waiting for jobs finish...&quot;</span>)</span><br><span class="line">job1.join()</span><br><span class="line">job2.join()</span><br><span class="line">logger.info(<span class="string">&quot;Jobs Done...&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>(3) 使用coroutineScope</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">runBlocking &#123;</span><br><span class="line">    <span class="comment">//使用coroutineScope时，Child 1的异常不影响Child 2的正常执行完成。</span></span><br><span class="line">    coroutineScope &#123;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="comment">// Child 1</span></span><br><span class="line">            logger.info(<span class="string">&quot;Launching child1&quot;</span>)</span><br><span class="line">            delay(<span class="number">500L</span>)</span><br><span class="line">            <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">        &#125;</span><br><span class="line">        launch &#123;</span><br><span class="line">            <span class="comment">// Child 2</span></span><br><span class="line">            logger.info(<span class="string">&quot;Launching child2&quot;</span>)</span><br><span class="line">            delay(<span class="number">5000L</span>)</span><br><span class="line">            logger.info(<span class="string">&quot;Child2 completed&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger.info(<span class="string">&quot;Jobs Done...&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="7-3-多个子任务同时抛出异常的处理"><a href="#7-3-多个子任务同时抛出异常的处理" class="headerlink" title="7.3 多个子任务同时抛出异常的处理"></a>7.3 多个子任务同时抛出异常的处理</h5><p>​    如果多个子任务都会抛出异常时，CoroutineExceptionHandler只会捕捉到最先抛出的异常，后面的异常会被屏蔽掉，通过Throwable的getSuppressed()方法可以查看被屏蔽的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yxf.kotlin.coroutines.exception_handling</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.*</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.<span class="function">Logger</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val logger: Logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        val handler = CoroutineExceptionHandler &#123; context, exception -&gt;</span><br><span class="line">            <span class="comment">//捕捉到的是Job2的IllegalStateException异常，Job1的ArithmeticException异常被屏蔽掉了，</span></span><br><span class="line">            <span class="comment">//通过Throwable的getSuppressed()方法可以查看。</span></span><br><span class="line">            logger.info(</span><br><span class="line">                <span class="string">&quot;Caught $exception with suppressed &quot;</span> +</span><br><span class="line">                        exception.suppressed?.contentToString()</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Parent Job</span></span><br><span class="line">        val parentJob = GlobalScope.launch(handler) &#123;</span><br><span class="line">            <span class="comment">//Child Job 1</span></span><br><span class="line">            launch &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    delay(Long.MAX_VALUE)</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                    <span class="comment">//JobCancellationException.</span></span><br><span class="line">                    logger.error(<span class="string">&quot;$&#123;e.javaClass.simpleName&#125; in Child Job 1&quot;</span>)</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ArithmeticException()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//Child Job 2            </span></span><br><span class="line">            launch &#123;</span><br><span class="line">                delay(<span class="number">100</span>)</span><br><span class="line">                <span class="keyword">throw</span> IllegalStateException()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            delay(Long.MAX_VALUE)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Wait until parentJob completes</span></span><br><span class="line">        parentJob.join()</span><br><span class="line">        logger.info(<span class="string">&quot;All Jobs completed&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">07.273</span>[DefaultDispatcher-worker-<span class="number">2</span>] ERROR Main04.kt[<span class="number">28</span>]: JobCancellationException in Child Job <span class="number">1</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">07.333</span>[DefaultDispatcher-worker-<span class="number">2</span>] INFO CoroutineExceptionHandler.kt[<span class="number">101</span>]: Caught java.lang.IllegalStateException with suppressed [java.lang.ArithmeticException]</span><br><span class="line"><span class="number">2022</span>-<span class="number">01</span>-<span class="number">30</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">07.333</span>[main] INFO Main04.kt[<span class="number">44</span>]: All Jobs completed</span><br></pre></td></tr></table></figure>

<h4 id="8-Coroutine的取消"><a href="#8-Coroutine的取消" class="headerlink" title="8. Coroutine的取消"></a>8. Coroutine的取消</h4><p>A <strong>cancelled</strong> scope cannot start more coroutines.</p>
<p>A <strong>cancelled</strong> child doesn’t affect other siblings.</p>
<p>A <strong>cancelling</strong> coroutine is not able to suspend.</p>
<p>join()/await() — Suspend until the job is completed.</p>
<p>join() — No action if completed</p>
<p>await() — Throws if completed</p>
<h5 id="8-1-join"><a href="#8-1-join" class="headerlink" title="8.1 join()"></a>8.1 join()</h5><p>① 先cancel( )后join( )</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        <span class="keyword">val</span> startTime = System.currentTimeMillis()</span><br><span class="line">        <span class="keyword">val</span> job = launch(Dispatchers.Default) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - nextPrintTime &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Hello <span class="variable">$i</span>, isActive: &quot;</span> + isActive)</span><br><span class="line">                    nextPrintTime += <span class="number">500</span></span><br><span class="line">                    i++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelling...&quot;</span>)</span><br><span class="line">        job.cancel()</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">        job.join()</span><br><span class="line">        logger.info(<span class="string">&quot;Joined&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">08.635</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">0</span>, isActive: <span class="literal">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">09.123</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">1</span>, isActive: <span class="literal">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">09.162</span>[main] INFO Main.kt[<span class="number">27</span>]: Cancelling...</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">09.165</span>[main] INFO Main.kt[<span class="number">29</span>]: Cancelled</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">09.623</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">2</span>, isActive: <span class="literal">false</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">10.123</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">3</span>, isActive: <span class="literal">false</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">10.623</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">4</span>, isActive: <span class="literal">false</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">23</span>:<span class="number">10.626</span>[main] INFO Main.kt[<span class="number">31</span>]: Joined</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>② 先join( )后cancel( )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        val startTime = System.currentTimeMillis()</span><br><span class="line">        val job = launch(Dispatchers.Default) &#123;</span><br><span class="line">            <span class="keyword">var</span> nextPrintTime = startTime</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(i &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(System.currentTimeMillis() - nextPrintTime &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                    logger.info(<span class="string">&quot;Hello $i, isActive: &quot;</span> + isActive)</span><br><span class="line">                    nextPrintTime += <span class="number">500</span></span><br><span class="line">                    i++</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        job.join()</span><br><span class="line">        logger.info(<span class="string">&quot;Joined&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelling...&quot;</span>)</span><br><span class="line">        job.cancel()</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">16</span>:<span class="number">59.058</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">0</span>, isActive: <span class="keyword">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">16</span>:<span class="number">59.544</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">1</span>, isActive: <span class="keyword">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">00.044</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">2</span>, isActive: <span class="keyword">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">00.544</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">3</span>, isActive: <span class="keyword">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">01.044</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main.kt[<span class="number">19</span>]: Hello <span class="number">4</span>, isActive: <span class="keyword">true</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">01.047</span>[main] INFO Main.kt[<span class="number">28</span>]: Joined</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">01.048</span>[main] INFO Main.kt[<span class="number">29</span>]: Cancelling...</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">17</span>:<span class="number">01.049</span>[main] INFO Main.kt[<span class="number">31</span>]: Cancelled</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h5 id="8-2-wait"><a href="#8-2-wait" class="headerlink" title="8.2 wait()"></a>8.2 wait()</h5><p>① 先await( )后cancel( )</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        <span class="keyword">val</span> job = async(Dispatchers.Default) &#123;</span><br><span class="line">            repeat(<span class="number">5</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;Hello <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">                delay(<span class="number">500</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        <span class="keyword">val</span> result = job.await()</span><br><span class="line">        logger.info(<span class="string">&quot;Awaited, result: <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelling...&quot;</span>)</span><br><span class="line">        job.cancel()</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">58.399</span>[DefaultDispatcher-worker-<span class="number">2</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">0</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">58.915</span>[DefaultDispatcher-worker-<span class="number">2</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">1</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">59.416</span>[DefaultDispatcher-worker-<span class="number">3</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">2</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">31</span>:<span class="number">59.924</span>[DefaultDispatcher-worker-<span class="number">3</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">3</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">00.426</span>[DefaultDispatcher-worker-<span class="number">4</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">4</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">00.932</span>[main] INFO Main01.kt[<span class="number">22</span>]: Awaited, result: kotlin.<span class="built_in">Unit</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">00.934</span>[main] INFO Main01.kt[<span class="number">23</span>]: Cancelling...</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">32</span>:<span class="number">00.934</span>[main] INFO Main01.kt[<span class="number">25</span>]: Cancelled</span><br></pre></td></tr></table></figure>

<p>② 先cancel( )后await( ) </p>
<p>会抛出kotlinx.coroutines.JobCancellationException异常。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> logger = LogManager.getLogger()</span><br><span class="line"></span><br><span class="line">    runBlocking &#123;</span><br><span class="line">        <span class="keyword">val</span> job = async(Dispatchers.Default) &#123;</span><br><span class="line">            repeat(<span class="number">5</span>) &#123;</span><br><span class="line">                logger.info(<span class="string">&quot;Hello <span class="variable">$it</span>&quot;</span>)</span><br><span class="line">                delay(<span class="number">500</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        delay(<span class="number">1000L</span>)</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelling...&quot;</span>)</span><br><span class="line">        job.cancel()</span><br><span class="line">        logger.info(<span class="string">&quot;Cancelled&quot;</span>)</span><br><span class="line">        <span class="keyword">val</span> result = job.await()</span><br><span class="line">        logger.info(<span class="string">&quot;Awaited, result: <span class="variable">$result</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//output:</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">49.933</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">0</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">50.452</span>[DefaultDispatcher-worker-<span class="number">1</span>] INFO Main01.kt[<span class="number">15</span>]: Hello <span class="number">1</span></span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">50.924</span>[main] INFO Main01.kt[<span class="number">21</span>]: Cancelling...</span><br><span class="line"><span class="number">2022</span>-<span class="number">02</span>-<span class="number">05</span> <span class="number">12</span>:<span class="number">39</span>:<span class="number">50.939</span>[main] INFO Main01.kt[<span class="number">23</span>]: Cancelled</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> kotlinx.coroutines.JobCancellationException: Job was cancelled; job=DeferredCoroutine&#123;Cancelled&#125;@<span class="number">23986957</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>参考资料：</p>
<ol>
<li><a href="https://www.bilibili.com/video/BV1E7411M7Sj/">KotlinConf 2019: Coroutines! Gotta catch ‘em all! </a></li>
<li>协程中的取消和异常 | 异常处理详解  <a href="https://picture.iczhiku.com/weixin/message1595087419639.html">https://picture.iczhiku.com/weixin/message1595087419639.html</a></li>
</ol>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Input子系统的理解</title>
    <url>/2021/05/01/android_input/</url>
    <content><![CDATA[<p>​    大概在2015至2016年那会，我主要负责云真机项目的开发，可以在Web端实时显示手机画面、并可以通过鼠标实现手机Touch事件的精准输入。当时曾对Android手机的Input子系统做过深入的研究，但是一直没有公开发表出来，这篇文章的大部分内容就是当时所写的。</p>
<h3 id="一、Input系统介绍"><a href="#一、Input系统介绍" class="headerlink" title="一、Input系统介绍"></a>一、Input系统介绍</h3><ol>
<li>framework层的InputManagerService服务实现了WatchDog.Monitor接口，每隔30s会wake一下native层的InputDispatcher的Looper线程；</li>
<li>notifyMotion(const NotifyMotionArgs* args)利用传入的参数args构建一个MotionEntry实例，插入到mInboundQueue(Queue类型)队列中，如果插入前该队列为空, 则需要wake一下Looper线程。 注意：日志显示，正常的手指滑动时，该队列一直为空，因此一直需要执行wake操作。</li>
</ol>
<h3 id="二、InputManage的启动"><a href="#二、InputManage的启动" class="headerlink" title="二、InputManage的启动"></a>二、InputManage的启动</h3><h4 id="1-SystemServer"><a href="#1-SystemServer" class="headerlink" title="1. SystemServer"></a>1. SystemServer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[/frameworks/base/services/java/com/android/server/SystemServer.java]</span><br><span class="line"></span><br><span class="line"><span class="function">Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    WindowManagerService wm = <span class="keyword">null</span>;</span><br><span class="line">    DisplayManagerService display = <span class="keyword">null</span>;</span><br><span class="line">    InputManagerService inputManager = <span class="keyword">null</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建wmHandler</span></span><br><span class="line">        HandlerThread wmHandlerThread = <span class="keyword">new</span> HandlerThread(<span class="string">&quot;WindowManager&quot;</span>);</span><br><span class="line">        wmHandlerThread.start();</span><br><span class="line">        Handler wmHandler = <span class="keyword">new</span> Handler(wmHandlerThread.getLooper());</span><br><span class="line">        wmHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            android.os.Process.setThreadPriority(</span><br><span class="line">                    android.os.Process.THREAD_PRIORITY_DISPLAY);</span><br><span class="line">            android.os.Process.setCanSelfBackground(<span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">/* InputManager的初始化 */</span></span><br><span class="line">        inputManager = <span class="keyword">new</span> InputManagerService(context, wmHandler);</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 添加InputManagerService到Servicemanager中 */</span></span><br><span class="line">        ServiceManager.addService(Context.INPUT_SERVICE, inputManager);</span><br><span class="line"></span><br><span class="line">        ActivityManagerService.self().setWindowManager(wm);</span><br><span class="line">        inputManager.setWindowManagerCallbacks(wm.getInputMonitor());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** InputManager的启动 */</span></span><br><span class="line">        inputManager.start();</span><br><span class="line"></span><br><span class="line">        display.setWindowManager(wm);</span><br><span class="line">        display.setInputManager(inputManager);</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-Java层的InputManagerService"><a href="#2-Java层的InputManagerService" class="headerlink" title="2.  Java层的InputManagerService"></a>2.  Java层的InputManagerService</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[frameworks/base/services/core/java/com/android/server/input/InputManagerService.java]</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputManagerService</span> <span class="keyword">extends</span> <span class="title">IInputManager</span>.<span class="title">Stub</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Watchdog</span>.<span class="title">Monitor</span>, <span class="title">DisplayManagerService</span>.<span class="title">InputManagerFuncse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> InputManagerHandler mHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存Native层的InputManager的指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> mPtr;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//native函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">nativeInit</span><span class="params">(InputManagerService service,</span></span></span><br><span class="line"><span class="params"><span class="function">        Context context, MessageQueue messageQueue)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">nativeStart</span><span class="params">(<span class="keyword">int</span> ptr)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InputManagerService</span><span class="params">(Context context, Handler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">        <span class="keyword">this</span>.mHandler = <span class="keyword">new</span> InputManagerHandler(handler.getLooper());</span><br><span class="line">        ...</span><br><span class="line">        mPtr = nativeInit(<span class="keyword">this</span>, mContext, mHandler.getLooper().getQueue());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//使用Native的InputManager指针做为参数，调用nativeStart()函数</span></span><br><span class="line">        nativeStart(mPtr);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add ourself to the Watchdog monitors.</span></span><br><span class="line">        Watchdog.getInstance().addMonitor(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        registerPointerSpeedSettingObserver();</span><br><span class="line">        registerShowTouchesSettingObserver();</span><br><span class="line"></span><br><span class="line">        mContext.registerReceiver(<span class="keyword">new</span> BroadcastReceiver() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">                updatePointerSpeedFromSettings();</span><br><span class="line">                updateShowTouchesFromSettings();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> IntentFilter(Intent.ACTION_USER_SWITCHED), <span class="keyword">null</span>, mHandler);</span><br><span class="line"></span><br><span class="line">        updatePointerSpeedFromSettings();</span><br><span class="line">        updateShowTouchesFromSettings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-JNI接口层"><a href="#3-JNI接口层" class="headerlink" title="3. JNI接口层"></a>3. JNI接口层</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> jint <span class="title">nativeInit</span><span class="params">(JNIEnv* env, jclass clazz,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject serviceObj, jobject contextObj, jobject messageQueueObj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过传入的Java层MessageQueue参数获取Native的MessageQueue实例</span></span><br><span class="line">    sp&lt;MessageQueue&gt; messageQueue = <span class="built_in">android_os_MessageQueue_getMessageQueue</span>(</span><br><span class="line">        env, messageQueueObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Java层的InputManagerService实例参数、Context参数和Looper参数构造NativeInputManager实例；</span></span><br><span class="line">    NativeInputManager* im = <span class="keyword">new</span> <span class="built_in">NativeInputManager</span>(contextObj, serviceObj,</span><br><span class="line">         messageQueue-&gt;<span class="built_in">getLooper</span>());</span><br><span class="line"></span><br><span class="line">    im-&gt;<span class="built_in">incStrong</span>(serviceObj);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;jint&gt;(im);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">nativeStart</span><span class="params">(JNIEnv* env, jclass clazz, jint ptr)</span> </span>&#123;</span><br><span class="line">    NativeInputManager* im = <span class="keyword">reinterpret_cast</span>&lt;NativeInputManager*&gt;(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">status_t</span> result = im-&gt;<span class="built_in">getInputManager</span>()-&gt;<span class="built_in">start</span>();</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        <span class="built_in">jniThrowRuntimeException</span>(env, <span class="string">&quot;Input manager could not be started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Native层的InputManager（重点）"><a href="#Native层的InputManager（重点）" class="headerlink" title="Native层的InputManager（重点）"></a>Native层的InputManager（重点）</h4><ol>
<li>InputManage构造函数的参数是：EventHub、ReaderPolicy和DispatcherPolicy。</li>
<li>InputManager启动了两个线程：InputReaderThread和InputDispatcherThread。<br> InputReaderThread封装了InputReader类实例，启动线程时会循环调用InputReader的loopOnce()函数；<br> InputDispatcherThread封装了InputDispatcher实例，启动线程时会循环调用InputDispatcher的threadLoop()函数；<br> Inputdispatcher构造函数的参数是DispatcherPolicy；InputReader构造函数的参数是EventHub、ReaderPolicy和InputDispatcher。<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[frameworks/base/services/core/jni/com_android_server_input_InputManagerService.cpp]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NativeInputManager</span> :</span> <span class="keyword">public</span> <span class="keyword">virtual</span> RefBase,</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> InputReaderPolicyInterface,</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> InputDispatcherPolicyInterface,</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> PointerControllerPolicyInterface &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">NativeInputManager</span>(jobject contextObj, jobject serviceObj,</span><br><span class="line">            <span class="keyword">const</span> sp&lt;Looper&gt;&amp; looper);</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> sp&lt;InputManager&gt; <span class="title">getInputManager</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mInputManager; &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    sp&lt;InputManager&gt; mInputManager;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NativeInputManager::<span class="built_in">NativeInputManager</span>(jobject contextObj,</span><br><span class="line">        jobject serviceObj, <span class="keyword">const</span> sp&lt;Looper&gt;&amp; looper) :</span><br><span class="line">        <span class="built_in">mLooper</span>(looper) &#123;</span><br><span class="line">    JNIEnv* env = <span class="built_in">jniEnv</span>();</span><br><span class="line"></span><br><span class="line">    mContextObj = env-&gt;<span class="built_in">NewGlobalRef</span>(contextObj);</span><br><span class="line">    mServiceObj = env-&gt;<span class="built_in">NewGlobalRef</span>(serviceObj);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        AutoMutex _l(mLock);</span><br><span class="line">        mLocked.systemUiVisibility =</span><br><span class="line">            ASYSTEM_UI_VISIBILITY_STATUS_BAR_VISIBLE;</span><br><span class="line">        mLocked.pointerSpeed = <span class="number">0</span>;</span><br><span class="line">        mLocked.pointerGesturesEnabled = <span class="literal">true</span>;</span><br><span class="line">        mLocked.showTouches = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sp&lt;EventHub&gt; eventHub = <span class="keyword">new</span> <span class="built_in">EventHub</span>();</span><br><span class="line">    mInputManager = <span class="keyword">new</span> <span class="built_in">InputManager</span>(eventHub, <span class="keyword">this</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、应用程序请求注册监听事件"><a href="#三、应用程序请求注册监听事件" class="headerlink" title="三、应用程序请求注册监听事件"></a>三、应用程序请求注册监听事件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(View view, WindowManager.LayoutParams attrs, View panelParentView)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mView = view;</span><br><span class="line">            ...</span><br><span class="line">            requestLayout();</span><br><span class="line">            <span class="comment">//创建InputChannel实例，创建后的InputChannel是未初始化的，可以通过从Parcel对象中读取信息初始化, 或者调用transferTo(InputChannel outParameter)从另一个InputChannel实例中获取初始化信息。</span></span><br><span class="line">            <span class="keyword">if</span> ((mWindowAttributes.inputFeatures</span><br><span class="line">                    &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class="number">0</span>) &#123;</span><br><span class="line">                mInputChannel = <span class="keyword">new</span> InputChannel();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">                <span class="comment">//addToDisplay()方法会调用WindowManagerService的addWindow()方法。</span></span><br><span class="line">                res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</span><br><span class="line">                        getHostVisibility(), mDisplay.getDisplayId(),</span><br><span class="line">                        mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</span><br><span class="line">                        mAttachInfo.mOutsets, mInputChannel);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">                ...</span><br><span class="line">                mView = <span class="keyword">null</span>;</span><br><span class="line">                mInputChannel = <span class="keyword">null</span>;</span><br><span class="line">                ...</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Adding window failed&quot;</span>, e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mInputChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInputQueueCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInputQueue = <span class="keyword">new</span> InputQueue();</span><br><span class="line">                    mInputQueueCallback.onInputQueueCreated(mInputQueue);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//创建WindowInputEventReceiver实例，使用前面创建好的InputChannel实例作参数。</span></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 创建InputEventReceiver实例，参数有两个：</span></span><br><span class="line"><span class="comment">             * （1）InputChannel实例：前面创建好的inputChannel[1];</span></span><br><span class="line"><span class="comment">             * （2）Looper实例：与当前线程关联的Looper实例，它包含了一个MessageQueue实例、一个Thread实例(指向当前线程)；</span></span><br><span class="line"><span class="comment">             1. InputEventReceiver的通过jni完成；</span></span><br><span class="line"><span class="comment">             2. 在jni中构建一个NativeInputEventReceiver实例，参数有：</span></span><br><span class="line"><span class="comment">                 receiverWeak——new WeakReference&lt;InputEventReceiver&gt;(this)；//从Java层的InputEventReceiver封装而来；</span></span><br><span class="line"><span class="comment">                 InputChannel——传入的mInputChannel实参；</span></span><br><span class="line"><span class="comment">                 MessageQueue——从looper的getQueue获取；</span></span><br><span class="line"><span class="comment">                 初始化初始化的成员变量有：</span></span><br><span class="line"><span class="comment">                    mReceiverWeakGlobal赋值为receiverWeak；</span></span><br><span class="line"><span class="comment">                    使用inputChannel作参数构建mInputConsumer实例；</span></span><br><span class="line"><span class="comment">                    mMessageQueue赋值为messageQueue；</span></span><br><span class="line"><span class="comment">                    mBatchedInputEventPending为false;</span></span><br><span class="line"><span class="comment">                    mFdEvents初始化为0。</span></span><br><span class="line"><span class="comment">             3. 将inputChannel[1]的socketpair的fd添加到与当前线程关联的Looper实例的监听队列中。如果fd上有事件发生，则会回调</span></span><br><span class="line"><span class="comment">                NativeInputEventReceiver实例的handleEvent(int receiveFd，int events, void* data)函数。</span></span><br><span class="line"><span class="comment">                在handleEvents()函数中会调用consumeEvents(env, false, -1, NULL)。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                 执行NativeInputEventReceiver的initialize()函数, 即调用setFdEvents(ALOOPER_EVENT_NPUT)。所做的工作是：</span></span><br><span class="line"><span class="comment">                 设置mFdEvents为ALOOPER_EVENT_NPUT；</span></span><br><span class="line"><span class="comment">                 从mInputConsumer中getChannel()-&gt;getFd()获取fd，然后调用：</span></span><br><span class="line"><span class="comment">                 mMessageQueue-&gt;getLooper()-&gt;addFd(fd, 0, events, this, NULL);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">                mInputEventReceiver = <span class="keyword">new</span> WindowInputEventReceiver(mInputChannel,</span><br><span class="line">                        Looper.myLooper());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addWindow</span><span class="params">(Session session, IWindow client, <span class="keyword">int</span> seq,</span></span></span><br><span class="line"><span class="params"><span class="function">        WindowManager.LayoutParams attrs, <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId,</span></span></span><br><span class="line"><span class="params"><span class="function">        Rect outContentInsets, Rect outStableInsets, Rect outOutsets,</span></span></span><br><span class="line"><span class="params"><span class="function">        InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">synchronized</span>(mWindowMap) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (outInputChannel != <span class="keyword">null</span> &amp;&amp; (attrs.inputFeatures</span><br><span class="line">                &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class="number">0</span>) &#123;</span><br><span class="line">            String name = win.makeInputChannelName();</span><br><span class="line">            <span class="comment">//创建名为name的socketpair实例，将socket[0](服务端)注册到InputManagerService中，</span></span><br><span class="line">            <span class="comment">//将socket[1](客户端)传递给应用进程。</span></span><br><span class="line">            InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);</span><br><span class="line">            win.setInputChannel(inputChannels[<span class="number">0</span>]);</span><br><span class="line">            inputChannels[<span class="number">1</span>].transferTo(outInputChannel);</span><br><span class="line"></span><br><span class="line">            mInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在ViewRootImpl类的setView()方法中，如果还没有创建过InputChannel，即WindowManager.LayoutParams属性不包含INPUT_FEATURE_NO_INPUT_CHANNEL，则会创建一个InputChannel类的实例。</p>
<p>对应的C++层代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">NativeInputEventReceiver::consumeEvents</span><span class="params">(JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> consumeBatches<span class="comment">/*false*/</span>, <span class="keyword">nsecs_t</span> frameTime<span class="comment">/*-1*/</span>, <span class="keyword">bool</span>* outConsumedBatch<span class="comment">/*NULL*/</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> skipCallbacks = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">uint32_t</span> seq;</span><br><span class="line">        InputEvent* inputEvent;</span><br><span class="line">        <span class="keyword">status_t</span> status = mInputConsumer.<span class="built_in">consume</span>(&amp;mInputEventFactory,</span><br><span class="line">                consumeBatches<span class="comment">/*false*/</span>, frameTime<span class="comment">/*-1*/</span>, &amp;seq, &amp;inputEvent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[/frameworks/native/libs/input/InputTransport.cpp]</span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">InputConsumer::consume</span><span class="params">(InputEventFactoryInterface* factory,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">bool</span> consumeBatches<span class="comment">/*false*/</span>, <span class="keyword">nsecs_t</span> frameTime<span class="comment">/*-1*/</span>, <span class="keyword">uint32_t</span>* outSeq, InputEvent** outEvent)</span> </span>&#123;</span><br><span class="line">    *outSeq = <span class="number">0</span>;</span><br><span class="line">    *outEvent = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (!*outEvent) &#123;</span><br><span class="line">        <span class="keyword">status_t</span> result = mChannel-&gt;<span class="built_in">receiveMessage</span>(&amp;mMsg);</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (mMsg.header.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> AINPUT_EVENT_TYPE_MOTION: &#123;</span><br><span class="line">            MotionEvent* motionEvent = factory-&gt;<span class="built_in">createMotionEvent</span>();</span><br><span class="line">            <span class="keyword">if</span> (! motionEvent) <span class="keyword">return</span> NO_MEMORY;</span><br><span class="line"></span><br><span class="line">            *outSeq = mMsg.body.motion.seq;</span><br><span class="line">            *outEvent = motionEvent;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[frameworks/base/services/core/java/com/android/server/wm/Session.java]  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addToDisplay</span><span class="params">(IWindow window, <span class="keyword">int</span> seq, WindowManager.LayoutParams attrs,<span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId, Rect outContentInsets, Rect outStableInsets,InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mService.addWindow(<span class="keyword">this</span>, window, seq, attrs, viewVisibility, displayId, outContentInsets, outStableInsets, outInputChannel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addToDisplay</span><span class="params">(IWindow window, <span class="keyword">int</span> seq, WindowManager.LayoutParams attrs,<span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId, Rect outContentInsets, Rect outStableInsets,InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mService.addWindow(<span class="keyword">this</span>, window, seq, attrs, viewVisibility, displayId, outContentInsets, outStableInsets, outInputChannel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    其实调用的是WindowsManagerService的addWindow()方法。在addView()方法中会创建一个Input Channel Pair，其中Server Channel 为WindowManagerService, Client Channel为ViewRootImpl。  </p>
<p>​      InputChannel类提供了openInputChannelPair()方法，用于创建一个input channel pair实例，第1个input channel供Input Dispatcher使用，用于pulish输入事件；第2个input channel供Application的输入队列使用，用于consume输入事件。  </p>
<p>  [frameworks/base/services/core/java/com/android/server/wm/WindowManagerService.java]  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowManagerService</span> <span class="keyword">extends</span> <span class="title">IWindowManager</span>.<span class="title">Stub</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Watchdog</span>.<span class="title">Monitor</span>, <span class="title">WindowManagerPolicy</span>.<span class="title">WindowManagerFuncs</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">final</span> InputManagerService mInputManager;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//Constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WindowManagerService</span><span class="params">(Context context, InputManagerService inputManager,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">boolean</span> haveInputMethods, <span class="keyword">boolean</span> showBootMsgs, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        mInputManager = inputManager; <span class="comment">// Must be before createDisplayContentLocked.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addWindow</span><span class="params">(Session session, IWindow client, <span class="keyword">int</span> seq,</span></span></span><br><span class="line"><span class="params"><span class="function">            WindowManager.LayoutParams attrs, <span class="keyword">int</span> viewVisibility, <span class="keyword">int</span> displayId,</span></span></span><br><span class="line"><span class="params"><span class="function">            Rect outContentInsets, Rect outStableInsets, InputChannel outInputChannel)</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">        WindowState win = <span class="keyword">null</span>;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mWindowMap) &#123;</span><br><span class="line">            ...</span><br><span class="line">            win = <span class="keyword">new</span> WindowState(<span class="keyword">this</span>, session, client, token,</span><br><span class="line">                attachedWindow, appOp[<span class="number">0</span>], seq, attrs, viewVisibility, displayContent);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (outInputChannel != <span class="keyword">null</span> &amp;&amp; (attrs.inputFeatures</span><br><span class="line">                    &amp; WindowManager.LayoutParams.INPUT_FEATURE_NO_INPUT_CHANNEL) == <span class="number">0</span>) &#123;</span><br><span class="line">                String name = win.makeInputChannelName();</span><br><span class="line">                InputChannel[] inputChannels = InputChannel.openInputChannelPair(name);</span><br><span class="line">                win.setInputChannel(inputChannels[<span class="number">0</span>]);</span><br><span class="line">                inputChannels[<span class="number">1</span>].transferTo(outInputChannel);</span><br><span class="line">                mInputManager.registerInputChannel(win.mInputChannel, win.mInputWindowHandle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//addWindow</span></span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">// class WindowManagerSerivice</span></span><br></pre></td></tr></table></figure>


<h3 id="InputDispatcher"><a href="#InputDispatcher" class="headerlink" title="InputDispatcher"></a>InputDispatcher</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">EventEntry* mPendingEvent; <span class="comment">//初始值为NULL, 在每次loopOnce()循环中，如果mPendingEvent为NULL, 则当InboundQueue队列不为NULL时，从队列头取出一个元素赋值给mPendingEvent; 然后，在mPendingEvent处理完成后，重置mPendingEvent为NULL。 下一次loopOnce()循环重复这一过程。</span></span><br><span class="line"></span><br><span class="line"> Vector&lt;sp&lt;InputWindowHandle&gt; &gt; mWindowHandles; <span class="comment">//当前界面所有InputWindowHandle的列表，用于在分发事件时从中查找事件落在了哪个InputWindowHandle范围内(见findTouchedWindowTargetsLocked()函数)。</span></span><br><span class="line"></span><br><span class="line"> Queue mInboundQueue; <span class="comment">//事件通知者(InputReader)发过来的事件存放在该队列中。每处理一个事件就会从队列头取出一个元素。 </span></span><br><span class="line">Queue mCommandQueue; <span class="comment">//在postCommandLocked(Command command)函数中会构建一个CommandEntry实例，插入mCommandQueue队列尾部。 在runCommandsLockedInterruptible()函数中会逐一取出队列中的CommandEntry实例，执行相应的命令，直至mCommandQueue为空。 </span></span><br><span class="line"></span><br><span class="line">KeyedVector&lt;<span class="keyword">int</span>, sp&lt;Connection&gt; &gt; mConnectionsByFd;  <span class="comment">//Key为InputChannel持有的文件fd， Value为Connection实例的指针。</span></span><br></pre></td></tr></table></figure>

<p>键值对的插入是在： </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">InputDispatcher::registerInputChannel</span><span class="params">(<span class="keyword">const</span> sp&amp; inputChannel, <span class="keyword">const</span> sp&amp; inputWindowHandle, <span class="keyword">bool</span> monitor)</span> </span>&#123;</span><br><span class="line">    ...    &#123;</span><br><span class="line">        <span class="comment">// acquire lock</span></span><br><span class="line">        AutoMutex _l(mLock);     </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">getConnectionIndexLocked</span>(inputChannel) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//该inputChannel已经注册过。</span></span><br><span class="line">            <span class="keyword">return</span> BAD_VALUE;   </span><br><span class="line">        &#125;     </span><br><span class="line">        sp connection = <span class="keyword">new</span> <span class="built_in">Connection</span>(inputChannel, inputWindowHandle, monitor); </span><br><span class="line">        <span class="keyword">int</span> fd = inputChannel-&gt;<span class="built_in">getFd</span>();    </span><br><span class="line">        mConnectionsByFd.<span class="built_in">add</span>(fd, connection);     </span><br><span class="line">        <span class="keyword">if</span> (monitor) &#123;</span><br><span class="line">            mMonitoringChannels.<span class="built_in">push</span>(inputChannel);    </span><br><span class="line">        &#125;     </span><br><span class="line">        mLooper-&gt;<span class="built_in">addFd</span>(fd, <span class="number">0</span>, ALOOPER_EVENT_INPUT, handleReceiveCallback, <span class="keyword">this</span>);    </span><br><span class="line">    &#125; <span class="comment">// release lock     </span></span><br><span class="line">    <span class="comment">// Wake the looper because some connections have changed.    </span></span><br><span class="line">    mLooper-&gt;<span class="built_in">wake</span>();    </span><br><span class="line">    <span class="keyword">return</span> OK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>键值对的删除操作：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">InputDispatcher::unregisterInputChannelLocked</span><span class="params">(<span class="keyword">const</span> sp&amp; inputChannel,    <span class="keyword">bool</span> notify)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> connectionIndex = <span class="built_in">getConnectionIndexLocked</span>(inputChannel);</span><br><span class="line">    <span class="keyword">if</span> (connectionIndex &lt; <span class="number">0</span>) &#123;        </span><br><span class="line">        <span class="comment">//该InputChannel已经解注册过。        </span></span><br><span class="line">    <span class="keyword">return</span> BAD_VALUE;    </span><br><span class="line">    &#125;     </span><br><span class="line">    sp connection = mConnectionsByFd.<span class="built_in">valueAt</span>(connectionIndex);</span><br><span class="line">    mConnectionsByFd.<span class="built_in">removeItemsAt</span>(connectionIndex);</span><br><span class="line">    <span class="keyword">if</span> (connection-&gt;monitor) &#123;</span><br><span class="line">        <span class="built_in">removeMonitorChannelLocked</span>(inputChannel);</span><br><span class="line">    &#125;</span><br><span class="line">    mLooper-&gt;<span class="built_in">removeFd</span>(inputChannel-&gt;<span class="built_in">getFd</span>());</span><br><span class="line">    <span class="keyword">nsecs_t</span> currentTime = <span class="built_in">now</span>();</span><br><span class="line">    <span class="built_in">abortBrokenDispatchCycleLocked</span>(currentTime, connection, notify);</span><br><span class="line">    connection-&gt;status = Connection::STATUS_ZOMBIE;</span><br><span class="line">    <span class="comment">//注意connection指针的释放，由sp完成。</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="InputChannel的创建"><a href="#InputChannel的创建" class="headerlink" title="InputChannel的创建"></a>InputChannel的创建</h3><h4 id="1-InputPublisher"><a href="#1-InputPublisher" class="headerlink" title="1.  InputPublisher"></a>1.  InputPublisher</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputPublisher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//创建一个与指定InputChannel关联的InputPublisher实例。</span></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">InputPublisher</span><span class="params">(<span class="keyword">const</span> sp&lt;InputChannel&gt;&amp; channel)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">InputPublisher</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> sp&lt;InputChannel&gt; <span class="title">getChannel</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mChannel; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @brief 发布一个key event事件到input channel中，返回值有：</span></span><br><span class="line"><span class="comment">     *  OK(0):  发布成功；</span></span><br><span class="line"><span class="comment">     *  WOULD_BLOCK: 见InputChannel的sendMessage()函数；</span></span><br><span class="line"><span class="comment">     *  DEAD_OBJECT: 见InputChannel的sendMessage()函数； </span></span><br><span class="line"><span class="comment">     *  BAD_VALUE: seq为0；</span></span><br><span class="line"><span class="comment">     *  其它错误。 */</span></span><br><span class="line">    <span class="function"><span class="keyword">status_t</span> <span class="title">publishKeyEvent</span><span class="params">(<span class="keyword">uint32_t</span> seq, <span class="keyword">int32_t</span> deviceId, <span class="keyword">int32_t</span> source, <span class="keyword">int32_t</span> action, <span class="keyword">int32_t</span> flags, </span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int32_t</span> keyCode, <span class="keyword">int32_t</span> scanCode, <span class="keyword">int32_t</span> metaState, <span class="keyword">int32_t</span> repeatCount,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">nsecs_t</span> downTime, <span class="keyword">nsecs_t</span> eventTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @brief 发布一个motion event事件到input channel中， 返回值以下：</span></span><br><span class="line"><span class="comment">     *  OK(0): 发布成功；</span></span><br><span class="line"><span class="comment">     *  WOULD_BLOCK: 见InputChannel的sendMessage()函数；</span></span><br><span class="line"><span class="comment">     *  DEAD_OBJECT: 见InputChannel的sendMessage()函数；</span></span><br><span class="line"><span class="comment">     *  BAD_VALUE: seq为0，或者pointerCound&lt;1，或者pointerCound&gt;MAX_POINTERS;</span></span><br><span class="line"><span class="comment">     *  其它错误。*/</span></span><br><span class="line">    <span class="function"><span class="keyword">status_t</span> <span class="title">publishMotionEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">uint32_t</span> seq, <span class="keyword">int32_t</span> deviceId, <span class="keyword">int32_t</span> source, <span class="keyword">int32_t</span> action, <span class="keyword">int32_t</span> actionButton,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int32_t</span> flags, <span class="keyword">int32_t</span> edgeFlags, <span class="keyword">int32_t</span> metaState, <span class="keyword">int32_t</span> buttonState,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">float</span> xOffset, <span class="keyword">float</span> yOffset, <span class="keyword">float</span> xPrecision, <span class="keyword">float</span> yPrecision,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">nsecs_t</span> downTime, <span class="keyword">nsecs_t</span> eventTime, <span class="keyword">uint32_t</span> pointerCount,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">const</span> PointerProperties* pointerProperties, <span class="keyword">const</span> PointerCoords* pointerCoords)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** @brief 接收Consumer发挥的finished信号, 如果成功接收，则outSeq保存消息序列号，</span></span><br><span class="line"><span class="comment">     *  outHandled保存Consumer是否已处理该消息。 </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">status_t</span> <span class="title">receiveFinishedSignal</span><span class="params">(<span class="keyword">uint32_t</span>* outSeq, <span class="keyword">bool</span>* outHandled)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    sp&lt;InputChannel&gt; mChannel;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="2-InputChannel"><a href="#2-InputChannel" class="headerlink" title="2. InputChannel"></a>2. InputChannel</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InputChannel</span> :</span> <span class="keyword">public</span> RefBase &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">InputChannel</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">InputChannel</span>(<span class="keyword">const</span> String8&amp; name, <span class="keyword">int</span> fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一对InputChannel，创建成功时返回OK(0)。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">status_t</span> <span class="title">openInputChannelPair</span><span class="params">(<span class="keyword">const</span> String8&amp; name,</span></span></span><br><span class="line"><span class="params"><span class="function">            sp&lt;InputChannel&gt;&amp; outServerChannel, sp&lt;InputChannel&gt;&amp; outClientChannel)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> String8 <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mName; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getFd</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mFd; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 发送数据，返回值有以下几种：</span></span><br><span class="line"><span class="comment">     * OK(0): 发送成功；</span></span><br><span class="line"><span class="comment">     * WOULD_BLOCK(-EWOULDBLOCK)：如果errno为EAGAIN或EWOULDBLOCK，则返回WOULD_BLOCK，表示发送缓冲区已满；     </span></span><br><span class="line"><span class="comment">     * DEAD_OBJECT(-EPIPE): 如果errno为EPIPE或ENOTCONN或ECONNREFUSED或ECONNRESET，则返回DEAD_OBJECT, 表示对方socket已关闭；</span></span><br><span class="line"><span class="comment">     * 其它错误(-errno)。      </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">status_t</span> <span class="title">sendMessage</span><span class="params">(<span class="keyword">const</span> InputMessage* msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 接收数据，返回值有以下几种：</span></span><br><span class="line"><span class="comment">     * OK(0): 接收成功；</span></span><br><span class="line"><span class="comment">     * WOULD_BLOCK(-EWOULDBLOCK)：如果errno为EAGAIN或EWOULDBLOCK，则返回WOULD_BLOCK，表示没有收到任何数据；     </span></span><br><span class="line"><span class="comment">     * DEAD_OBJECT(-EPIPE): 如果errno为EPIPE或ENOTCONN或ECONNREFUSED，或读取数据长度为0，则返回DEAD_OBJECT；</span></span><br><span class="line"><span class="comment">     * 其它错误(-errno)。       </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">status_t</span> <span class="title">receiveMessage</span><span class="params">(InputMessage* msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回有相同fd的一个新的InputChannel实例。</span></span><br><span class="line">    <span class="function">sp&lt;InputChannel&gt; <span class="title">dup</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    String8 mName;</span><br><span class="line">    <span class="keyword">int</span> mFd;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="3-Connection"><a href="#3-Connection" class="headerlink" title="3. Connection"></a>3. Connection</h4><p>Connection与唯一的一个InputChannel对应，用来管理事件派发的状态。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> :</span> <span class="keyword">public</span> RefBase &#123; </span><br><span class="line"><span class="keyword">protected</span>: </span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Connection</span>();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">Status</span> &#123;</span></span><br><span class="line">        STATUS_NORMAL, </span><br><span class="line">        STATUS_BROKEN, <span class="comment">//发生不可恢复的通信错误；</span></span><br><span class="line">        STATUS_ZOMBIE <span class="comment">//InputChannel已经解注册；</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Status status;</span><br><span class="line">    sp&lt;InputChannel&gt; inputChannel;</span><br><span class="line">    sp&lt;InputWindowHandle&gt; inputWindowHandle;</span><br><span class="line">    <span class="keyword">bool</span> monitor;</span><br><span class="line">    InputPublisher inputPublisher;</span><br><span class="line">    InputState inputState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> inputPublisherBlocked;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//即将要发送给Consumer的事件，存放在该队列中。</span></span><br><span class="line">    Queue&lt;DispatchEntry&gt; outboundQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Queue of events that have been published to the connection but that have not</span></span><br><span class="line">    <span class="comment">// yet received a &quot;finished&quot; response from the application.</span></span><br><span class="line">    <span class="comment">//已经发送给Consumer的、但还没有从Consumer接收到finished信号的事件，存放在在该队列中。</span></span><br><span class="line">    Queue&lt;DispatchEntry&gt; waitQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">Connection</span><span class="params">(<span class="keyword">const</span> sp&lt;InputChannel&gt;&amp; inputChannel,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">const</span> sp&lt;InputWindowHandle&gt;&amp; inputWindowHandle, <span class="keyword">bool</span> monitor)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getInputChannelName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> inputChannel-&gt;<span class="built_in">getName</span>().<span class="built_in">string</span>(); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getWindowName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">getStatusLabel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DispatchEntry* <span class="title">findWaitQueueEntry</span><span class="params">(<span class="keyword">uint32_t</span> seq)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="4-InputTarget"><a href="#4-InputTarget" class="headerlink" title="4. InputTarget"></a>4. InputTarget</h4><p>InputTarget用来描述接收input event事件的特定窗口(Window)。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">InputTarget</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">        FLAG_FOREGROUND = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,</span><br><span class="line">        FLAG_WINDOW_IS_OBSCURED = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">        FLAG_SPLIT = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">        FLAG_ZERO_COORDS = <span class="number">1</span> &lt;&lt; <span class="number">3</span>,</span><br><span class="line">        FLAG_DISPATCH_AS_IS = <span class="number">1</span> &lt;&lt; <span class="number">8</span>,</span><br><span class="line">        FLAG_DISPATCH_AS_OUTSIDE = <span class="number">1</span> &lt;&lt; <span class="number">9</span>, </span><br><span class="line">        FLAG_DISPATCH_AS_HOVER_ENTER = <span class="number">1</span> &lt;&lt; <span class="number">10</span>,</span><br><span class="line">        FLAG_DISPATCH_AS_HOVER_EXIT = <span class="number">1</span> &lt;&lt; <span class="number">11</span>,</span><br><span class="line">        FLAG_DISPATCH_AS_SLIPPERY_EXIT = <span class="number">1</span> &lt;&lt; <span class="number">12</span>,</span><br><span class="line">        FLAG_DISPATCH_AS_SLIPPERY_ENTER = <span class="number">1</span> &lt;&lt; <span class="number">13</span>,</span><br><span class="line">        FLAG_DISPATCH_MASK = FLAG_DISPATCH_AS_IS</span><br><span class="line">                | FLAG_DISPATCH_AS_OUTSIDE</span><br><span class="line">                | FLAG_DISPATCH_AS_HOVER_ENTER</span><br><span class="line">                | FLAG_DISPATCH_AS_HOVER_EXIT</span><br><span class="line">                | FLAG_DISPATCH_AS_SLIPPERY_EXIT</span><br><span class="line">                | FLAG_DISPATCH_AS_SLIPPERY_ENTER,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The input channel to be targeted.</span></span><br><span class="line">    sp&lt;InputChannel&gt; inputChannel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flags for the input target.</span></span><br><span class="line">    <span class="keyword">int32_t</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The x and y offset to add to a MotionEvent as it is delivered.(ignored for KeyEvents)</span></span><br><span class="line">    <span class="keyword">float</span> xOffset, yOffset;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Scaling factor to apply to MotionEvent as it is delivered.(ignored for KeyEvents)</span></span><br><span class="line">    <span class="keyword">float</span> scaleFactor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The subset of pointer ids to include in motion events dispatched to this input target if FLAG_SPLIT is set.</span></span><br><span class="line">    BitSet32 pointerIds;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="5-EventHub"><a href="#5-EventHub" class="headerlink" title="5. EventHub"></a>5. EventHub</h4><p>  EventHub的重点是getEvents()函数。  </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventHub</span> &#123;</span>    </span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">EventHub::getEvents</span><span class="params">(<span class="keyword">int</span> timeoutMillis, RawEvent* buffer, </span></span></span><br><span class="line"><span class="params"><span class="function">			<span class="keyword">size_t</span> bufferSize)</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">		AutoMutex _l(mLock);</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">input_event</span> <span class="title">readBuffer</span>[<span class="title">bufferSize</span>];</span></span><br><span class="line">		RawEvent* event = buffer;</span><br><span class="line">		<span class="keyword">size_t</span> capacity = bufferSize;</span><br><span class="line">		<span class="keyword">bool</span> awoken = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">	    	<span class="keyword">nsecs_t</span> now = <span class="built_in">systemTime</span>(SYSTEM_TIME_MONOTONIC);</span><br><span class="line">		    <span class="comment">//默认为false，在配置发生变化时重新打开设备;</span></span><br><span class="line">	    	<span class="keyword">if</span> (mNeedToReopenDevices) &#123;</span><br><span class="line">				mNeedToReopenDevices = <span class="literal">false</span>;</span><br><span class="line">	        	<span class="built_in">closeAllDevicesLocked</span>();</span><br><span class="line">	        	mNeedToScanDevices = <span class="literal">true</span>;</span><br><span class="line">	        	<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="comment">//默认为false, 如果有设备正在关闭时为true;</span></span><br><span class="line">	    	<span class="keyword">while</span> (mClosingDevices) &#123;</span><br><span class="line">				Device* device = mClosingDevices;</span><br><span class="line">				mClosingDevices = device-&gt;next;</span><br><span class="line">	        	event-&gt;when = now;</span><br><span class="line">	        	event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ?BUILT_IN_KEYBOARD_ID : device-&gt;id;</span><br><span class="line">	        	event-&gt;type = DEVICE_REMOVED;</span><br><span class="line">	        	event += <span class="number">1</span>;</span><br><span class="line">	        	<span class="keyword">delete</span> device;</span><br><span class="line">	        	mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</span><br><span class="line">	        	<span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</span><br><span class="line">	            	<span class="keyword">break</span>;</span><br><span class="line">	        	&#125;</span><br><span class="line">			&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="comment">//默认为true,表示需要扫描设备；在开始扫描前立即将mNeedToScanDevices设为false;</span></span><br><span class="line">			<span class="comment">//扫描完成后将mNeedToSendFinishedDeviceScan设为true</span></span><br><span class="line">			<span class="keyword">if</span> (mNeedToScanDevices) &#123;</span><br><span class="line">	        	mNeedToScanDevices = <span class="literal">false</span>;</span><br><span class="line">	        	<span class="built_in">scanDevicesLocked</span>();</span><br><span class="line">	        	mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</span><br><span class="line">	    	&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">while</span> (mOpeningDevices != <span class="literal">NULL</span>) &#123;</span><br><span class="line">	        	Device* device = mOpeningDevices;</span><br><span class="line">	        	mOpeningDevices = device-&gt;next;</span><br><span class="line">	        	event-&gt;when = now;</span><br><span class="line">	        	event-&gt;deviceId = device-&gt;id == mBuiltInKeyboardId ? </span><br><span class="line">					<span class="number">0</span> : device-&gt;id;</span><br><span class="line">	        	event-&gt;type = DEVICE_ADDED;</span><br><span class="line">	        	event += <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	        	mNeedToSendFinishedDeviceScan = <span class="literal">true</span>;</span><br><span class="line">	        	<span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</span><br><span class="line">	            	<span class="keyword">break</span>;</span><br><span class="line">	        	&#125;</span><br><span class="line">	    	&#125;<span class="comment">//while</span></span><br><span class="line">            </span><br><span class="line">			<span class="comment">//所有的设备都添加完后，最后添加一个类型为FINISHED_DEVICE_SCAN的event;</span></span><br><span class="line">			<span class="keyword">if</span> (mNeedToSendFinishedDeviceScan) &#123;</span><br><span class="line">	        	mNeedToSendFinishedDeviceScan = <span class="literal">false</span>;</span><br><span class="line">	        	event-&gt;when = now;</span><br><span class="line">	        	event-&gt;type = FINISHED_DEVICE_SCAN;</span><br><span class="line">	        	event += <span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	        	<span class="keyword">if</span> (--capacity == <span class="number">0</span>) &#123;</span><br><span class="line">	            	<span class="keyword">break</span>;</span><br><span class="line">	        	&#125;</span><br><span class="line">	    	&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">bool</span> deviceChanged = <span class="literal">false</span>;</span><br><span class="line">	    	<span class="keyword">while</span> (mPendingEventIndex &lt; mPendingEventCount) &#123;</span><br><span class="line">				<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span>&amp; <span class="title">eventItem</span> =</span> </span><br><span class="line">					mPendingEventItems[mPendingEventIndex++];</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//如果eventItem.data.u32等于EPOLL_ID_INOTIFY；</span></span><br><span class="line">				<span class="keyword">if</span> (eventItem.data.u32 == EPOLL_ID_INOTIFY) &#123;</span><br><span class="line">	            	<span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</span><br><span class="line">	                	mPendingINotify = <span class="literal">true</span>;</span><br><span class="line">	            	&#125;</span><br><span class="line">	            	<span class="keyword">continue</span>;</span><br><span class="line">	        	&#125;</span><br><span class="line">				</span><br><span class="line">				<span class="comment">//eventItem.data.u32等于EPOLL_ID_WAKE，直接丢掉读取的数据；</span></span><br><span class="line">				<span class="keyword">if</span> (eventItem.data.u32 == EPOLL_ID_WAKE) &#123;</span><br><span class="line">	            	<span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</span><br><span class="line">	                	awoken = <span class="literal">true</span>;</span><br><span class="line">	                	<span class="keyword">char</span> buffer[<span class="number">16</span>];</span><br><span class="line">	                	<span class="keyword">ssize_t</span> nRead;</span><br><span class="line">	                	<span class="keyword">do</span> &#123;</span><br><span class="line">	                    	nRead = <span class="built_in">read</span>(mWakeReadPipeFd, buffer, </span><br><span class="line">								<span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">	                	&#125; <span class="keyword">while</span> ((nRead == <span class="number">-1</span> &amp;&amp; errno == EINTR) ||</span><br><span class="line">							 nRead == <span class="built_in"><span class="keyword">sizeof</span></span>(buffer));</span><br><span class="line">	            	&#125;</span><br><span class="line">	            	<span class="keyword">continue</span>;</span><br><span class="line">	        	&#125;</span><br><span class="line">	</span><br><span class="line">				<span class="keyword">ssize_t</span> deviceIndex = mDevices.<span class="built_in">indexOfKey</span>(eventItem.data.u32);</span><br><span class="line">				Device* device = mDevices.<span class="built_in">valueAt</span>(deviceIndex);</span><br><span class="line">	</span><br><span class="line">				<span class="keyword">if</span> (eventItem.events &amp; EPOLLIN) &#123;</span><br><span class="line">					<span class="keyword">int32_t</span> readSize = <span class="built_in">read</span>(device-&gt;fd, readBuffer,</span><br><span class="line">	                    <span class="built_in"><span class="keyword">sizeof</span></span>(struct input_event) * capacity);</span><br><span class="line">					<span class="keyword">if</span> (readSize == <span class="number">0</span> || (readSize &lt; <span class="number">0</span> &amp;&amp; errno == ENODEV)) &#123;</span><br><span class="line">						deviceChanged = <span class="literal">true</span>;</span><br><span class="line">	                	<span class="built_in">closeDeviceLocked</span>(device);</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> (readSize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">						...</span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span> ((readSize % <span class="built_in"><span class="keyword">sizeof</span></span>(struct input_event)) != <span class="number">0</span>) &#123;</span><br><span class="line">						<span class="keyword">int32_t</span> deviceId = device-&gt;id == mBuiltInKeyboardId ? </span><br><span class="line">								<span class="number">0</span> : device-&gt;id;</span><br><span class="line">						</span><br><span class="line">	                	<span class="keyword">size_t</span> count = <span class="built_in">size_t</span>(readSize) / <span class="built_in"><span class="keyword">sizeof</span></span>(struct input_event);</span><br><span class="line">	                	<span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">							<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">input_event</span>&amp; <span class="title">iev</span> =</span> readBuffer[i];</span><br><span class="line">							event-&gt;when = now;</span><br><span class="line">							event-&gt;deviceId = deviceId;</span><br><span class="line">	                    	event-&gt;type = iev.type;</span><br><span class="line">	                   	 	event-&gt;code = iev.code;</span><br><span class="line">	                    	event-&gt;value = iev.value;</span><br><span class="line">	                    	event += <span class="number">1</span>;</span><br><span class="line">						&#125;</span><br><span class="line">						</span><br><span class="line">						capacity -= count;</span><br><span class="line">	                	<span class="keyword">if</span> (capacity == <span class="number">0</span>) &#123;</span><br><span class="line">	                    	mPendingEventIndex -= <span class="number">1</span>;</span><br><span class="line">	                    	<span class="keyword">break</span>;</span><br><span class="line">	                	&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventItem.events &amp; EPOLLHUP) &#123;</span><br><span class="line">					deviceChanged = <span class="literal">true</span>;</span><br><span class="line">	            	<span class="built_in">closeDeviceLocked</span>(device);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					...</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;<span class="comment">//while</span></span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span> (mPendingINotify &amp;&amp; mPendingEventIndex &gt;= mPendingEventCount) &#123;</span><br><span class="line">	        	mPendingINotify = <span class="literal">false</span>;</span><br><span class="line">	        	<span class="built_in">readNotifyLocked</span>();</span><br><span class="line">	        	deviceChanged = <span class="literal">true</span>;</span><br><span class="line">	    	&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">if</span> (deviceChanged) &#123;</span><br><span class="line">	        	<span class="keyword">continue</span>;</span><br><span class="line">	    	&#125;</span><br><span class="line">	</span><br><span class="line">			<span class="comment">//如果已经读到数据或者被显式唤醒；</span></span><br><span class="line">			<span class="keyword">if</span> (event != buffer || awoken) &#123;</span><br><span class="line">	        	<span class="keyword">break</span>;</span><br><span class="line">	    	&#125;</span><br><span class="line">	</span><br><span class="line">			mPendingEventIndex = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	    	mLock.<span class="built_in">unlock</span>(); </span><br><span class="line">	    	<span class="built_in">release_wake_lock</span>(WAKE_LOCK_ID);</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">int</span> pollResult = <span class="built_in">epoll_wait</span>(mEpollFd, mPendingEventItems, </span><br><span class="line">					EPOLL_MAX_EVENTS, timeoutMillis);</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">acquire_wake_lock</span>(PARTIAL_WAKE_LOCK, WAKE_LOCK_ID);</span><br><span class="line">	    	mLock.<span class="built_in">lock</span>();</span><br><span class="line">	</span><br><span class="line">			<span class="keyword">if</span> (pollResult == <span class="number">0</span>) &#123;</span><br><span class="line">	        	<span class="comment">// Timed out.</span></span><br><span class="line">	        	mPendingEventCount = <span class="number">0</span>;</span><br><span class="line">	        	<span class="keyword">break</span>;</span><br><span class="line">	    	&#125; </span><br><span class="line">	</span><br><span class="line">			<span class="keyword">if</span> (pollResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">	        	mPendingEventCount = <span class="number">0</span>;</span><br><span class="line">	        	<span class="keyword">if</span> (errno != EINTR) &#123;</span><br><span class="line">	            	<span class="built_in">usleep</span>(<span class="number">100000</span>);</span><br><span class="line">	        	&#125;</span><br><span class="line">	    	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	        	mPendingEventCount = <span class="built_in">size_t</span>(pollResult);</span><br><span class="line">	    	&#125;</span><br><span class="line">		&#125;<span class="comment">//for(;;)</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> event - buffer;</span><br><span class="line">	&#125;<span class="comment">//getEvents</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 扫描/dev/input目录，读取设备列表，并添加到mDevices中。</span></span><br><span class="line"><span class="comment">	 * 如果没有添加过Virtual KeyBoard, 则额外添加。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">EventHub::scanDevicesLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">status_t</span> res = <span class="built_in">scanDirLocked</span>(DEVICE_PATH);</span><br><span class="line">		<span class="keyword">if</span>(res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		    <span class="built_in">ALOGE</span>(<span class="string">&quot;scan dir failed for %s\n&quot;</span>, DEVICE_PATH);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (mDevices.<span class="built_in">indexOfKey</span>(VIRTUAL_KEYBOARD_ID) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">		    <span class="built_in">createVirtualKeyboardLocked</span>();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 添加路径为devicePath的设备到mDevices中，并为devicePath文件注册epoll监听函数。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">status_t</span> <span class="title">EventHub::openDeviceLocked</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *devicePath)</span> </span>&#123;</span><br><span class="line">		...</span><br><span class="line">		<span class="keyword">int</span> fd = <span class="built_in">open</span>(devicePath, O_RDWR | O_CLOEXEC);</span><br><span class="line">		...</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">int32_t</span> deviceId = mNextDeviceId++;</span><br><span class="line">		Device* device = <span class="keyword">new</span> <span class="built_in">Device</span>(fd, deviceId, <span class="built_in">String8</span>(devicePath),</span><br><span class="line">	 			identifier);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//注册epoll;</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">eventItem</span>;</span></span><br><span class="line">		<span class="built_in">memset</span>(&amp;eventItem, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(eventItem));</span><br><span class="line">		eventItem.events = EPOLLIN;</span><br><span class="line">		eventItem.data.u32 = deviceId;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">epoll_ctl</span>(mEpollFd, EPOLL_CTL_ADD, fd, &amp;eventItem)) &#123;</span><br><span class="line">			<span class="keyword">delete</span> device;</span><br><span class="line">	    	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		...</span><br><span class="line">		<span class="built_in">addDeviceLocked</span>(device);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;<span class="comment">//openDeviceLocked</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 将device添加到mDevices向量中；</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">EventHub::addDeviceLocked</span><span class="params">(Device* device)</span> </span>&#123;</span><br><span class="line">		mDevices.<span class="built_in">add</span>(device-&gt;id, device);</span><br><span class="line">		device-&gt;next = mOpeningDevices;</span><br><span class="line">		mOpeningDevices = device;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SocketPair的创建："><a href="#SocketPair的创建：" class="headerlink" title="SocketPair的创建："></a>SocketPair的创建：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">[frameworks/native/libs/input/InputTransport.cpp]  </span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @brief 创建socketpair, 将socket[0]赋予outServerChannel，socket[1]赋予outClientChannel。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">status_t</span> <span class="title">InputChannel::openInputChannelPair</span><span class="params">(<span class="keyword">const</span> String8&amp; name,</span></span></span><br><span class="line"><span class="params"><span class="function">        sp&lt;InputChannel&gt;&amp; outServerChannel, sp&lt;InputChannel&gt;&amp; outClientChannel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sockets[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">socketpair</span>(AF_UNIX, SOCK_SEQPACKET, <span class="number">0</span>, sockets)) &#123;</span><br><span class="line">        <span class="keyword">status_t</span> result = -errno;</span><br><span class="line">        outServerChannel.<span class="built_in">clear</span>();</span><br><span class="line">        outClientChannel.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bufferSize = SOCKET_BUFFER_SIZE;</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockets[<span class="number">0</span>], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, <span class="built_in"><span class="keyword">sizeof</span></span>(bufferSize));</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockets[<span class="number">0</span>], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, <span class="built_in"><span class="keyword">sizeof</span></span>(bufferSize));</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockets[<span class="number">1</span>], SOL_SOCKET, SO_SNDBUF, &amp;bufferSize, <span class="built_in"><span class="keyword">sizeof</span></span>(bufferSize));</span><br><span class="line">    <span class="built_in">setsockopt</span>(sockets[<span class="number">1</span>], SOL_SOCKET, SO_RCVBUF, &amp;bufferSize, <span class="built_in"><span class="keyword">sizeof</span></span>(bufferSize));</span><br><span class="line"></span><br><span class="line">    String8 serverChannelName = name;</span><br><span class="line">    serverChannelName.<span class="built_in">append</span>(<span class="string">&quot; (server)&quot;</span>);</span><br><span class="line">    outServerChannel = <span class="keyword">new</span> <span class="built_in">InputChannel</span>(serverChannelName, sockets[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    String8 clientChannelName = name;</span><br><span class="line">    clientChannelName.<span class="built_in">append</span>(<span class="string">&quot; (client)&quot;</span>);</span><br><span class="line">    outClientChannel = <span class="keyword">new</span> <span class="built_in">InputChannel</span>(clientChannelName, sockets[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Looper线程处理"><a href="#Looper线程处理" class="headerlink" title="Looper线程处理"></a>Looper线程处理</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::dispatchOnceInnerLocked</span><span class="params">(<span class="keyword">nsecs_t</span>* nextWakeupTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! mPendingEvent) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mInboundQueue.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mKeyRepeatState.lastKeyEntry) &#123;</span><br><span class="line">                <span class="keyword">if</span> (currentTime &gt;= mKeyRepeatState.nextRepeatTime) &#123;</span><br><span class="line">                    <span class="comment">//为mPendingEvent赋值。</span></span><br><span class="line">                    mPendingEvent = <span class="built_in">synthesizeKeyRepeatLocked</span>(currentTime);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (mKeyRepeatState.nextRepeatTime &lt; *nextWakeupTime) &#123;</span><br><span class="line">                        <span class="comment">//更新nextWakeupTime。</span></span><br><span class="line">                        *nextWakeupTime = mKeyRepeatState.nextRepeatTime;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果mPendingEvent为空，直接返回。</span></span><br><span class="line">            <span class="keyword">if</span> (!mPendingEvent) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果mInboundQueue不为空, 则从mInboundQueue队列头部取出一个元素赋给mPendingEvent。</span></span><br><span class="line">            mPendingEvent = mInboundQueue.<span class="built_in">dequeueAtHead</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ALOG_ASSERT</span>(mPendingEvent != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">bool</span> done = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (mPendingEvent-&gt;type) &#123;</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">case</span> EventEntry::TYPE_MOTION:</span><br><span class="line">        MotionEntry* typedEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(mPendingEvent);</span><br><span class="line">        done = <span class="built_in">dispatchMotionLocked</span>(currentTime, typedEntry,</span><br><span class="line">                &amp;dropReason, nextWakeupTime);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">ALOG_ASSERT</span>(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">//switch</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (done) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dropReason != DROP_REASON_NOT_DROPPED) &#123;</span><br><span class="line">            <span class="built_in">dropInboundEventLocked</span>(mPendingEvent, dropReason);</span><br><span class="line">        &#125;</span><br><span class="line">        mLastDropReason = dropReason;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">releasePendingEventLocked</span>();</span><br><span class="line">        *nextWakeupTime = LONG_LONG_MIN; </span><br><span class="line">    &#125;<span class="comment">//if</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputDispatcher::dispatchMotionLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">nsecs_t</span> currentTime, MotionEntry* entry, DropReason* dropReason, <span class="keyword">nsecs_t</span>* nextWakeupTime)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! entry-&gt;dispatchInProgress) &#123;</span><br><span class="line">        entry-&gt;dispatchInProgress = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否需要drop该event。</span></span><br><span class="line">    <span class="keyword">if</span> (*dropReason != DROP_REASON_NOT_DROPPED) &#123;</span><br><span class="line">        <span class="built_in">setInjectionResultLocked</span>(entry, *dropReason == DROP_REASON_POLICY</span><br><span class="line">                ? INPUT_EVENT_INJECTION_SUCCEEDED : INPUT_EVENT_INJECTION_FAILED);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> isPointerEvent = entry-&gt;source &amp; AINPUT_SOURCE_CLASS_POINTER;</span><br><span class="line"></span><br><span class="line">    Vector&lt;InputTarget&gt; inputTargets;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> conflictingPointerActions = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int32_t</span> injectionResult;</span><br><span class="line">    <span class="keyword">if</span> (isPointerEvent) &#123;</span><br><span class="line">        <span class="comment">//找到当前界面的的所有InputTargets，添加到向量表inputTargets中。经过调试，发现该InputTargets列表</span></span><br><span class="line">        包含:NavigationBar、StatusBar、当前<span class="built_in">Activity</span>(如com.android.browser/com.android.browser.BrowserActivity)和WindowManager四部分。</span><br><span class="line">        <span class="comment">// Pointer event.  (eg. touchscreen)</span></span><br><span class="line">        injectionResult = <span class="built_in">findTouchedWindowTargetsLocked</span>(currentTime,</span><br><span class="line">                entry, inputTargets, nextWakeupTime, &amp;conflictingPointerActions);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (injectionResult == INPUT_EVENT_INJECTION_PENDING) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInjectionResultLocked</span>(entry, injectionResult);</span><br><span class="line">    <span class="keyword">if</span> (injectionResult != INPUT_EVENT_INJECTION_SUCCEEDED) &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">dispatchEventLocked</span>(currentTime, entry, inputTargets);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::dispatchEventLocked</span><span class="params">(<span class="keyword">nsecs_t</span> currentTime,</span></span></span><br><span class="line"><span class="params"><span class="function">        EventEntry* eventEntry, <span class="keyword">const</span> Vector&lt;InputTarget&gt;&amp; inputTargets)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ALOG_ASSERT</span>(eventEntry-&gt;dispatchInProgress); <span class="comment">// should already have been set to true</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">pokeUserActivityLocked</span>(eventEntry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; inputTargets.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> InputTarget&amp; inputTarget = inputTargets.<span class="built_in">itemAt</span>(i);</span><br><span class="line">        <span class="keyword">ssize_t</span> connectionIndex = <span class="built_in">getConnectionIndexLocked</span>(inputTarget.inputChannel);</span><br><span class="line">        <span class="keyword">if</span> (connectionIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            sp&lt;Connection&gt; connection = mConnectionsByFd.<span class="built_in">valueAt</span>(connectionIndex);</span><br><span class="line">            <span class="built_in">prepareDispatchCycleLocked</span>(currentTime, connection, eventEntry, &amp;inputTarget);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::prepareDispatchCycleLocked</span><span class="params">(<span class="keyword">nsecs_t</span> currentTime,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, <span class="keyword">const</span> InputTarget* inputTarget)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (connection-&gt;status != Connection::STATUS_NORMAL) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Split a motion event if needed.</span></span><br><span class="line">    <span class="keyword">if</span> (inputTarget-&gt;flags &amp; InputTarget::FLAG_SPLIT) &#123;</span><br><span class="line">        <span class="comment">//需要拆分该事件.</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不需求拆分事件。</span></span><br><span class="line">    <span class="built_in">enqueueDispatchEntriesLocked</span>(currentTime, connection, eventEntry, inputTarget);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::enqueueDispatchEntriesLocked</span><span class="params">(<span class="keyword">nsecs_t</span> currentTime,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, <span class="keyword">const</span> InputTarget* inputTarget)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> wasEmpty = connection-&gt;outboundQueue.<span class="built_in">isEmpty</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以 FLAG_DISPATCH_AS_OUTSIDE 模式将eventEntry实例插入队列；FLAG_DISPATCH_AS_OUTSIDE表示</span></span><br><span class="line">    <span class="comment">//有个AMOTION_EVENT_ACTION_DOWN的MotionEvent落在了该Target的外面，因此会被以</span></span><br><span class="line">    <span class="comment">//AMOTION_EVENT_ACTION_OUTSIDE的形式传递给该Target。</span></span><br><span class="line">    <span class="built_in">enqueueDispatchEntryLocked</span>(connection, eventEntry, inputTarget,</span><br><span class="line">            InputTarget::FLAG_DISPATCH_AS_OUTSIDE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以FLAG_DISPATCH_AS_IS模式将eventEntry实例插入队列；FLAG_DISPATCH_AS_IS表示该MotionEvent落在该Target</span></span><br><span class="line">    <span class="comment">//的范围内。</span></span><br><span class="line">    <span class="built_in">enqueueDispatchEntryLocked</span>(connection, eventEntry, inputTarget,</span><br><span class="line">            InputTarget::FLAG_DISPATCH_AS_IS);</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the outbound queue was previously empty, start the dispatch cycle going.</span></span><br><span class="line">    <span class="keyword">if</span> (wasEmpty &amp;&amp; !connection-&gt;outboundQueue.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        <span class="built_in">startDispatchCycleLocked</span>(currentTime, connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::enqueueDispatchEntryLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection, EventEntry* eventEntry, <span class="keyword">const</span> InputTarget* inputTarget,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int32_t</span> dispatchMode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int32_t</span> inputTargetFlags = inputTarget-&gt;flags;</span><br><span class="line">    <span class="keyword">if</span> (!(inputTargetFlags &amp; dispatchMode)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DispatchEntry* dispatchEntry = <span class="keyword">new</span> <span class="built_in">DispatchEntry</span>(eventEntry, <span class="comment">// increments ref</span></span><br><span class="line">            inputTargetFlags, inputTarget-&gt;xOffset, inputTarget-&gt;yOffset,</span><br><span class="line">            inputTarget-&gt;scaleFactor);</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (eventEntry-&gt;type) &#123;</span><br><span class="line">        MotionEntry* motionEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(eventEntry);</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (!connection-&gt;inputState.<span class="built_in">trackMotion</span>(motionEntry,</span><br><span class="line">                dispatchEntry-&gt;resolvedAction, dispatchEntry-&gt;resolvedFlags)) &#123;</span><br><span class="line">            <span class="keyword">delete</span> dispatchEntry;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// skip the inconsistent event</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">//switch</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将该DispatchEntry实例放入connection的outboundQueue队列中。</span></span><br><span class="line">    connection-&gt;outboundQueue.<span class="built_in">enqueueAtTail</span>(dispatchEntry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputDispatcher::startDispatchCycleLocked</span><span class="params">(<span class="keyword">nsecs_t</span> currentTime,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">const</span> sp&lt;Connection&gt;&amp; connection)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (connection-&gt;status == Connection::STATUS_NORMAL</span><br><span class="line">            &amp;&amp; !connection-&gt;outboundQueue.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">        DispatchEntry* dispatchEntry = connection-&gt;outboundQueue.head;</span><br><span class="line">        dispatchEntry-&gt;deliveryTime = currentTime;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Publish the event.</span></span><br><span class="line">        <span class="keyword">status_t</span> status;</span><br><span class="line">        EventEntry* eventEntry = dispatchEntry-&gt;eventEntry;</span><br><span class="line"></span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span> (eventEntry-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> EventEntry::TYPE_KEY: &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> EventEntry::TYPE_MOTION: &#123;</span><br><span class="line">            MotionEntry* motionEntry = <span class="keyword">static_cast</span>&lt;MotionEntry*&gt;(eventEntry);</span><br><span class="line">            <span class="comment">//发布消息，如果成功，则返回OK(0).</span></span><br><span class="line">            <span class="comment">// Publish the motion event.</span></span><br><span class="line">            status = connection-&gt;inputPublisher.<span class="built_in">publishMotionEvent</span>(dispatchEntry-&gt;seq,</span><br><span class="line">                    motionEntry-&gt;deviceId, motionEntry-&gt;source,</span><br><span class="line">                    dispatchEntry-&gt;resolvedAction, motionEntry-&gt;actionButton,</span><br><span class="line">                    dispatchEntry-&gt;resolvedFlags, motionEntry-&gt;edgeFlags,</span><br><span class="line">                    motionEntry-&gt;metaState, motionEntry-&gt;buttonState,</span><br><span class="line">                    xOffset, yOffset, motionEntry-&gt;xPrecision, motionEntry-&gt;yPrecision,</span><br><span class="line">                    motionEntry-&gt;downTime, motionEntry-&gt;eventTime,</span><br><span class="line">                    motionEntry-&gt;pointerCount, motionEntry-&gt;pointerProperties,</span><br><span class="line">                    usingCoords);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">ALOG_ASSERT</span>(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误处理。</span></span><br><span class="line">        <span class="keyword">if</span> (status) &#123;</span><br><span class="line">            <span class="keyword">if</span> (status == WOULD_BLOCK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (connection-&gt;waitQueue.<span class="built_in">isEmpty</span>()) &#123;</span><br><span class="line">                    <span class="built_in">abortBrokenDispatchCycleLocked</span>(currentTime, connection, <span class="literal">true</span> <span class="comment">/*notify*/</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    connection-&gt;inputPublisherBlocked = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">abortBrokenDispatchCycleLocked</span>(currentTime, connection, <span class="literal">true</span> <span class="comment">/*notify*/</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将该DispatchEntry实例从outboundQueue队列中，取出来放入waitQueue中。</span></span><br><span class="line">        connection-&gt;outboundQueue.<span class="built_in">dequeue</span>(dispatchEntry);</span><br><span class="line">        connection-&gt;waitQueue.<span class="built_in">enqueueAtTail</span>(dispatchEntry);</span><br><span class="line">    &#125;<span class="comment">//while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>IntentFilter的主要标签：</title>
    <url>/2022/04/14/IntentFilter%E7%9A%84%E4%B8%BB%E8%A6%81%E6%A0%87%E7%AD%BE%EF%BC%9A/</url>
    <content><![CDATA[<h4 id="一、IntentFilter的主要标签："><a href="#一、IntentFilter的主要标签：" class="headerlink" title="一、IntentFilter的主要标签："></a>一、IntentFilter的主要标签：</h4><h5 id="1-lt-category-gt"><a href="#1-lt-category-gt" class="headerlink" title="1. &lt;category&gt;"></a>1. &lt;category&gt;</h5><ol>
<li><p>主菜单进入必须使用 <code>&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</code></p>
</li>
<li><p>接收隐式Intent必须使用<code> &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</code></p>
</li>
</ol>
<h5 id="2-lt-action-gt"><a href="#2-lt-action-gt" class="headerlink" title="2. &lt;action&gt;"></a>2. &lt;action&gt;</h5><p>主菜单进入必须使用</p>
<p><code>&lt;actionandroid:name=&quot;android.intent.action.MAIN&quot; /&gt;</code></p>
<p>对于隐式的Intent必须指定action</p>
<h5 id="3-lt-data-gt"><a href="#3-lt-data-gt" class="headerlink" title="3. &lt;data&gt;"></a>3. &lt;data&gt;</h5><p>URI的内容组成：</p>
<p> <code> scheme://host:port/path</code></p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">content:<span class="comment">//com.fx.demo:200/system/etc</span></span><br><span class="line">http:<span class="comment">//www.google.com/getDetails?id=123</span></span><br></pre></td></tr></table></figure>

<p>主要标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:host</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:mimeType</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:path</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:pathPattern</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:pathPrefix</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:port</span>=<span class="string">&quot;*string*&quot;</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:scheme</span>=<span class="string">&quot;*string*&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="二、IntentFilter匹配隐式Intent规则"><a href="#二、IntentFilter匹配隐式Intent规则" class="headerlink" title="二、IntentFilter匹配隐式Intent规则"></a>二、IntentFilter匹配隐式Intent规则</h4><p>第1步：匹配action</p>
<p>第2步：匹配category</p>
<p>第3步：匹配data</p>
<p>以下几句简单的话帮助记忆：</p>
<p>1、没有data的Intent只能匹配没有data的Filter;</p>
<p>2、只有URI没有数据类型的Intent只能能匹配只有 URI没有数据类型的Filter;</p>
<p>3、没有URI只有数据类型的Intent只能能匹配没有URI只有数据类型的Filter;</p>
<p>4、 URI和数据类型都有的Intent能匹配：</p>
<p>  ① 只有相同数据类型的Filter</p>
<p>  ② 只有相同URI的Filter</p>
<p>  ③ URI和数据类型都相同的Filter</p>
<p>注：如果Filter没有指明scheme，默认支持：<code>content:</code>和<code>file:</code>。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Netty学习与实践</title>
    <url>/2022/04/25/netty/</url>
    <content><![CDATA[<h5 id="一、使用Netty开发Tcp-Server端"><a href="#一、使用Netty开发Tcp-Server端" class="headerlink" title="一、使用Netty开发Tcp Server端"></a>一、使用Netty开发Tcp Server端</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="comment">// 采用默认值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> TimeServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 配置服务端的NIO线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于服务端接受客户端的连接</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于进行SocketChannel的读写</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">//Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度。</span></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">//对应于JDK NIO类库中的ServerSocketChannel类</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChildChannelHandler()); <span class="comment">//绑定IO事件的处理类ChildChannelHandler.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定端口，同步等待成功</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 优雅退出，释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger = Logger.getLogger(TimeServerHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">//readableBytes()用于获取缓冲区可读的字节数，根据可读的字节数创建byte数组。</span></span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req); <span class="comment">//将缓冲区的字节数复制到新创建的byte数组中。</span></span><br><span class="line">        String body = <span class="keyword">new</span> String(req, StandardCharsets.UTF_8); <span class="comment">//获取请求消息</span></span><br><span class="line">        logger.debug(<span class="string">&quot;TimeServerHandler channelRead : &quot;</span> + body);</span><br><span class="line">        String currentTime = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.equalsIgnoreCase(body) ? <span class="keyword">new</span> java.util.Date(</span><br><span class="line">                System.currentTimeMillis()).toString() : <span class="string">&quot;BAD ORDER&quot;</span>;</span><br><span class="line">        ByteBuf resp = Unpooled.copiedBuffer(currentTime.getBytes());</span><br><span class="line">        ctx.write(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;TimeServerHandler channelReadComplete&quot;</span>);</span><br><span class="line">        <span class="comment">//将消息发送队列中的消息写入到SocketChannel中发送给对方。</span></span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;TimeServerHandler channelReadComplete&quot;</span>);</span><br><span class="line">        <span class="comment">//当发生异常时，关闭ChannelHandlerContext，释放和ChannelHandlerContext相关联的句柄等资源。</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="二、使用Netty开发Tcp-Client端"><a href="#二、使用Netty开发Tcp-Client端" class="headerlink" title="二、使用Netty开发Tcp Client端"></a>二、使用Netty开发Tcp Client端</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                port = Integer.valueOf(args[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                <span class="comment">// 采用默认值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> TimeServer().bind(port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 配置服务端的NIO线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于服务端接受客户端的连接</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">//用于进行SocketChannel的读写</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">//Netty用于启动NIO服务端的辅助启动类，目的是降低服务端的开发复杂度。</span></span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel.class) <span class="comment">//对应于JDK NIO类库中的ServerSocketChannel类</span></span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">                    .childHandler(<span class="keyword">new</span> ChildChannelHandler()); <span class="comment">//绑定IO事件的处理类ChildChannelHandler.</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定端口，同步等待成功</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待服务端监听端口关闭</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 优雅退出，释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> TimeServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> netty.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerAdapter;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelHandlerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger</span><br><span class="line">            .getLogger(TimeClientHandler.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ByteBuf firstMessage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeClientHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="string">&quot;QUERY TIME ORDER&quot;</span>.getBytes();</span><br><span class="line">        firstMessage = Unpooled.buffer(req.length);</span><br><span class="line">        firstMessage.writeBytes(req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端和服务端TCP链路建立成功之后，Netty的NIO线程会调用channelActive方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line">        ctx.writeAndFlush(firstMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当服务端返回应答消息时，channelRead方法会被调用。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String body = <span class="keyword">new</span> String(req, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Now is : &quot;</span> + body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当发生异常时，会调用exceptionCaught方法。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        logger.warning(<span class="string">&quot;Unexpected exception from downstream : &quot;</span></span><br><span class="line">                + cause.getMessage());</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式总结</title>
    <url>/2022/04/04/design_patterns/</url>
    <content><![CDATA[<p>常用设计模式的总结。</p>
<h3 id="一、创建型模式（Creational-Patterns）"><a href="#一、创建型模式（Creational-Patterns）" class="headerlink" title="一、创建型模式（Creational Patterns）"></a>一、创建型模式（Creational Patterns）</h3><h4 id="1-工厂方法（Factory-Method）"><a href="#1-工厂方法（Factory-Method）" class="headerlink" title="1. 工厂方法（Factory Method）"></a>1. 工厂方法（Factory Method）</h4><h6 id="1-1-意图（Intent）："><a href="#1-1-意图（Intent）：" class="headerlink" title="1.1 意图（Intent）："></a>1.1 意图（Intent）：</h6><p>Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.<br>定义一个用于创建对象的接口，但是让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p>
<ul>
<li>工厂方法中的角色：<br>  Product：抽象产品<br>  ConcreteProduct：具体产品<br>  Factory：抽象工厂<br>  ConcreteFactory：具体工厂</li>
</ul>
<h6 id="1-2-适用场景："><a href="#1-2-适用场景：" class="headerlink" title="1.2 适用场景："></a>1.2 适用场景：</h6><p>（1）如果无法预知对象的确切类别及其依赖关系时，可以考虑使用工厂方法；<br>工厂方法将创建产品的代码与实际使用产品的代码分离，从而能在不影响其他代码的情况下，扩展创建产品部分的代码；<br>（2）如果你希望用户能扩展你的软件库或框架的内部组件，可使用工厂方法；<br>（3）如果你希望使用现有对象来节省系统资源，而不是每次都重新创建对象，可使用工厂方法；<br>工厂方法可以返回缓存、对象池或其他来源的已有对象。</p>
<ul>
<li>优点</li>
</ul>
<ol>
<li>避免创建者和具体产品之间的紧密耦合；</li>
<li>单一职责原则：将产品创建代码放在程序的单一位置，从而使代码更容易维护；</li>
<li>开闭原则：无须改变现有的客户端代码，就可以在程序中引入新的产品类型；</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>需要引入许多新的子类， 代码可能会因此变得更复杂。 最好的情况是将该模式引入创建者类的现有层次结构中。</li>
</ol>
<h4 id="2-抽象工厂（Abstract-Factory）"><a href="#2-抽象工厂（Abstract-Factory）" class="headerlink" title="2. 抽象工厂（Abstract Factory）"></a>2. 抽象工厂（Abstract Factory）</h4><ul>
<li><p>意图（Intent）：<br>  Provide an interface for creating families of related or dependent objects without specifying their concrete classes.<br>  提供一个创建一系列相关或相互依赖的对象的接口，而无需指定它们具体的类。</p>
</li>
<li><p>抽象工厂中的角色<br>  抽象工厂（Abstract Factory）<br>  具体工厂（Concrete Factory）<br>  抽象产品（Abstract Product）<br>  ——声明同一种类型的产品接口；<br>  具体产品（Concrete Product）<br>  —— 定义一个被相应的具体工厂创建的产品对象。</p>
</li>
<li><p>适用场景：<br>  简单工厂模式针对的是一个产品等级结构（即继承自同一种抽象产品的体系），而抽象工厂针对的是多个产品等级结构。<br>  对于新增加的产品族，只需要对应增加一个新的具体工厂即可，对已有代码无须做任何修改。</p>
</li>
<li><p>优缺点：<br>  ① 分离了具体的类；<br>  ② 可以很方便的动态更换产品族<br>  只要更换具体工厂，就可以做到更换产品族（product families），因为一个具体工厂会创建一整个产品族（a complete family of products）。<br>  系统中有多于一个的产品族，而每次只使用其中某一个产品族。<br>  ③ 有利于保持产品的一致性<br>  属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。<br>  ④ 添加新的产品类型比较困难，因为AbstractFactory接口确定了所有可以被创建的产品集合，支持新种类的产品就需要扩展该工厂接口，这将涉及AbstractFactory及其所有子类的更改。<br>  当Abstract Factory模式中每一种具体工厂类只创建一个产品对象时，也就是只存在一个产品体系结构时，退化为Factory Method模式；<br>  当Factory Method模式中抽象工厂与具体工厂合并，提供一个统一的工厂来创建对象，并将创建对象的工厂设计为静态方法时，就退化为Simple Factory模式；</p>
</li>
</ul>
<h4 id="3-生成器（Builder）"><a href="#3-生成器（Builder）" class="headerlink" title="3. 生成器（Builder）"></a>3. 生成器（Builder）</h4><ul>
<li>意图（Intent）：<pre><code>  Separate the construction of a complex object from its representation so that the same construction process can create different representations.
  将一个复杂对象的构建（construction ）与它每一过程中的实现细节分离，使得同样的构建过程可以创建（create）出不同类型（types ）和形式（representations）的产品对象。
</code></pre>
</li>
</ul>
<h4 id="4-原型（Prototype）"><a href="#4-原型（Prototype）" class="headerlink" title="4. 原型（Prototype）"></a>4. 原型（Prototype）</h4><p>意图（Intent）：<br>Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p>
<h4 id="5-单例（Singleton）"><a href="#5-单例（Singleton）" class="headerlink" title="5. 单例（Singleton）"></a>5. 单例（Singleton）</h4><ul>
<li>意图（Intent）：<br>  Ensure a class only has one instance, and provide a global point of access to it.<br>  保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
</ul>
<h3 id="二、结构型模式（Structural-Patterns）"><a href="#二、结构型模式（Structural-Patterns）" class="headerlink" title="二、结构型模式（Structural Patterns）"></a>二、结构型模式（Structural Patterns）</h3><p>结构型模式（Structural Patterns）关注如何将类和对象组织在一起形成更加强大的结构。</p>
<p><strong>Structural class patterns</strong>: use inheritance to compose interfaces or implementations. </p>
<p><strong>structural object patterns</strong>: describe ways to compose objects to realize new functionality.</p>
<p>Composite: describes how to build a class hierarchy made up of classes for two kinds of objects: primitive and composite;</p>
<p>Proxy:  a proxy acts as a convenient surrogate or placeholder for another object</p>
<p>Flyweight: defines a structure for sharing objects.</p>
<p>Facade: shows how to make a single object represent an entire subsystem;</p>
<p>Bridge: separates an object’s abstraction from its implementation so that you can vary them independently;</p>
<p>Decorator: describes how to add responsibilities to objectsdynamically;</p>
<h4 id="6-适配器（Adapter）"><a href="#6-适配器（Adapter）" class="headerlink" title="6. 适配器（Adapter）"></a>6. 适配器（Adapter）</h4><p>将一个类的接口转化成客户端希望的另一个接口，从而使接口不兼容的类能够相互合作。<br>Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/structural_adapter.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Addapter模式.png</font></p>
</div>

<p><strong>适用场景：</strong></p>
<ul>
<li>当你希望使用某个类， 但是其接口与其他代码不兼容时， 可以使用适配器类。<br>适配器模式允许你创建一个中间层类， 其可作为代码与遗留类、 第三方类或提供怪异接口的类之间的转换器。</li>
<li>如果您需要复用这样一些类， 他们处于同一个继承体系， 并且他们又有了额外的一些共同的方法， 但是这些共同的方法不是所有在这一继承体系中的子类所具有的共性。</li>
</ul>
<p><strong>适配器模式概述</strong></p>
<p>​    在适配器模式中引入了一个被称为适配器（Adapter）的包装类，而它所包装的对象称为适配者（Adaptee），即被适配的类。</p>
<p><strong>优缺点：</strong></p>
<p>+ 单一职责原则：你可以将接口或数据转换代码从程序主要业务逻辑中分离。<br>- 开闭原则：只要客户端代码通过客户端接口与适配器进行交互， 你就能在不修改现有客户端代码的情况下在程序中添加新类型的适配器。<br>- 代码整体复杂度增加： 因为你需要新增一系列接口和类。 有时直接更改服务类使其与其他代码兼容会更简单。</p>
<p><strong>与其它模式的关系：</strong></p>
<ul>
<li><strong>桥接模式</strong>通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 而<strong>适配器模式</strong>通常在已有程序中使用， 让相互不兼容的类能很好地合作。</li>
<li><strong>适配器</strong>可以对已有对象的接口进行修改， <strong>装饰模式</strong>则能在不改变对象接口的前提下强化对象功能。 此外， 装饰还支持递归组合， 适配器则无法实现。</li>
<li><strong>适配器</strong>能为被封装对象提供不同的接口， <strong>代理模式</strong>能为对象提供相同的接口， <strong>装饰</strong>则能为对象提供加强的接口。</li>
<li><strong>外观模式</strong>为现有对象定义了一个新接口， <strong>适配器</strong>则会试图运用已有的接口。 适配器通常只封装一个对象， 外观通常会作用于整个对象子系统上。</li>
<li><strong>桥接</strong>、 <strong>状态模式</strong>和<strong>策略模式</strong> （在某种程度上包括<strong>适配器</strong>） 模式的接口非常相似。 实际上， 它们都基于<strong>组合模式</strong>——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
</ul>
<h4 id="7-桥接（Bridge）"><a href="#7-桥接（Bridge）" class="headerlink" title="7. 桥接（Bridge）"></a>7. 桥接（Bridge）</h4><p>将抽象部分与它的实现部分分离，使两者可以独立的变化。</p>
<p>Decouple an abstraction from its implementation so that the two can vary independently.</p>
<p>​    当在两个独立维度的层次结构中使用继承扩展类时，将导致代码复杂程度指数增长。桥接模式通过将继承改为组合的方式来解决这个问题。 具体来说， 就是抽取其中一个维度、只持有它的抽象引用，具体的实现部分可以动态替换。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/structural_bridge.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Bridge模式.png</font></p>
</div>

<h5 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>如果你想要拆分或重组一个具有多重功能的庞杂类 （例如能与多个数据库服务器进行交互的类）， 可以使用桥接模式。</li>
</ul>
<p>​    类的代码行数越多， 弄清其运作方式就越困难， 对其进行修改所花费的时间就越长。 一个功能上的变化可能需要在整个类范围内进行</p>
<p>修改， 而且常常会产生错误， 甚至还会有一些严重的副作用。</p>
<p>​    桥接模式可以将庞杂类拆分为几个类层次结构（class hierarchies）。 此后， 你可以独立地修改任意一个类层次结构而不会影响到其他</p>
<p>类层次结构。 这种方法可以简化代码的维护工作， 并将修改已有代码的风险降到最低。</p>
<ul>
<li>一个类存在两个独立变化的维度，且这两个维度都有扩展的需要。</li>
</ul>
<p>​    桥接建议将每个维度抽取为独立的类层次。 初始类将相关工作委派给属于对应类层次的对象， 无需自己完成所有工作。</p>
<ul>
<li>如果你需要在运行时切换不同实现方法， 可使用桥接模式。</li>
</ul>
<p>桥接模式可动态替换抽象对象的实现类， 从这个角度来说，和策略模式的效果一样。</p>
<h5 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h5><p>+ Decoupling interface and implementation. </p>
<p>实现部分并不会永久的和一个接口绑定，一个abstraction的实现部分（implementation）可以在运行期配置，甚至可以在运行期动态改变；</p>
<p>+ Improved extensibility. </p>
<p>你可以相互独立的扩展Abstraction和Implementor的层次结构；</p>
<p>+ Hiding implementation details from clients. </p>
<p>你可以对Clientsn隐藏实现的细节，例如implementor对象的共享信息和相应的引用计数机制。</p>
<p>-  You might make the code more complicated by applying the pattern to a highly cohesive class.</p>
<p>对高内聚的类使用该模式可能会让代码更加复杂。</p>
<h5 id="与其它模式的关系："><a href="#与其它模式的关系：" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li><p><strong>桥接模式</strong>通常会于开发前期进行设计， 使你能够将程序的各个部分独立开来以便开发。 然而<strong>适配器模式</strong>通常在已有程序中使用， 让相互不兼容的类能很好地合作。</p>
</li>
<li><p><strong>桥接、 状态模式和策略模式</strong> （在某种程度上包括<strong>适配器</strong>） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</p>
</li>
<li><p>你可以将<strong>抽象工厂模式</strong>和<strong>桥接</strong>搭配使用。 如果由桥接定义的抽象只能与特定实现合作， 这一模式搭配就非常有用。 在这种情况下， 抽象工厂可以对这些关系进行封装， 并且对客户端代码隐藏其复杂性。</p>
</li>
<li><p>你可以结合使用<strong>生成器模式</strong>和<strong>桥接模式</strong>： 主管类负责抽象工作， 各种不同的生成器负责实现工作。</p>
</li>
</ul>
<h4 id="8-组合（Composite）"><a href="#8-组合（Composite）" class="headerlink" title="8. 组合（Composite）"></a>8. 组合（Composite）</h4><p>将对象组合成树状结构，以表示“部分-整体”的层次结构。组合模式使得用户可以相同的方式对待单个对象和组合对象。</p>
<p>Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/structural_composite.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Composite模式.png</font></p>
</div>

<h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul>
<li>如果你需要实现树状对象结构，可以使用组合模式。</li>
</ul>
<p>组合模式为你提供了两种共享公共接口的基本元素类型： 简单叶节点和复杂容器。 容器中可以包含叶节点和其他容器。 这使得你可以构建树状嵌套递归对象结构。</p>
<ul>
<li>如果你希望客户端代码以相同方式处理简单和复杂元素， 可以使用该模式。</li>
</ul>
<p>组合模式中定义的所有元素共用同一个接口。 在这一接口的帮助下， 客户端不必在意其所使用的对象的具体类。</p>
<h5 id="与其它模式的关系"><a href="#与其它模式的关系" class="headerlink" title="与其它模式的关系"></a>与其它模式的关系</h5><ul>
<li><p>桥接模式、 状态模式和策略模式 （在某种程度上包括适配器模式） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</p>
</li>
<li><p>你可以在创建复杂组合树时使用生成器模式， 因为这可使其构造步骤以递归的方式运行。</p>
</li>
<li><p>责任链模式通常和组合模式结合使用。 在这种情况下， 叶组件接收到请求后， 可以将请求沿包含全体父组件的链一直传递至对象树的底部。</p>
</li>
<li><p>你可以使用迭代器模式来遍历组合树。</p>
</li>
<li><p>你可以使用访问者模式对整个组合树执行操作。</p>
</li>
<li><p>你可以使用享元模式实现组合树的共享叶节点以节省内存。</p>
</li>
<li><p>组合和装饰模式的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。</p>
</li>
</ul>
<p>​     装饰类似于组合， 但其只有一个子组件。 此外还有一个明显不同： 装饰为被封装对象添加了额外的职责， 组合仅对其子节点的结果进行了 “求和”。但是， 模式也可以相互合作： 你可以使用装饰来扩展组合树中特定对象的行为。</p>
<ul>
<li>大量使用组合和装饰的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</li>
</ul>
<h4 id="9-装饰（Decorator）"><a href="#9-装饰（Decorator）" class="headerlink" title="9. 装饰（Decorator）"></a>9. 装饰（Decorator）</h4><p>通过将对象（Wrappee Object）放入特殊封装对象（Wrapper Objects）为原对象增加新的行为。</p>
<p>Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/structural_decorator.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Decorator模式.png</font></p>
</div>



<h5 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h5><ul>
<li>如果你希望在无需修改代码的情况下即可使用对象， 且希望在运行时为对象新增额外的行为， 可以使用装饰模式。</li>
</ul>
<p>装饰能将业务逻辑组织为层次结构， 你可为各层创建一个装饰， 在运行时将各种不同逻辑组合成对象。 由于这些对象都遵循通用接口， 客户端代码能以相同的方式使用这些对象。</p>
<ul>
<li>如果用继承来扩展对象行为的方案难以实现或者根本不可行， 你可以使用该模式。</li>
</ul>
<p>许多编程语言使用 final最终关键字来限制对某个类的进一步扩展。 复用最终类已有行为的唯一方法是使用装饰模式： 用封装器对其进行封装。</p>
<h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><ul>
<li>你无需创建新子类即可扩展对象的行为。</li>
<li>你无需创建新子类即可扩展对象的行为。</li>
<li>你可以在运行时添加或删除对象的功能。</li>
<li>你可以用多个装饰封装对象来组合几种行为。</li>
<li>单一职责原则。 你可以将实现了许多不同行为的一个大类拆分为多个较小的类。</li>
<li>在封装器栈中删除特定封装器比较困难。</li>
<li>实现行为不受装饰栈顺序影响的装饰比较困难。</li>
<li>各层的初始化配置代码看上去可能会很糟糕。</li>
</ul>
<h5 id="与其它模式的关系-1"><a href="#与其它模式的关系-1" class="headerlink" title="与其它模式的关系"></a>与其它模式的关系</h5><ul>
<li><p><strong>适配器</strong>模式可以对已有对象的接口进行修改， <strong>装饰</strong>模式则能在不改变对象接口的前提下强化对象功能。 此外， 装饰还支持递归组合， 适配器则无法实现。</p>
</li>
<li><p><strong>适配器</strong>能为被封装对象提供不同的接口， <strong>代理模式</strong>能为对象提供相同的接口， <strong>装饰</strong>则能为对象提供加强的接口。</p>
</li>
<li><p><strong>责任链模式</strong>和<strong>装饰模式</strong>的类结构非常相似。 两者都依赖递归组合将需要执行的操作传递给一系列对象。 但是， 两者有几点重要的不同之处。</p>
<ul>
<li>责任链的管理者可以相互独立地执行一切操作， 还可以随时停止传递请求。 然而装饰着模式的各种装饰可以在遵循基本接口的情况下扩展对象的行为。 此外， 装饰无法中断请求的传递。</li>
</ul>
</li>
<li><p><strong>组合模式</strong>和<strong>装饰</strong>的结构图很相似， 因为两者都依赖递归组合来组织无限数量的对象。</p>
<ul>
<li>装饰类似于组合， 但其只有一个子组件。 此外还有一个明显不同： 装饰为被封装对象添加了额外的职责， 组合仅对其子节点的结果进行了 “求和”。</li>
<li>但是， 模式也可以相互合作： 你可以使用装饰来扩展组合树中特定对象的行为。</li>
</ul>
</li>
<li><p>大量使用<strong>组合</strong>和<strong>装饰</strong>的设计通常可从对于原型模式的使用中获益。 你可以通过该模式来复制复杂结构， 而非从零开始重新构造。</p>
</li>
<li><p><strong>装饰</strong>可让你更改对象的外表， <strong>策略</strong>模式则让你能够改变其本质。</p>
</li>
<li><p><strong>装饰</strong>和<strong>代理</strong>有着相似的结构， 但是其意图却非常不同。 这两个模式的构建都基于组合原则， 也就是说一个对象应该将部分工作委派给另一个对象。 两者之间的不同之处在于代理通常自行管理其服务对象的生命周期， 而装饰的生成则总是由客户端进行控制。</p>
</li>
</ul>
<h4 id="10-外观（Facade）"><a href="#10-外观（Facade）" class="headerlink" title="10. 外观（Facade）"></a>10. 外观（Facade）</h4><p>Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.<br>为包含许多活动部件的复杂子系统提供一个简单的接口。Facade定义了一个更高层次的接口、使得子系统更加易用。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/structural_facade.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Facade模式.png</font></p>
</div>

<h5 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h5><ul>
<li><p>如果你需要一个指向复杂子系统的直接接口， 且该接口的功能有限， 则可以使用外观模式。</p>
</li>
<li><p>如果需要将子系统组织为多层结构， 可以使用外观。</p>
<p>  创建外观来定义子系统中各层次的入口。 你可以要求子系统仅使用外观来进行交互， 以减少子系统之间的耦合。</p>
</li>
</ul>
<h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><ul>
<li>你可以让自己的代码独立于复杂子系统。</li>
<li>外观可能成为与程序中所有类都耦合的上帝对象。</li>
</ul>
<h5 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h5><ul>
<li><p>外观模式为现有对象定义了一个新接口， 适配器模式则会试图运用已有的接口。 适配器通常只封装一个对象， 外观通常会作用于整个对象子系统（subsystem of objects）上。</p>
</li>
<li><p>当只需对客户端代码隐藏子系统创建对象的方式时， 你可以使用抽象工厂模式来代替外观。</p>
</li>
<li><p>享元模式展示了如何生成大量的小型对象， 外观则展示了如何用一个对象来代表整个子系统。</p>
</li>
<li><p>外观和中介者模式的职责类似： 它们都尝试在大量紧密耦合的类中组织起合作。</p>
<ul>
<li>外观为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。</li>
<li>中介者将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。<br>  外观类通常可以转换为单例模式类， 因为在大部分情况下一个外观对象就足够了。</li>
</ul>
</li>
<li><p>外观与代理模式的相似之处在于它们都缓存了一个复杂实体并自行对其进行初始化。 代理与其服务对象遵循同一接口， 使得自己和服务对象可以互换， 在这一点上它与外观不同。</p>
</li>
</ul>
<h4 id="11-享元（Flyweight）"><a href="#11-享元（Flyweight）" class="headerlink" title="11. 享元（Flyweight）"></a>11. 享元（Flyweight）</h4><p>Use sharing to support large numbers of fine-grained objects efficiently.<br>享元是一种结构型设计模式， 它允许你在消耗少量内存的情况下支持大量对象。模式通过共享多个对象的部分状态来实现上述功能。 换句话来说， 享元会将不同对象的相同数据进行缓存以节省内存。</p>
<p>对象的常量数据通常被称为<em>内在状态（intrinsic state</em>）， 其位于对象内部， 只能被其它对象读取、而不能被修改。 而对象的其余状态—也即经常会被外部修改的状态，被称为<em>外在状态（</em>extrinsic state*.）*。</p>
<p>享元模式建议不在对象中存储外在状态， 而是将其传递给另外一个依赖于它的方法。</p>
<p>程序只在对象中保存内在状态， 以方便在不同情景下重用。 这些对象的区别仅在于其内在状态，因此你所需的对象数量会大大削减。 </p>
<p>由于享元对象可在不同的情景中使用， 你必须确保其状态不能被修改。 享元类的状态只能由构造函数的参数进行一次性初始化， 它不能对其他对象公开其设置器（setters）或公有成员变量（public fields ）。</p>
<h5 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h5><ul>
<li>当我们需要创建大量的相似对象，它们之间只有一少部分参数不同、其余大部分的参数都相同时，可以考虑适用享元模式；</li>
<li>我们需要控制创建大量对象时的内存消耗时，即希望通过创建较少的、可共享的对象来减少内存消耗。</li>
</ul>
<h5 id="优缺点：-1"><a href="#优缺点：-1" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>如果程序中有很多相似对象， 那么你将可以节省大量内存。</li>
<li>你可能需要牺牲执行速度来换取内存，因为他人每次调用享元方法时都需要重新计算部分情景数据。</li>
<li>代码会变得更加复杂。 团队中的新成员总是会问：  “为什么要像这样拆分一个实体的状态？”。</li>
</ul>
<h5 id="与其它模式的关系：-1"><a href="#与其它模式的关系：-1" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li>你可以使用享元模式实现组合模式树的共享叶节点以节省内存。</li>
<li>享元展示了如何生成大量的小型对象， 外观模式则展示了如何用一个对象来代表整个子系统。</li>
<li>如果你能将对象的所有共享状态简化为一个享元对象， 那么享元就和单例模式类似了。 但这两个模式有两个根本性的不同。<ul>
<li>单例只会有一个单例实体， 但是享元类可以有多个实体， 各实体的内在状态也可以不同。</li>
<li>单例对象可以是可变的。 享元对象是不可变的。</li>
</ul>
</li>
</ul>
<h4 id="12-代理（Proxy）"><a href="#12-代理（Proxy）" class="headerlink" title="12. 代理（Proxy）"></a>12. 代理（Proxy）</h4><p>Provide a surrogate or placeholder for another object to control access to it.<br>为源对象提供一个替代品或占位符，以实现对源对象的控制。<br>代理模式适合应用场景：</p>
<ol>
<li>延迟初始化（虚拟代理）<br> 如果你有一个偶尔使用的重量级服务对象，一直保持该对象运行会消耗系统资源时，可使用代理模式。</li>
<li>访问控制（保护代理）<br> 如果你只希望特定客户端使用服务对象，这里的对象可以是操作系统中非常重要对的部分，而客户端则是各种已启动的程序（包括恶意程序），此时可使用代理模式。代理可仅在客户端凭据满足要求时将请求传递给服务对象。</li>
<li>本地执行远程服务（远程代理）<br> 适用于服务对象位于远程服务器上的情形，代理通过网络传递客户端请求，负责处理所有与网络相关的复杂细节。</li>
<li>记录日志请求（日志记录代理）<br> 适用于当你需要保存对于服务对象的请求历史记录时。 代理可以在向服务传递请求前进行记录。</li>
<li>缓存结果代理（缓存代理）<br> 适用于需要缓存客户请求结果并对缓存生命周期进行管理时， 特别是当返回结果的体积非常大时。代理可对重复请求所需的相同结果进行缓存， 还可使用请求参数作为索引缓存的键值。</li>
<li>智能引用<br> 代理会将所有获取了指向服务对象或其结果的客户端记录在案。 代理会时不时地遍历各个客户端， 检查它们是否仍在运行。 如果相应的客户端列表为空， 代理就会销毁该服务对象， 释放底层系统资源。</li>
</ol>
<ul>
<li>与其它模式的关系<br>  Adaper能为封装对象（wrapped object）提供不同的接口；Proxy能为封装对象提供相同的接口；Decorator则能为之提供加强的接口。<br>  Facade与Proxy的相似之处在于它们都缓存了一个复杂实体（ complex entity）并且按照自己的方式进行实例化；不同之处是代理与其服务对象遵循同一接口， 使得自己和服务对象可以互换。<br>  Decorator与Proxy的不同之处在于代理通常自行管理其服务对象的生命周期，然后Decorator中装饰器的组合通常用客户端来控制。</li>
</ul>
<h3 id="三、行为模式（Behavioral-Patterns）"><a href="#三、行为模式（Behavioral-Patterns）" class="headerlink" title="三、行为模式（Behavioral Patterns）"></a>三、行为模式（Behavioral Patterns）</h3><p>Behavior模式侧重对象之间的交互和职责划分（Behavioral design patterns are concerned with algorithms and the assignment of responsibilities between objects）；</p>
<ol>
<li><p><strong>Behavior class patterns:</strong> 使用继承分发行为</p>
<p> Template Method: 父类定义算法的框架，子类通过继承父类的抽象方法提供具体实现；</p>
<p> Interpreter: 将语法表示为一种类层次结构（class hierarchy）；</p>
</li>
<li><p><strong>Behavioral object patterns</strong>：使用对象组合分发行为</p>
<p> Mediator：</p>
<p> Chain of Responsibility</p>
<p> Observer：</p>
</li>
<li><p><strong>Other patterns</strong>:  关注将行为封装成一个对象、然后将请求委托给它(encapsulating behavior in an object<br> and delegating requests to it)。</p>
</li>
</ol>
<p>​        Strategy: 将一个算法封装进对象；</p>
<p>​        Command：将一个请求封装进对象；</p>
<p>​        State: 封装一个对象的所有状态，使得当对象的状态发生改变时，对象可以改变他的行为。</p>
<p>​        Visitor: encapsulates behavior that would otherwise be distributed across classes;</p>
<p>​        Iterator:  abstractsthe way you accessand traverse objects in an aggregate;</p>
<h4 id="13-责任链（Chain-Of-Responsibility）"><a href="#13-责任链（Chain-Of-Responsibility）" class="headerlink" title="13. 责任链（Chain Of Responsibility）"></a>13. 责任链（Chain Of Responsibility）</h4><p><strong>Chain of Responsibility</strong> is a behavioral design pattern that lets you pass requests along a chain of handlers. Upon receiving a request, each handler decides either to process the request or to pass it to the next handler in the chain.</p>
<p>职责链允许你将请求沿着处理者链进行发送。 收到请求后， 每个处理者均可对请求进行处理， 或将其传递给链上的下个处理者。<br>责任链会将特定行为（particular behaviors）转化为称为处理者（handles）的独立对象。模式建议你将这些处理者连成一条链。 链上的每个处理者都持有下一处理者的引用（reference）。 </p>
<p>除了处理请求外， 处理者还负责沿着链传递请求。 请求会在链上移动， 直至所有处理者都有机会对其进行处理。处理者也可以决定不再沿着链传递请求， 这可高效地取消所有后续处理步骤。</p>
<h5 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h5><ul>
<li>当程序需要使用多种方式处理不同种类请求<strong>，</strong> 而且请求类型和顺序预先未知时，可以使用责任链模式。</li>
<li>当必须按特定顺序（particular order）执行多个处理者时， 可以使用该模式。因为你可以以任意顺序链接处理者，所有的请求都会按你设计的顺序精确执行。</li>
<li>当处理者的集合（the set of handlers）及其顺序需要在运行时进行改变， 可以使用责任链模式。你可以提供setters方法进行动态地添加、删除或者重排序。</li>
</ul>
<h5 id="优缺点：-2"><a href="#优缺点：-2" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>你可以控制请求处理的顺序。</li>
<li> 单一职责原则。 你可对发起操作和执行操作的类进行解耦。</li>
<li> 开闭原则。 你可以在不更改现有代码的情况下在程序中新增处理者。</li>
<li> 部分请求可能未被处理。</li>
</ul>
<h5 id="与其他模式的关系："><a href="#与其他模式的关系：" class="headerlink" title="与其他模式的关系："></a>与其他模式的关系：</h5><ul>
<li><p><strong>责任链（Chain of Responsibility</strong>）、<strong>命令行（Command）</strong>、<strong>中介者（Mediator）</strong>和<strong>观察者（Observer）</strong>都用于处理请求的发送者和接收者之间的不同连接方式：</p>
<ul>
<li><p>责任链按照顺序将请求动态传递给一系列的潜在接收者， 直到其中一名接收者对请求进行处理。</p>
</li>
<li><p>命令行模式在发送者和接收者之间建立了单向连接；</p>
</li>
<li><p>中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</p>
</li>
<li><p>观察者允许接收者动态地订阅或取消接收请求。</p>
</li>
</ul>
</li>
<li><p><strong>责任链</strong>通常和<strong>组合模式</strong>结合使用。在这种情况下， 当一个叶组件（leaf component）接收到请求后， 可以将请求沿包含全体父组件（all of the parent components）的链一直传递至对象树的底部。</p>
</li>
<li><p><strong>责任链</strong>的管理者可使用<strong>命令模式</strong>实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。</p>
<p>  还有另外一种实现方式， 那就是请求自身就是一个<em>命令</em>对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。</p>
</li>
<li><p><strong>责任链</strong>和<strong>装饰模式</strong>有非常相似的类结构（class structures），两者都依赖递归组合（recursive composition）将执行操作（execution）传递给一系列对象，但是也有几点重要的不同：</p>
<ul>
<li>责任链的管理者可以相互独立地执行一切操作， 也可以随时停止传递请求。 而装饰模式的装饰者（Decorators）可以在遵循基本接口的情况下扩展对象的行为，但无法中断请求的传递。</li>
</ul>
</li>
</ul>
<h4 id="14-命令（Command）"><a href="#14-命令（Command）" class="headerlink" title="14. 命令（Command）"></a>14. 命令（Command）</h4><p>Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<br>将一个请求封装为一个对象，从而使可以将请求作为函数的参数传递、延迟请求执行或者将其放入队列中、记录请求日志，以及支持撤销操作。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/behavior_command.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Command模式.png</font></p>
</div>


<h5 id="适用场景：-1"><a href="#适用场景：-1" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>如果你需要将操作（operations）转化为参数化对象时，可使用命令模式。<ul>
<li>Command模式可以将一个特定的方法调用（method call）转换成一个独立对象。你可以将commands作为函数的方法进行传递、将其存储在其它对象中、在运行时切换已链接的命令等等。</li>
</ul>
</li>
<li>如果你想要将操作放入队列中、 调度操作的执行或者远程执行操作， 可使用命令模式。</li>
<li>如果你想要实现操作回滚功能， 可使用命令模式。</li>
</ul>
<h5 id="优缺点：-3"><a href="#优缺点：-3" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>单一职责原则。 你可以解耦触发和执行操作的类。</li>
<li> 开闭原则。 你可以在不修改已有客户端代码的情况下在程序中创建新的命令。</li>
<li> 你可以实现撤销和恢复功能。</li>
<li> 你可以实现操作的延迟执行。</li>
<li> 你可以将一组简单命令组合成一个复杂命令。</li>
<li>代码可能会变得更加复杂， 因为你在发送者和接收者之间引入了一个新的层级（layer）。</li>
</ul>
<h5 id="与其它模式的关系-2"><a href="#与其它模式的关系-2" class="headerlink" title="与其它模式的关系"></a>与其它模式的关系</h5><ul>
<li><p><strong>责任链（Chain of Responsibility</strong>）、<strong>命令行（Command）</strong>、<strong>中介者（Mediator）</strong>和<strong>观察者（Observer）</strong>都用于处理请求的发送者和接收者之间的不同连接方式：</p>
<ul>
<li>责任链按照顺序将请求动态传递给一系列的潜在接收者， 直到其中一名接收者对请求进行处理。</li>
<li>命令行模式在发送者和接收者之间建立了单向连接；</li>
<li>中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li>
<li>观察者允许接收者动态地订阅或取消接收请求。</li>
</ul>
</li>
<li><p><strong>责任链</strong>的管理者可使用<strong>命令行模式</strong>实现。 在这种情况下， 你可以对由请求代表的同一个上下文对象执行许多不同的操作。</p>
<p>  还有另外一种实现方式， 那就是请求自身就是一个<em>命令</em>对象。 在这种情况下， 你可以对由一系列不同上下文连接而成的链执行相同的操作。</p>
</li>
<li><p>你可以使用<strong>命令</strong>行和<strong>备忘录模式（Memento）</strong>的组合来实现 “撤销”。 在这种情况下， 命令用于在目标对象上执行各种不同的操作， 备忘录用来保存目标对象在一条命令执行前的状态。</p>
</li>
<li><p><strong>命令行</strong>和<strong>策略模式</strong>有几分相似之处，策略模式通常用于描述完成同一功能的多种方式，从而使你可以对单个的上下文类（a single context class）切换算法。</p>
</li>
<li><p><strong>原型模式</strong>有助于你将命令的多个副本保存到历史记录。</p>
</li>
<li><p>你可以将<strong>访问者模式</strong>视为<strong>命令行模式</strong>的增强版本，它可以对不同类的多种实例执行不同的操作。</p>
</li>
</ul>
<h4 id="15-解释器（Interpreter）"><a href="#15-解释器（Interpreter）" class="headerlink" title="15. 解释器（Interpreter）"></a>15. 解释器（Interpreter）</h4><p>Given a language, define a represention for its grammar along with an interpreter that uses the representation to interpret sentences in the language.<br>给定一种语言，定义它的语法的一种表示，同时定义一个解释器（interpreter），该解释器使用定义好的语法表示（grammar represention）来解释语言中的句子。</p>
<div align="center">
  <img src="../../images/design_patterns/behavior_interpretor.png" width = 70%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Interpretor模式.png</font></p>
</div>

<h5 id="适用场景：-2"><a href="#适用场景：-2" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>如果某个简单的语言需要解释执行、而且可以将该语言中的语句表示为一个<strong>抽象语法树</strong>时，可以考虑使用解释器模式。</li>
<li>在某些特定的领域出现<strong>不断重复</strong>的问题时，可以将该领域的问题转化为某种语法规则下的语句，然后构建解释器来解释该语句。</li>
</ul>
<h5 id="优缺点：-4"><a href="#优缺点：-4" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li><p>改变和扩展语法比较容易</p>
<p>  当我们想对文法规则进行扩展延伸时，只需要增加相应的非终结符解释器，并在构建抽象语法树时，使用新增的解释器对象进行具体的解释即可，非常方便。</p>
</li>
<li><p>复杂的语法难以维护，如果语法规则数目太多 ,  会难以管理和维护 ;</p>
<p>  因为对于每一种文法都可以对应至少一个解释器，其会生成大量的类，导致后期维护困难。同时，对于过于复杂的语法，构建其抽象语法树会显得异常繁琐，甚至有可能会出现需要构建多棵抽象语法树的情况，因此，对于复杂的语法并不推荐使用解释器模式。</p>
</li>
</ul>
<h5 id="与其它模式的关系：-2"><a href="#与其它模式的关系：-2" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><h4 id="16-迭代器（Iterator）"><a href="#16-迭代器（Iterator）" class="headerlink" title="16. 迭代器（Iterator）"></a>16. 迭代器（Iterator）</h4><p>Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.<br>提供一种方法，在不暴露一个聚合对象（aggregate object）的底层表示形式（列表、 栈和树等） 的情况下，遍历集合中所有的元素。</p>
<p>迭代器模式的主要思想是将集合的遍历行为提取为称为Iterator的独立对象。</p>
<div align="center">
  <img src="../../images/design_patterns/behavior_iterator.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Iterator模式.png</font></p>
</div>

<h5 id="适用场景：-3"><a href="#适用场景：-3" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>当集合背后为复杂的数据结构， 且你希望对客户端隐藏其复杂性时 （出于使用便利性或安全性的考虑）， 可以使用迭代器模式。</li>
</ul>
<p>​    迭代器封装了与复杂数据结构进行交互的细节， 为客户端提供多个访问集合元素的简单方法。 这种方式不仅对客户端来说非常方便， 而且能避免客户端在直接与集合交互时执行错误或有害的操作， 从而起到保护集合的作用。</p>
<ul>
<li>使用该模式可以减少程序中重复的遍历代码。</li>
</ul>
<p>​    重要迭代算法的代码往往体积非常庞大。 当这些代码被放置在程序业务逻辑中时， 它会让原始代码的职责模糊不清， 降低其可维护性。 因此， 将遍历代码移到特定的迭代器中可使程序代码更加精炼和简洁。</p>
<ul>
<li>如果你希望代码能够遍历不同的甚至是无法预知的数据结构， 可以使用迭代器模式。</li>
</ul>
<p>该模式为集合和迭代器提供了一些通用接口。 如果你在代码中使用了这些接口， 那么将其他实现了这些接口的集合和迭代器传递给它时， 它仍将可以正常运行。</p>
<h5 id="优缺点：-5"><a href="#优缺点：-5" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>单一职责原则。 通过将体积庞大的遍历算法代码抽取为独立的类， 你可对客户端代码和集合进行整理。</li>
<li>开闭原则。 你可实现新型的集合和迭代器并将其传递给现有代码， 无需修改现有代码。</li>
<li>你可以并行遍历同一集合， 因为每个迭代器对象都包含其自身的遍历状态。</li>
<li>相似的， 你可以暂停遍历并在需要时继续。</li>
<li>如果你的程序只与简单的集合进行交互， 应用该模式可能会矫枉过正。</li>
<li>对于某些特殊集合， 使用迭代器可能比直接遍历的效率低。</li>
</ul>
<h5 id="与其它模式的关系：-3"><a href="#与其它模式的关系：-3" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li><p>你可以使用迭代器模式来遍历组合模式树。</p>
</li>
<li><p>你可以同时使用工厂方法模式和迭代器来让子类集合返回不同类型的迭代器， 并使得迭代器与集合相匹配。</p>
</li>
<li><p>你可以同时使用备忘录模式和迭代器来获取当前迭代器的状态， 并且在需要的时候进行回滚。</p>
</li>
<li><p>可以同时使用访问者模式和迭代器来遍历复杂数据结构， 并对其中的元素执行所需操作， 即使这些元素所属的类完全不同。</p>
</li>
</ul>
<h4 id="17-中介者（Mediator）"><a href="#17-中介者（Mediator）" class="headerlink" title="17. 中介者（Mediator）"></a>17. 中介者（Mediator）</h4><p>Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.<br>用一个中介对象来封装一系列对象的交互。Mediator使得各对象不需要显式的相互引用，从而使其松散耦合，而且可以独立地改变它们之间的交互。<br>中介者让一个程序的不同组件（components）通过特殊的Mediator对象进行间接的沟通，从而减少组件间的相互依赖。<br>中介者让你能在单个中介者对象中封装多个对象间的复杂关系网。类所拥有的依赖关系越少，就越易于修改、扩展和复用。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/behavior_mediator.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Mediator模式.png</font></p>
</div>


<h5 id="适用场景：-4"><a href="#适用场景：-4" class="headerlink" title="适用场景："></a>适用场景：</h5><ol>
<li>当一些对象和其他对象紧密耦合以致难以对其进行修改时，可使用中介者模式；</li>
<li>当组件因过于依赖其他组件，而无法在不同应用中复用时，可使用中介者模式；</li>
<li>如果为了能在不同情景下复用一些基本行为， 导致你需要被迫创建大量组件子类时， 可使用中介者模式。</li>
</ol>
<h5 id="优缺点：-6"><a href="#优缺点：-6" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>单一职责原则。 你可以将多个组件间的交流抽取到同一位置， 使其更易于理解和维护。</li>
<li>开闭原则。 你无需修改实际组件就能增加新的中介者。</li>
<li>你可以减轻应用中多个组件间的耦合情况。</li>
<li>你可以更方便地复用各个组件。</li>
<li>一段时间后， 中介者可能会演化成为上帝对象（God Object.）。</li>
</ul>
<h5 id="与其它模式的关系：-4"><a href="#与其它模式的关系：-4" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li><p><strong>责任链（Chain of Responsibility</strong>）、<strong>命令行（Command）</strong>、<strong>中介者（Mediator）</strong>和<strong>观察者（Observer）</strong>都用于处理请求的发送者和接收者之间的不同连接方式：</p>
<ul>
<li>责任链按照顺序将请求动态传递给一系列的潜在接收者， 直到其中一名接收者对请求进行处理。</li>
<li>命令行模式在发送者和接收者之间建立了单向连接；</li>
<li>中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li>
<li>观察者允许接收者动态地订阅或取消接收请求。</li>
</ul>
</li>
<li><p>外观模式和中介者的职责类似： 它们都尝试在大量紧密耦合的类中组织起合作。</p>
<ul>
<li>外观为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。</li>
<li>中介者将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。</li>
</ul>
</li>
<li><p>中介者和观察者之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</p>
</li>
</ul>
<p>​        中介者的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 观察者的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p>
<p>​        有一种流行的中介者模式实现方式依赖于观察者。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当中介者以这种方式实现时， 它可能看上去与观察者非常相似。</p>
<p>​        当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和观察者并不相同， 但这仍是一种中介者模式。</p>
<p>​        假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p>
<h4 id="18-备忘录（Memento）"><a href="#18-备忘录（Memento）" class="headerlink" title="18. 备忘录（Memento）"></a>18. 备忘录（Memento）</h4><p>Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.<br>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将该对象恢复到原来保存的状态。</p>
<h4 id="19-观察者（Observer）"><a href="#19-观察者（Observer）" class="headerlink" title="19. 观察者（Observer）"></a>19. 观察者（Observer）</h4><p>定义对象间的一种一对多的关系，使得当一个对象改变状态时，所有依赖于它的对象都会得到通知并被自动更新。</p>
<p>Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.</p>
<h5 id="适用场景：-5"><a href="#适用场景：-5" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li><p>当一个对象状态的改变需要改变其他对象， 或实际对象是事先未知的或动态变化的时， 可使用观察者模式。</p>
</li>
<li><p>当应用中的一些对象必须观察其他对象时， 可使用该模式。 但仅能在有限时间内或特定情况下使用。</p>
<p>订阅列表是动态的， 因此订阅者可随时加入或离开该列表。</p>
</li>
</ul>
<h5 id="优缺点：-7"><a href="#优缺点：-7" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>开闭原则。 你无需修改发布者代码就能引入新的订阅者类 （如果是发布者接口则可轻松引入发布者类）。</li>
<li>你可以在运行时建立对象之间的联系。</li>
<li>订阅者的通知顺序是随机的。</li>
</ul>
<h5 id="与其它模式的关系：-5"><a href="#与其它模式的关系：-5" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li>责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</li>
</ul>
<p>责任链按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</p>
<p>命令在发送者和请求者之间建立单向连接。中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</p>
<p>观察者允许接收者动态地订阅或取消接收请求。</p>
<ul>
<li>中介者和观察者之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</li>
</ul>
<p>中介者的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 观察者的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</p>
<p>有一种流行的中介者模式实现方式依赖于观察者。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当中介者以这种方式实现时， 它可能看上去与观察者非常相似。</p>
<p>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和观察者并不相同， 但这仍是一种中介者模式。</p>
<p>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</p>
<h4 id="20-状态（State）"><a href="#20-状态（State）" class="headerlink" title="20. 状态（State）"></a>20. 状态（State）</h4><p>Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.<br>允许一个对象在它的内部状态改变时改变其行为，使其看上去就行改变了自身所属的类一样。<br>该模式将与状态相关的行为抽取到独立的状态类中， 让原对象将工作委派给这些类的实例， 而不是自行进行处理。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/behavior_state.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：State模式.png</font></p>
</div>


<h5 id="适用场景：-6"><a href="#适用场景：-6" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>如果一个对象基于当前状态会有不同的行为、且状态数量众多，与状态相关的代码会频繁的变更时，可使用状态模式；<ul>
<li>State模式建议你将所有特定于状态的代码抽取到一组独立的类中。 这样一来， 你可以在独立于其他状态的情况下添加新状态或修改已有状态， 从而减少维护成本。</li>
</ul>
</li>
<li>如果某个类需要根据成员变量的当前值改变自身行为， 从而需要使用大量的条件语句时， 可使用该模式。<ul>
<li>状态模式会将这些条件语句的分支抽取到相应状态类的方法中。 同时， 你还可以清除主要类中与特定状态相关的临时成员变量和帮手方法代码。</li>
</ul>
</li>
<li>当相似状态和基于条件的状态机转换中存在许多重复代码时， 可使用状态模式。<ul>
<li>状态模式通过组成状态类的层级结构，将公用代码抽取到抽象基类中，从而减少重复代码。</li>
</ul>
</li>
</ul>
<h5 id="优缺点：-8"><a href="#优缺点：-8" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>单一职责原则。 将与特定状态相关的代码放在单独的类中。</li>
<li>开闭原则。 无需修改已有状态类和上下文就能引入新状态。</li>
<li>通过消除臃肿的状态机条件语句简化上下文的代码。 </li>
<li> 如果状态机只有很少的几个状态， 或者很少发生改变， 那么应用该模式可能会显得小题大作。</li>
</ul>
<h5 id="与其它模式的关系：-6"><a href="#与其它模式的关系：-6" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li>桥接模式、 状态模式和策略模式 （在某种程度上包括适配器模式） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
<li>状态可被视为策略的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 策略使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 然而，状态模式没有限制具体状态之间的依赖， 且允许它们在需要时改变上下文（context）的状态。</li>
</ul>
<h4 id="21-策略（Strategy）"><a href="#21-策略（Strategy）" class="headerlink" title="21. 策略（Strategy）"></a>21. 策略（Strategy）</h4><p>定义一系列算法，将每一个算法封装起来，并使它们可以相互替换。策略模式让算法独立于使用它的客户而变化。</p>
<p>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/behavior_strategy.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Strategy模式.png</font></p>
</div>


<h5 id="适用场景：-7"><a href="#适用场景：-7" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>当你想使用对象中各种不同的算法变体， 并希望能在运行时切换算法时， 可使用策略模式。<ul>
<li>策略模式让你能够将对象关联至不同的子类对象，从而间接地在运行时修改对象行为。</li>
</ul>
</li>
<li>当你有许多仅在执行某些行为时略有不同的相似类时， 可使用策略模式。<ul>
<li>策略模式让你能将变化的行为抽取到一个独立类层次结构（class hierarchy）中， 并将原来的多个类合并成同一个， 从而减少重复代码。</li>
</ul>
</li>
<li>如果算法在上下文的逻辑中不是特别重要， 使用该模式能将类的业务逻辑与其算法实现细节隔离开来。<ul>
<li>策略模式让你能将各种算法的代码、 内部数据和依赖关系与其他代码隔离开来。 不同客户端可通过一个简单接口执行算法， 并能在运行时进行切换。</li>
</ul>
</li>
<li>当类中使用了复杂条件运算符以在同一算法的不同变体中切换时， 可使用该模式。</li>
</ul>
<h5 id="优缺点：-9"><a href="#优缺点：-9" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>你可以在运行时切换对象内的算法。</li>
<li>你可以将算法的实现和使用算法的代码隔离开来。</li>
<li>你可以使用组合来代替继承。</li>
<li>开闭原则。 你无需对上下文进行修改就能够引入新的策略。</li>
<li>如果你的算法极少发生改变， 那么没有任何理由引入新的类和接口。 使用该模式只会让程序过于复杂。</li>
<li>客户端必须知晓策略间的不同——它需要选择合适的策略。</li>
<li>许多现代编程语言支持函数类型功能， 允许你在一组匿名函数中实现不同版本的算法。 这样， 你使用这些函数的方式就和使用策略对象时完全相同， 无需借助额外的类和接口来保持代码简洁。</li>
</ul>
<h5 id="与其它模式的关系：-7"><a href="#与其它模式的关系：-7" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li>桥接模式、 状态模式和策略模式 （在某种程度上包括适配器模式） 模式的接口非常相似。 实际上， 它们都基于组合模式——即将工作委派给其他对象， 不过也各自解决了不同的问题。 模式并不只是以特定方式组织代码的配方， 你还可以使用它们来和其他开发者讨论模式所解决的问题。</li>
<li>命令模式和策略模式看上去很像， 因为两者都能通过某些行为来参数化对象。 但是， 它们的意图有非常大的不同。<ul>
<li>你可以使用命令来将任何操作转换为对象。 操作的参数将成为对象的成员变量。 你可以通过转换来延迟操作的执行、 将操作放入队列、 保存历史命令或者向远程服务发送命令等。而策略通常可用于描述完成某件事的不同方式， 让你能够在同一个上下文类中切换算法。</li>
</ul>
</li>
<li>装饰模式可让你更改对象的外表， 策略则让你能够改变其本质。</li>
<li>模板方法模式基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 策略基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 模板方法在类层次（class level）上运作， 因此它是静态的。 策略在对象层次（object level）上运作， 使你在运行时切换行为。</li>
<li>状态可被视为策略的扩展。 两者都基于组合机制： 它们都通过将部分工作委派给 “帮手” 对象来改变其在不同情景下的行为。 策略使得这些对象相互之间完全独立， 它们不知道其他对象的存在。 然而，状态模式没有限制具体状态之间的依赖， 且允许它们在需要时改变上下文（context）的状态。</li>
</ul>
<h4 id="22-模板方法（Template-Method）"><a href="#22-模板方法（Template-Method）" class="headerlink" title="22. 模板方法（Template Method）"></a>22. 模板方法（Template Method）</h4><p>Define the skeleton of an algorithm in an operation, deferring some steps to subclasses.Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.<br>在超类中定义了一个算法的框架，允许子类在不修改结构的情况下重写算法的特定步骤。</p>
<div align="center">
  <img src="https://xifengcoder.github.io/images/design_patterns/behavior_template.png" width = 80%>
  <p><font size=2 color=gray style="border-bottom:1px solid #eee;padding:6px;">图：Template模式.png</font></p>
</div>


<h5 id="适用场景：-8"><a href="#适用场景：-8" class="headerlink" title="适用场景："></a>适用场景：</h5><ul>
<li>当你希望客户端只是扩展某个特定的步骤、而不是整个算法或其结构时，可使用模板方法模式。</li>
<li>当多个类的算法除一些细微不同之外几乎完全一样时， 你可使用该模式。<ul>
<li>在将算法转化为模板方法时，你可将相似的步骤提取到超类中以去除重复的代码，子类间各不同的代码可继续保留在各子类中。</li>
</ul>
</li>
</ul>
<h5 id="优缺点：-10"><a href="#优缺点：-10" class="headerlink" title="优缺点："></a>优缺点：</h5><ul>
<li>你可仅允许客户端重写一个大型算法中的特定部分， 使得算法其他部分修改对其所造成的影响减小。</li>
<li> 你可将重复代码提取到一个超类中。</li>
<li> 部分客户端可能会受到算法框架的限制。</li>
<li> 通过子类抑制默认步骤实现可能会导致<strong>违反里氏替换原则</strong>。</li>
<li> 模板方法中的步骤越多， 其维护工作就可能会越困难。</li>
</ul>
<h5 id="与其它模式的关系：-8"><a href="#与其它模式的关系：-8" class="headerlink" title="与其它模式的关系："></a>与其它模式的关系：</h5><ul>
<li><p>工厂方法模式是模板方法模式的一种特殊形式。 同时， 工厂方法可以作为一个大型模板方法中的一个步骤。</p>
</li>
<li><p>模板方法基于继承机制： 它允许你通过扩展子类中的部分内容来改变部分算法。 策略模式基于组合机制： 你可以通过对相应行为提供不同的策略来改变对象的部分行为。 模板方法在类层次上运作， 因此它是静态的。 策略在对象层次上运作， 因此允许在运行时切换行为。</p>
</li>
</ul>
<h4 id="23-访问者（Visitor）"><a href="#23-访问者（Visitor）" class="headerlink" title="23. 访问者（Visitor）"></a>23. 访问者（Visitor）</h4><p>Represent an operation to be performed on the elements of an object structure.Visitor lets you define a new operation without changing the classes of the elements on which it operates.<br>允许你在不修改已有代码的情况下，向已有类层次结构中增加新的行为。<br>Visitor模式建议将新行为放在一个称为Visitor的独立类中，而不是试图将其整合到已有类中。需要执行操作的源对象（original object ）将作为参数传递给Visitor的方法的，从而使改方法能访问源对象的一切必要数据。<br>Visitor类可以定义一组 （而不是一个） 方法， 且每个方法可接收不同类型的参数。<br>实现方式：</p>
<ol>
<li>在Visitor接口中声明一组“访问”方法，分别对应程序中的每个具体元素类；</li>
<li>声明Element接口，在其中添加“accept”方法，接收一个Visitor对象作为参数。</li>
<li>在所有具体的Concrete Element类中实现“accept”方法，这些方法必须将调用重定向到Visitor对象的的visitXXX方法中，其中visitXXX方法的参数为当前的Concrete Element类。</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令操作总结</title>
    <url>/2022/05/20/git%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之位运算</title>
    <url>/2022/05/15/bit_operation/</url>
    <content><![CDATA[<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="x-amp-x"><a href="#x-amp-x" class="headerlink" title="x &amp; (-x)"></a>x &amp; (-x)</h5><p>仅保留x中最右边的1，其它位全置0。举例：x为二进制数0000 0100 1100，则x &amp; (-x)的结果为：0000 0000 0100。</p>
<h4 id="260-只出现一次的数字-III"><a href="#260-只出现一次的数字-III" class="headerlink" title="260. 只出现一次的数字 III"></a><a href="https://leetcode.cn/problems/single-number-iii/">260. 只出现一次的数字 III</a></h4><p>给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 任意顺序 返回答案。</p>
<p>进阶：你的算法应该具有线性时间复杂度。你能否仅使用常数空间复杂度来实现？</p>
<p>示例 1：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,1,3,2,5]</span></span><br><span class="line">输出：<span class="comment">[3,5]</span></span><br><span class="line">解释：<span class="comment">[5, 3]</span> 也是有效的答案。</span><br></pre></td></tr></table></figure>


<p>示例 2：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[-1,0]</span></span><br><span class="line">输出：<span class="comment">[-1,0]</span></span><br></pre></td></tr></table></figure>

<p>示例 3：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">输入：nums = <span class="comment">[0,1]</span></span><br><span class="line">输出：<span class="comment">[1,0]</span></span><br></pre></td></tr></table></figure>



<p>提示：</p>
<ul>
<li>2 &lt;= nums.length &lt;= 3 * 104</li>
<li>-231 &lt;= nums[i] &lt;= 231 - 1</li>
<li>除两个只出现一次的整数外，nums 中的其他数字都出现两次</li>
</ul>
<p>解题思路：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] singleNumber(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            result ^= num;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> diffPos = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((result &amp; (<span class="number">1</span> &lt;&lt; i)) != <span class="number">0</span>) &#123;</span><br><span class="line">                diffPos = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span> , b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>((num &amp; (<span class="number">1</span> &lt;&lt; diffPos)) != <span class="number">0</span>) &#123;</span><br><span class="line">                a ^= num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                b ^= num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;a, b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/single-number-iii">https://leetcode.cn/problems/single-number-iii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Android OpenGLES基础</title>
    <url>/2022/04/26/opengles_android/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定了渲染时索引值为index的顶点属性数组的数据格式和位置。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 指定要修改的顶点属性的索引值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> size 指定顶点属性的大小。顶点属性是一个vec3，它由3个值组成，所以大小是3。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 指定数据的类型，这里是GL_FLOAT。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> normalized 是否希望数据被标准化(Normalize)。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> stride 步长，它告诉我们在连续的顶点属性组之间的间隔。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ptr 位置数据缓冲区。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">glVertexAttribPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> index,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> normalized,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> stride,</span></span></span><br><span class="line"><span class="params"><span class="function">    java.nio.Buffer ptr</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>return the location of an attribute variable</p>
<h4 id="OpenGL-坐标系"><a href="#OpenGL-坐标系" class="headerlink" title="OpenGL 坐标系"></a>OpenGL 坐标系</h4><p>按照约定，OpenGL是一个右手坐标系。最基本的就是说正x轴在你的右手边，正y轴往上而正z轴是往后的。想象你的屏幕处于三个轴的中心且正z轴穿过你的屏幕朝向你。坐标系画起来如下：</p>
<p><img src="http://learnopengl.com/img/getting-started/coordinate_systems_right_handed.png" alt="coordinate_systems_right_handed"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实际加载纹理</span></span><br><span class="line">GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, <span class="comment">// 纹理类型，在OpenGLES中必须为GL10.GL_TEXTURE_2D</span></span><br><span class="line">                   <span class="number">0</span>, <span class="comment">// 纹理的层次，0表示基本图像层，可以理解为直接贴图</span></span><br><span class="line">                   bmp, <span class="comment">// 纹理图像</span></span><br><span class="line">                   <span class="number">0</span> <span class="comment">// 纹理边框尺寸</span></span><br><span class="line">                  );</span><br></pre></td></tr></table></figure>



<p>加载图片纹理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载图片纹理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bmp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTextureIdByBitmap</span><span class="params">(Bitmap bmp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] textures = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">    GLES20.glGenTextures(<span class="number">1</span>, textures, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> textureId = textures[<span class="number">0</span>];</span><br><span class="line">    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);</span><br><span class="line">    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_NEAREST);</span><br><span class="line">    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);</span><br><span class="line">    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);</span><br><span class="line">    GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);</span><br><span class="line">    GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, <span class="number">0</span>, bmp, <span class="number">0</span>);</span><br><span class="line">    bmp.recycle();</span><br><span class="line">    <span class="keyword">return</span> textureId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置相机位置/设置的是 View矩阵.决定摄影机的空间位置.</span></span><br><span class="line"><span class="comment">// 我们把相机放在世界坐标系的(0, 0, -3)这个点，</span></span><br><span class="line"><span class="comment">// 然后观察的目标位置在点(0.0, 0.0, 0.0)，即世界坐标系的原点。</span></span><br><span class="line"><span class="comment">// 同时我们还需要指定一个「头朝上」的方向，这在代码里设置的是向量(0.0, -1.0, 0.0)指向「上」的方向。</span></span><br><span class="line">Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">3</span>,</span><br><span class="line">                <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>,</span><br><span class="line">                <span class="number">0f</span>, -<span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLookAtM</span><span class="params">(<span class="keyword">float</span>[] rm, <span class="keyword">int</span> rmOffset,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">float</span> eyeX, <span class="keyword">float</span> eyeY, <span class="keyword">float</span> eyeZ,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">float</span> centerX, <span class="keyword">float</span> centerY, <span class="keyword">float</span> centerZ, <span class="keyword">float</span> upX, <span class="keyword">float</span> upY,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">float</span> upZ)</span></span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 围绕xyz组成的轴旋转角度a创建一个矩阵rm，把结果放到矩阵rm中。</span></span><br><span class="line"><span class="comment"> * Creates a matrix for rotation by angle a (in degrees) around the axis (x, y, z).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRotateM</span><span class="params">(<span class="keyword">float</span>[] rm, <span class="keyword">int</span> rmOffset,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">float</span> a, <span class="keyword">float</span> x, <span class="keyword">float</span> y, <span class="keyword">float</span> z)</span> </span>&#123;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * define an array of generic vertex attribute data</span></span><br><span class="line"><span class="comment"> * index: mPositionHandle, Specifies the index of the generic vertex attribute to be modified.</span></span><br><span class="line"><span class="comment"> * size: 数据的维数(COORDS_PER_VERTEX)</span></span><br><span class="line"><span class="comment"> * type: 数据的类型, 即GLES20.GL_FLOAT</span></span><br><span class="line"><span class="comment"> * normalized: 是否需要归一化(false)</span></span><br><span class="line"><span class="comment"> * stride: 步长，即连续顶点偏移量(COORDS_PER_VERTEX * 4)</span></span><br><span class="line"><span class="comment"> * pointer: 起始位置在缓冲区的偏移量(mVertexBuffer)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">glVertexAttribPointer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> indx,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> type,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">boolean</span> normalized,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">int</span> stride,</span></span></span><br><span class="line"><span class="params"><span class="function">    java.nio.Buffer ptr</span></span></span><br><span class="line"><span class="params"><span class="function">)</span> </span>&#123;</span><br></pre></td></tr></table></figure>



<h5 id="向量（Vectors）"><a href="#向量（Vectors）" class="headerlink" title="向量（Vectors）"></a>向量（Vectors）</h5><p>向量的长度</p>
<p><img src="/images/vector_length.png" alt="vector_length"></p>
<center><font size=2  color=gray>图1：LeakCanary内存泄漏检测图</font></center>

<p>有一个特殊类型的向量叫做单位向量(Unit Vector)。单位向量有一个特别的性质——它的长度是1。我们可以用任意向量的每个分量除以向量的长度得到它的单位向量n̂ ：</p>
<p><img src="/images/unit_vector.png" alt="unit_vector"></p>
<p>我们把这种方法叫做一个向量的标准化(Normalizing)。单位向量头上有一个^样子的记号。通常单位向量会变得很有用，特别是在我们只关心方向不关心长度的时候（如果改变向量的长度，它的方向并不会改变）。</p>
<p>向量点乘</p>
<p>两个向量的点乘等于它们的数乘结果乘以两个向量之间夹角的余弦值。</p>
<p><img src="/images/vector_dot_product.png" alt="vector_dot_product"></p>
<h4 id="叉乘"><a href="#叉乘" class="headerlink" title="叉乘"></a>叉乘</h4><p>叉乘只在3D空间中有定义，它需要两个不平行向量作为输入，生成一个正交于两个输入向量的第三个向量。如果输入的两个向量也是正交的，那么叉乘之后将会产生3个互相正交的向量。接下来的教程中这会非常有用。下面的图片展示了3D空间中叉乘的样子：</p>
<p><img src="/images/vector_cross_product1.png" alt="vector_cross_product"></p>
<p>不同于其他运算，如果你没有钻研过线性代数，可能会觉得叉乘很反直觉，所以只记住公式就没问题啦（记不住也没问题）。下面你会看到两个正交向量A和B叉积：</p>
<p><img src="/images/vector_cross_product2.png" alt="vector_cross_product2"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h5 id="标量（Scalar）"><a href="#标量（Scalar）" class="headerlink" title="标量（Scalar）"></a>标量（Scalar）</h5><h4 id="初识纹理映射"><a href="#初识纹理映射" class="headerlink" title="初识纹理映射"></a>初识纹理映射</h4><p>纹理（Texture）是一个2D图片（甚至也有1D和3D的纹理），它可以用来添加物体的细节；你可以想象纹理是一张绘有砖块的纸，无缝折叠贴合到你的3D的房子上，这样你的房子看起来就像有砖墙外表了。因为我们可以在一张图片上插入非常多的细节，这样就可以让物体非常精细而不用指定额外的顶点。</p>
<p>为了能够把纹理映射(Map)到相应的几何图元（geometric primitive），就需要为图元中的每个顶点指定恰当的纹理坐标（Texture Coordinate），用来标明该从纹理图像的哪个部分采样。</p>
<h5 id="Vertex-Shader"><a href="#Vertex-Shader" class="headerlink" title="Vertex Shader"></a>Vertex Shader</h5> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">uniform mat4 uMVPMatrix; <span class="comment">//总变换矩阵</span></span><br><span class="line">attribute vec3 aPosition;  <span class="comment">//顶点位置</span></span><br><span class="line">attribute vec2 aTexCoor;    <span class="comment">//顶点纹理坐标(Texture Coordinate)</span></span><br><span class="line">varying vec2 vTextureCoord;  <span class="comment">//用于传递给Fragment Shader的varying变量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line">   gl_Position = uMVPMatrix * vec4(aPosition,<span class="number">1</span>); <span class="comment">//根据总变换矩阵计算此次绘制此顶点位置</span></span><br><span class="line">   vTextureCoord = aTexCoor;<span class="comment">//将接收的纹理坐标(Texture Coordinate)传递给Fragment Shader</span></span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure>

<p>第7行将被处理顶点的纹理坐标（Texture Coordinate）从attribute变量aTexCoor赋值给了varying变量vTextureCoord，供渲染管线（Render pipeline）进行插值计算后传递个Fragment Shader使用。</p>
<h5 id="Fragment-Shader"><a href="#Fragment-Shader" class="headerlink" title="Fragment Shader"></a>Fragment Shader</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">precision mediump <span class="keyword">float</span>; <span class="comment">//指定默认浮点精度</span></span><br><span class="line">varying vec2 vTextureCoord; <span class="comment">//接收从Vertex Shader过来的纹理坐标varying变量</span></span><br><span class="line">uniform sampler2D sTexture; <span class="comment">//纹理采样器，代表一副纹理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;           </span><br><span class="line">   <span class="comment">//给此片元从纹理中采样出颜色值            </span></span><br><span class="line">   gl_FragColor = texture2D(sTexture, vTextureCoord); </span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>

<p>此Fragment Shader的主要功能根据从Vertex Shader传递过来的varying变量vTextureCoord，调用texture2D内置函数从采样器中进行纹理采样，得到此片元的颜色。最后，将采样到的颜色值传给内置变量gl_FragColor，完成片元的着色。</p>
<h4 id="纹理采样"><a href="#纹理采样" class="headerlink" title="纹理采样"></a>纹理采样</h4><p>所谓纹理采样就是根据片元（Fragment）纹理坐标（Texture Coordinate）到纹理图中提取对应位置的颜色的过程。由于被渲染图元（Primitive）中的片元数量与其对应纹理区域中像素的数量并不一定相同，也就是说图元中的片元与纹理图中的像素并不总是一一对应的。</p>
<h2 id="纹理过滤"><a href="#纹理过滤" class="headerlink" title="纹理过滤"></a>纹理过滤</h2><p>GL_NEAREST（也叫邻近过滤，Nearest Neighbor Filtering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：</p>
<p><img src="https://learnopengl-cn.readthedocs.io/zh/latest/img/01/06/filter_nearest.png" alt="img"></p>
<p>GL_LINEAR（也叫线性过滤，(Bi)linear Filtering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：</p>
<p><img src="https://learnopengl-cn.readthedocs.io/zh/latest/img/01/06/filter_linear.png" alt="img"></p>
]]></content>
      <categories>
        <category>OpenGLES</category>
      </categories>
      <tags>
        <tag>OpenGLES</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGLES学习指南：绘制四边形</title>
    <url>/2022/10/06/draw_rectangle/</url>
    <content><![CDATA[<p>核心代码SquareRenderer类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.piasy.openglestutorial_android;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.opengl.GLES20;</span><br><span class="line"><span class="keyword">import</span> android.opengl.GLSurfaceView;</span><br><span class="line"><span class="keyword">import</span> android.opengl.Matrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteOrder;</span><br><span class="line"><span class="keyword">import</span> java.nio.FloatBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.ShortBuffer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.microedition.khronos.egl.EGLConfig;</span><br><span class="line"><span class="keyword">import</span> javax.microedition.khronos.opengles.GL10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareRenderer</span> <span class="keyword">implements</span> <span class="title">GLSurfaceView</span>.<span class="title">Renderer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DRAW_ARRAYS = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DRAW_ELEMENTS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDrawType = TYPE_DRAW_ELEMENTS;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BYTES_PER_FLOAT = <span class="number">4</span>; <span class="comment">//一个Float占用4Byte</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mVertexBuffer;  <span class="comment">//顶点位置缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> FloatBuffer mColorBuffer;  <span class="comment">//顶点颜色缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShortBuffer mIndicesBuffer;  <span class="comment">//顶点索引缓存</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mProgram;  <span class="comment">//渲染程序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERTEX_SHADER =</span><br><span class="line">            <span class="string">&quot;uniform mat4 uMVPMatrix;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;attribute vec3 aPosition;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;attribute vec4 aColor;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;varying vec4 vColor; \n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;void main()&#123;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;gl_Position = uMVPMatrix * vec4(aPosition,1);\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;gl_PointSize=20.0;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;vColor = aColor;\n&quot;</span></span><br><span class="line">                    + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT_SHADER =</span><br><span class="line">            <span class="string">&quot;precision mediump float;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;varying vec4 vColor;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;void main() &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;  gl_FragColor = vColor;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mViewMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mProjectMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">float</span>[] mMVPMatrix = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> uMVPMatrixHandle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aPositionHandle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aColorHandle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用glDrawElements绘制时的顶点个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTICES = &#123;</span><br><span class="line">            -<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,<span class="comment">//top left</span></span><br><span class="line">            -<span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom left</span></span><br><span class="line">            <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// bottom right</span></span><br><span class="line">            <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span> <span class="comment">// top right</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//采用glDrawArrays绘制时的顶点个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] VERTICES2 = &#123;</span><br><span class="line">            -<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,      <span class="comment">// top left</span></span><br><span class="line">            -<span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,      <span class="comment">// bottom left</span></span><br><span class="line">            <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,      <span class="comment">// bottom right</span></span><br><span class="line"></span><br><span class="line">            -<span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,      <span class="comment">// top left</span></span><br><span class="line">            <span class="number">0.5f</span>, -<span class="number">0.5f</span>, <span class="number">0.0f</span>,      <span class="comment">// bottom right</span></span><br><span class="line">            <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>       <span class="comment">// top right</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 顶点索引</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span>[] INDICES = &#123;</span><br><span class="line">            <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//四个顶点的颜色参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span>[] COLORS = &#123;</span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="comment">//top left</span></span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="comment">// bottom left</span></span><br><span class="line">            <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="comment">// bottom right</span></span><br><span class="line">            <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span> <span class="comment">// top right</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SquareRenderer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mDrawType == TYPE_DRAW_ARRAYS) &#123;</span><br><span class="line">            mVertexBuffer = ByteBuffer.allocateDirect(VERTICES2.length * BYTES_PER_FLOAT)</span><br><span class="line">                    .order(ByteOrder.nativeOrder())</span><br><span class="line">                    .asFloatBuffer();</span><br><span class="line">            mVertexBuffer.put(VERTICES2);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mVertexBuffer = ByteBuffer.allocateDirect(VERTICES.length * BYTES_PER_FLOAT)</span><br><span class="line">                    .order(ByteOrder.nativeOrder())</span><br><span class="line">                    .asFloatBuffer();</span><br><span class="line">            mVertexBuffer.put(VERTICES);</span><br><span class="line">        &#125;</span><br><span class="line">        mVertexBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        mColorBuffer = ByteBuffer.allocateDirect(COLORS.length * BYTES_PER_FLOAT)</span><br><span class="line">                .order(ByteOrder.nativeOrder())</span><br><span class="line">                .asFloatBuffer();</span><br><span class="line">        mColorBuffer.put(COLORS);</span><br><span class="line">        mColorBuffer.position(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        mIndicesBuffer = ByteBuffer.allocateDirect(INDICES.length * <span class="number">4</span>)</span><br><span class="line">                .order(ByteOrder.nativeOrder())</span><br><span class="line">                .asShortBuffer();</span><br><span class="line">        mIndicesBuffer.put(INDICES);</span><br><span class="line">        mIndicesBuffer.position(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceCreated</span><span class="params">(GL10 gl, EGLConfig config)</span> </span>&#123;</span><br><span class="line">        GLES20.glClearColor(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        <span class="keyword">int</span> vertexShaderId = ShaderUtils.compileVertexShader(VERTEX_SHADER);</span><br><span class="line">        <span class="keyword">int</span> fragmentShaderId = ShaderUtils.compileFragmentShader(FRAGMENT_SHADER);</span><br><span class="line">        mProgram = ShaderUtils.linkProgram(vertexShaderId, fragmentShaderId);</span><br><span class="line">        GLES20.glUseProgram(mProgram);</span><br><span class="line">        uMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, <span class="string">&quot;uMVPMatrix&quot;</span>);</span><br><span class="line">        aPositionHandle = GLES20.glGetAttribLocation(mProgram, <span class="string">&quot;aPosition&quot;</span>);</span><br><span class="line">        aColorHandle = GLES20.glGetAttribLocation(mProgram, <span class="string">&quot;aColor&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSurfaceChanged</span><span class="params">(GL10 gl, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        GLES20.glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">float</span> ratio = (<span class="keyword">float</span>) width / height;</span><br><span class="line">        Matrix.frustumM(mProjectMatrix, <span class="number">0</span>, -ratio, ratio, -<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">7</span>);</span><br><span class="line">        Matrix.setLookAtM(mViewMatrix, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">7.0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">        Matrix.multiplyMM(mMVPMatrix, <span class="number">0</span>, mProjectMatrix, <span class="number">0</span>, mViewMatrix, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawFrame</span><span class="params">(GL10 gl)</span> </span>&#123;</span><br><span class="line">        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);</span><br><span class="line">        GLES20.glUniformMatrix4fv(uMVPMatrixHandle, <span class="number">1</span>, <span class="keyword">false</span>, mMVPMatrix, <span class="number">0</span>);</span><br><span class="line">        GLES20.glVertexAttribPointer(aPositionHandle, <span class="number">3</span>, GLES20.GL_FLOAT, <span class="keyword">false</span>, <span class="number">3</span> * <span class="number">4</span>, mVertexBuffer);</span><br><span class="line">        GLES20.glEnableVertexAttribArray(aPositionHandle);</span><br><span class="line">        GLES20.glVertexAttribPointer(aColorHandle, <span class="number">4</span>, GLES20.GL_FLOAT, <span class="keyword">false</span>, <span class="number">4</span> * <span class="number">4</span>, mColorBuffer);</span><br><span class="line">        GLES20.glEnableVertexAttribArray(aColorHandle);</span><br><span class="line">        <span class="keyword">if</span> (mDrawType == TYPE_DRAW_ARRAYS) &#123;</span><br><span class="line">            GLES20.glDrawArrays(GLES20.GL_TRIANGLES, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            GLES20.glDrawElements(GLES20.GL_TRIANGLES, INDICES.length, GLES20.GL_UNSIGNED_SHORT, mIndicesBuffer);</span><br><span class="line">        &#125;</span><br><span class="line">        GLES20.glDisableVertexAttribArray(aPositionHandle);</span><br><span class="line">        GLES20.glDisableVertexAttribArray(aColorHandle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中ShaderUtils辅助工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.piasy.openglestutorial_android;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.opengl.GLES20;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShaderUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">&quot;ShaderUtils&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compileVertexShader</span><span class="params">(String shaderCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compileShader(GLES20.GL_VERTEX_SHADER, shaderCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compileFragmentShader</span><span class="params">(String shaderCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> compileShader(GLES20.GL_FRAGMENT_SHADER, shaderCode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compileShader</span><span class="params">(<span class="keyword">int</span> type, String shaderCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> shaderId = GLES20.glCreateShader(type);</span><br><span class="line">        <span class="keyword">if</span> (shaderId == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GLES20.glShaderSource(shaderId, shaderCode);</span><br><span class="line">        GLES20.glCompileShader(shaderId);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] compileStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        GLES20.glGetShaderiv(shaderId, GLES20.GL_COMPILE_STATUS, compileStatus, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (compileStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            String logInfo = GLES20.glGetShaderInfoLog(shaderId);</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;compile failure, error: &quot;</span> + logInfo);</span><br><span class="line">            GLES20.glDeleteShader(shaderId);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> shaderId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">linkProgram</span><span class="params">(<span class="keyword">int</span> vertexShaderId, <span class="keyword">int</span> fragmentShaderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> programId = GLES20.glCreateProgram();</span><br><span class="line">        <span class="keyword">if</span> (programId == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        GLES20.glAttachShader(programId, vertexShaderId);</span><br><span class="line">        GLES20.glAttachShader(programId, fragmentShaderId);</span><br><span class="line">        GLES20.glLinkProgram(programId);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] linkStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        GLES20.glGetProgramiv(programId, GLES20.GL_LINK_STATUS, linkStatus, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (linkStatus[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            String logInfo = GLES20.glGetProgramInfoLog(programId);</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;link failure, error: &quot;</span> + logInfo);</span><br><span class="line">            GLES20.glDeleteProgram(programId);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> programId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">validProgram</span><span class="params">(<span class="keyword">int</span> programObjectId)</span> </span>&#123;</span><br><span class="line">        GLES20.glValidateProgram(programObjectId);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span>[] programStatus = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">        GLES20.glGetProgramiv(programObjectId, GLES20.GL_VALIDATE_STATUS, programStatus, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> programStatus[<span class="number">0</span>] != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>OpenGLES</category>
      </categories>
      <tags>
        <tag>OpenGLES</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL学习-光照</title>
    <url>/2023/01/25/opengl_lighting/</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/d1cef96742da4121860d648ba2575f8e.png" alt="img"></p>
<h4 id="环境光（Ambient）"><a href="#环境光（Ambient）" class="headerlink" title="环境光（Ambient）"></a>环境光（Ambient）</h4><p>环境光照：物体永远不会是完全黑暗，使用一个环境光照常量，永远给物体一些颜色。</p>
<p>​                            环境光照射结果 = 材质的反射系数 X 环境光照强度</p>
<p>Vertex Shader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">uniform mat4 uMVPMatrix; <span class="comment">//总变换矩阵</span></span><br><span class="line">attribute vec3 aPosition;  <span class="comment">//顶点位置</span></span><br><span class="line">varying vec3 vPosition;<span class="comment">//用于传递给片元着色器的顶点位置</span></span><br><span class="line">varying vec4 vAmbient;<span class="comment">//用于传递给片元着色器的环境光分量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//根据总变换矩阵计算此次绘制此顶点位置</span></span><br><span class="line">   gl_Position = uMVPMatrix * vec4(aPosition,<span class="number">1</span>);</span><br><span class="line">   <span class="comment">//将顶点的位置传给片元着色器</span></span><br><span class="line">   vPosition = aPosition;</span><br><span class="line">   <span class="comment">//将的环境光分量传给片元着色器</span></span><br><span class="line">   vAmbient = vec4(<span class="number">0.15</span>,<span class="number">0.15</span>,<span class="number">0.15</span>,<span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Fragment Shader</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">precision mediump <span class="keyword">float</span>;</span><br><span class="line">uniform <span class="keyword">float</span> uR;</span><br><span class="line">varying vec3 vPosition;<span class="comment">//接收从顶点着色器过来的顶点位置</span></span><br><span class="line">varying vec4 vAmbient;<span class="comment">//接收从顶点着色器过来的环境光分量</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span>                         </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   vec3 color;</span><br><span class="line">   <span class="keyword">float</span> n = <span class="number">8.0</span>;<span class="comment">//一个坐标分量分的总份数</span></span><br><span class="line">   <span class="keyword">float</span> span = <span class="number">2.0</span> * uR / n;<span class="comment">//每一份的长度</span></span><br><span class="line">   <span class="comment">//每一维在立方体内的行列数</span></span><br><span class="line">   <span class="keyword">int</span> i = <span class="keyword">int</span>((vPosition.x + uR)/span);</span><br><span class="line">   <span class="keyword">int</span> j = <span class="keyword">int</span>((vPosition.y + uR)/span);</span><br><span class="line">   <span class="keyword">int</span> k = <span class="keyword">int</span>((vPosition.z + uR)/span);</span><br><span class="line">   <span class="comment">//计算当点应位于白色块还是黑色块中</span></span><br><span class="line">   <span class="keyword">int</span> whichColor = <span class="keyword">int</span>(mod(<span class="keyword">float</span>(i + j + k), <span class="number">2.0</span>));</span><br><span class="line">   <span class="keyword">if</span>(whichColor == <span class="number">1</span>) &#123;<span class="comment">//奇数时为红色</span></span><br><span class="line">   		color = vec3(<span class="number">0.678</span>, <span class="number">0.231</span>, <span class="number">0.129</span>);<span class="comment">//红色</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;<span class="comment">//偶数时为白色</span></span><br><span class="line">   		color = vec3(<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>);<span class="comment">//白色</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//最终颜色</span></span><br><span class="line">   vec4 finalColor=vec4(color,<span class="number">0</span>);</span><br><span class="line">   <span class="comment">//给此片元颜色值</span></span><br><span class="line">   gl_FragColor= finalColor * vAmbient;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<h4 id="散射光（Diffuse）"><a href="#散射光（Diffuse）" class="headerlink" title="散射光（Diffuse）"></a>散射光（Diffuse）</h4><p>漫反射光照：模拟光源对物体方向性影响。物体某一部分越是对着光源越亮。</p>
<h4 id="镜面光（Specular）"><a href="#镜面光（Specular）" class="headerlink" title="镜面光（Specular）"></a>镜面光（Specular）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">uniform mat4 uMVPMatrix; 						<span class="comment">//总变换矩阵</span></span><br><span class="line">uniform mat4 uMMatrix; 							<span class="comment">//变换矩阵(包括平移、旋转、缩放)</span></span><br><span class="line">uniform vec3 uLightLocation;						<span class="comment">//定位光源位置</span></span><br><span class="line">attribute vec3 aPosition;  						<span class="comment">//顶点位置</span></span><br><span class="line">attribute vec3 aNormal;    						<span class="comment">//顶点法向量</span></span><br><span class="line">varying vec3 vPosition;							<span class="comment">//用于传递给片元着色器的顶点位置</span></span><br><span class="line">varying vec4 vDiffuse;							<span class="comment">//用于传递给片元着色器的散射光分量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   vec3 normal = normalize(aNormal); <span class="comment">//法向量</span></span><br><span class="line">   vec4 lightDiffuse = vec4(<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">0.8</span>,<span class="number">1.0</span>); <span class="comment">//散射光强度</span></span><br><span class="line">   <span class="comment">//计算顶点在世界空间中的位置</span></span><br><span class="line">   vec3 fragPos = vec3(uMMatrix * vec4(aPosition, <span class="number">1</span>));</span><br><span class="line">   <span class="comment">//计算光源和片元位置之间的方向向量</span></span><br><span class="line">   vec3 lightDirection = normalize(uLightLocation - fragPos);</span><br><span class="line">   vDiffuse = lightDiffuse * max(<span class="number">0.0</span>, dot(normal, lightDirection)); <span class="comment">//计算散射光的最终强度</span></span><br><span class="line">   vPosition = aPosition; <span class="comment">//将顶点的位置传给片元着色器</span></span><br><span class="line">   gl_Position = uMVPMatrix * vec4(aPosition,<span class="number">1</span>); <span class="comment">//根据总变换矩阵计算此次绘制此顶点的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>从表面顶点到光源位置的向量的计算：</p>
<p>首先，需要计算出顶点在世界空间中的位置。我们可以通过把顶点位置属性乘以模型矩阵(Model Matrix, 只用模型矩阵不需要用观察和投影矩阵)来把它变换到世界空间坐标。</p>
<p>即：uMMatrix * vec4(aPosition, 1)</p>
<h4 id="镜面光照"><a href="#镜面光照" class="headerlink" title="镜面光照"></a>镜面光照</h4>]]></content>
      <categories>
        <category>OpenGLES</category>
      </categories>
      <tags>
        <tag>OpenGLES</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactor实践</title>
    <url>/2023/05/29/refactoring/</url>
    <content><![CDATA[<h3 id="Refactoring-Improving-the-Design-of-Existing-Code"><a href="#Refactoring-Improving-the-Design-of-Existing-Code" class="headerlink" title="Refactoring: Improving the Design of Existing Code"></a>Refactoring: Improving the Design of Existing Code</h3><p>重构的第一步</p>
<p>每当我们要进行重构的时候，第一个步骤永远相同：为即将修改的代码建立一组可靠的测试环境。</p>
<h3 id="Chapter-6-Composing-Method"><a href="#Chapter-6-Composing-Method" class="headerlink" title="Chapter 6: Composing Method"></a>Chapter 6: Composing Method</h3><h4 id="6-1-Extract-Method-提炼函数"><a href="#6-1-Extract-Method-提炼函数" class="headerlink" title="6.1 Extract Method(提炼函数)"></a>6.1 Extract Method(提炼函数)</h4><p>You have a code fragment that can be grouped together.</p>
<p>Turn the fragment into a method whose name explains the purpose of the method.</p>
<h4 id="6-2-Inline-Method-内联函数"><a href="#6-2-Inline-Method-内联函数" class="headerlink" title="6.2 Inline Method(内联函数)"></a>6.2 Inline Method(内联函数)</h4><p>A method’s body is just as clear as its name.<br>Put the method’s body into the body of its callers and remove the method.</p>
<h4 id="6-3-Inline-Temp-内敛临时变量"><a href="#6-3-Inline-Temp-内敛临时变量" class="headerlink" title="6.3 Inline Temp(内敛临时变量)"></a>6.3 Inline Temp(内敛临时变量)</h4><p>You have a temp that is assigned to once with a simple expression, and the temp is getting in the<br>way of other refactorings.<br>Replace all references to that temp with the expression.</p>
<h4 id="6-4-Replace-Temp-with-Query-以查询取代临时变量"><a href="#6-4-Replace-Temp-with-Query-以查询取代临时变量" class="headerlink" title="6.4 Replace Temp with Query(以查询取代临时变量)"></a>6.4 Replace Temp with Query(以查询取代临时变量)</h4><p>You are using a temporary variable to hold the result of an expression.<br>Extract the expression into a method. Replace all references to the temp with the expression. The<br>new method can then be used in other methods.</p>
<h4 id="6-5-Introduce-Explaning-Variable-引入解释性变量"><a href="#6-5-Introduce-Explaning-Variable-引入解释性变量" class="headerlink" title="6.5 Introduce Explaning Variable(引入解释性变量)"></a>6.5 Introduce Explaning Variable(引入解释性变量)</h4><p>You have a complicated expression.<br>Put the result of the expression, or parts of the expression, in a temporary variable with a name that explains the purpose.</p>
<h4 id="6-6-Split-Temporary-Variable-分解临时变量"><a href="#6-6-Split-Temporary-Variable-分解临时变量" class="headerlink" title="6.6 Split Temporary Variable(分解临时变量)"></a>6.6 Split Temporary Variable(分解临时变量)</h4><p>You have a temporary variable assigned to more than once, but is not a loop variable nor a collecting temporary variable.<br>Make a separate temporary variable for each assignment.</p>
<h4 id="6-7-Remove-Assignments-to-Parameters-移除对参数的赋值"><a href="#6-7-Remove-Assignments-to-Parameters-移除对参数的赋值" class="headerlink" title="6.7 Remove Assignments to Parameters(移除对参数的赋值)"></a>6.7 Remove Assignments to Parameters(移除对参数的赋值)</h4><p>The code assigns to a parameter.<br>Use a temporary variable instead.</p>
<h3 id="Chapter-7-Moving-Features-Between-Objects"><a href="#Chapter-7-Moving-Features-Between-Objects" class="headerlink" title="Chapter 7: Moving Features Between Objects"></a>Chapter 7: Moving Features Between Objects</h3><h4 id="7-1-Move-Method"><a href="#7-1-Move-Method" class="headerlink" title="7.1 Move Method"></a>7.1 Move Method</h4><p>A method is, or will be, using or used by more features of another class than the class on which it is defined.<br>Create a new method with a similar body in the class it uses most. Either turn the old method into a simple delegation, or remove it altogether.</p>
<p>当我需要使用源类的某个特性(feature)时，我有四种选择：</p>
<ol>
<li> move this feature to the target class as well;</li>
<li> create or use a reference from the target class to the source;</li>
<li> pass the source object as a parameter to the method;</li>
<li> if the feature is a variable, pass it in as a parameter.</li>
</ol>
<h4 id="7-2-Move-Field"><a href="#7-2-Move-Field" class="headerlink" title="7.2 Move Field"></a>7.2 Move Field</h4><p>A field is, or will be, used by another class more than the class on which it is defined.<br>Create a new field in the target class, and change all its users.</p>
<h4 id="7-3-Extract-Class"><a href="#7-3-Extract-Class" class="headerlink" title="7.3 Extract Class"></a>7.3 Extract Class</h4><p>You have one class doing work that should be done by two.</p>
<p>Create a new class and move the relevant fields and methods from the old class into the new class.</p>
<h4 id="7-4-Inline-Class"><a href="#7-4-Inline-Class" class="headerlink" title="7.4 Inline Class"></a>7.4 Inline Class</h4><p>A class isn’t doing very much.<br>Move all its features into another class and delete it.</p>
<h4 id="7-5-Hide-Delegate"><a href="#7-5-Hide-Delegate" class="headerlink" title="7.5     Hide Delegate"></a>7.5     Hide Delegate</h4><p>A client is calling a delegate class of an object.<br>Create methods on the server to hide the delegate.</p>
<h3 id="Chapter-8-Organizing-Data"><a href="#Chapter-8-Organizing-Data" class="headerlink" title="Chapter 8: Organizing Data"></a>Chapter 8: Organizing Data</h3><h3 id="Chapter-9-Simplifying-Conditional-Expressions"><a href="#Chapter-9-Simplifying-Conditional-Expressions" class="headerlink" title="Chapter 9: Simplifying Conditional Expressions"></a>Chapter 9: Simplifying Conditional Expressions</h3><h3 id="Chapter-10-Making-Method-Calls-Simpler"><a href="#Chapter-10-Making-Method-Calls-Simpler" class="headerlink" title="Chapter 10: Making Method Calls Simpler"></a>Chapter 10: Making Method Calls Simpler</h3><h3 id="Chapter-11-Dealing-with-Generalization"><a href="#Chapter-11-Dealing-with-Generalization" class="headerlink" title="Chapter 11: Dealing with Generalization"></a>Chapter 11: Dealing with Generalization</h3><h3 id="Chapter-12-Big-Refactorings"><a href="#Chapter-12-Big-Refactorings" class="headerlink" title="Chapter 12: Big Refactorings"></a>Chapter 12: Big Refactorings</h3>]]></content>
      <categories>
        <category>重构</category>
      </categories>
      <tags>
        <tag>重构</tag>
      </tags>
  </entry>
  <entry>
    <title>Refactoring to Patterns总结</title>
    <url>/2023/06/24/refactoring/</url>
    <content><![CDATA[<h3 id="Chapter-6-Creation"><a href="#Chapter-6-Creation" class="headerlink" title="Chapter 6: Creation"></a>Chapter 6: Creation</h3><h4 id="6-1-Replace-Constructors-with-Creation-Methods"><a href="#6-1-Replace-Constructors-with-Creation-Methods" class="headerlink" title="6.1 Replace Constructors with Creation Methods"></a>6.1 Replace Constructors with Creation Methods</h4><p>Constructors on a class make it hard to decide which constructor to call during development.</p>
<p><em>Replace the constructors with intention-revealing Creation Methods that return object instances.</em></p>
<p><em><strong>BENEFITS AND LIABILITIES</strong></em></p>
<p>&emsp;&emsp;+ Communicates what kinds of instances are available better than constructors.</p>
<p>&emsp;&emsp;+ Bypasses constructor limitations, such as the inability to have two constructors with the same number and type of arguments.</p>
<p>&emsp;&emsp;+ Makes it easier to find unused creation code.</p>
<p>&emsp;&emsp;– Makes creation nonstandard: some classes are instantiated using new, while others use <em>Creation Methods</em>.</p>
<h4 id="6-2-Move-Creation-Knowledge-to-Factory"><a href="#6-2-Move-Creation-Knowledge-to-Factory" class="headerlink" title="6.2 Move Creation Knowledge to Factory"></a>6.2 Move Creation Knowledge to Factory</h4><h4 id="6-3-Encapsulate-Classes-with-Factory"><a href="#6-3-Encapsulate-Classes-with-Factory" class="headerlink" title="6.3 Encapsulate Classes with Factory"></a>6.3 Encapsulate Classes with Factory</h4><h5 id="Descriptio"><a href="#Descriptio" class="headerlink" title="Descriptio:"></a>Descriptio:</h5><p>Clients directly instantiate classes that reside in one package and implement a common interface.</p>
<p>Make the class constructors non-public and let clients create instances of them using a Factory.</p>
<ul>
<li><p>Description</p>
<p>  Data and code used to instantiate a class is sprawled across numerous classes.</p>
</li>
<li><p>Action</p>
</li>
</ul>
<p>​        Move the creation knowledge into a single Factory class.</p>
<ul>
<li>Description</li>
</ul>
<p>Constructors on a class make it hard to decide which constructor to call during development.</p>
<h5 id="Encapsulate-Classes-with-Factory"><a href="#Encapsulate-Classes-with-Factory" class="headerlink" title="Encapsulate Classes with Factory"></a>Encapsulate Classes with Factory</h5><p>Clients directly instantiate classes that reside in one package and implement a common interface.</p>
<p>Make the class constructors non-public and let clients create instances of them using a Factory.</p>
<h5 id="6-5-Encapsulate-Composite-with-Builder"><a href="#6-5-Encapsulate-Composite-with-Builder" class="headerlink" title="6.5 Encapsulate Composite with Builder"></a>6.5 Encapsulate Composite with Builder</h5><p>Building a Composite is repetitive, complicated, or error-prone.</p>
<p><em>Simplify the build by letting a Builder handle the details.</em></p>
<h5 id="6-6-Inline-Singleton"><a href="#6-6-Inline-Singleton" class="headerlink" title="6.6 Inline Singleton"></a>6.6 Inline Singleton</h5><p>Code needs access to an object but doesn’t need a global point of access to it.</p>
<p><em>Move the Singleton’s features to a class that stores and provides access to the object. Delete the Singleton.</em></p>
<h3 id="Chapter-7-Simplification"><a href="#Chapter-7-Simplification" class="headerlink" title="Chapter 7: Simplification"></a>Chapter 7: Simplification</h3><h4 id="7-1-Compose-Method"><a href="#7-1-Compose-Method" class="headerlink" title="7.1 Compose Method"></a>7.1 Compose Method</h4><h4 id="7-2-Replace-Conditional-Logic-with-Strategy"><a href="#7-2-Replace-Conditional-Logic-with-Strategy" class="headerlink" title="7.2 Replace Conditional Logic with Strategy"></a>7.2 Replace Conditional Logic with Strategy</h4><h5 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h5><p>Conditional logic in a method controls which of several variants of a calculation are executed.</p>
<p>Create a Strategy for each variant and make the method delegate the calculation to a Strategy instance.</p>
<h4 id="Replace-Implicit-Tree-with-Composite"><a href="#Replace-Implicit-Tree-with-Composite" class="headerlink" title="Replace Implicit Tree with Composite"></a>Replace Implicit Tree with Composite</h4><h5 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h5><p>You implicitly form a tree structure, using a primitive representation, such as a String.</p>
<p>Replace your primitive representation with a Composite.</p>
<h4 id="Replace-Conditional-Dispatcher-with-Command"><a href="#Replace-Conditional-Dispatcher-with-Command" class="headerlink" title="Replace Conditional Dispatcher with Command"></a>Replace Conditional Dispatcher with Command</h4><h4 id="Replace-State-Altering-Conditionals-with-State"><a href="#Replace-State-Altering-Conditionals-with-State" class="headerlink" title="Replace State-Altering Conditionals with State"></a>Replace State-Altering Conditionals with State</h4><p><strong>Description</strong>：</p>
<p>The conditional expressions that control an object’s state transitions are complex.</p>
<p>Replace the conditionals with State classes that handle specific states and transitions between them.</p>
<h3 id="Chapter-8-Generalization"><a href="#Chapter-8-Generalization" class="headerlink" title="Chapter 8. Generalization"></a>Chapter 8. Generalization</h3><h4 id="8-1-Form-Template-Method"><a href="#8-1-Form-Template-Method" class="headerlink" title="8.1 Form Template Method"></a>8.1 Form Template Method</h4><p>Two methods in subclasses perform similar steps in the same order, yet the steps are different.</p>
<p><strong>BENEFITS AND LIABILITIES</strong></p>
<p>&emsp;&emsp;+ Removes duplicated code in subclasses by moving invariant behavior to a superclass.</p>
<p>&emsp;&emsp;+ Simplifies and effectively communicates the steps of a general algorithm.</p>
<p>&emsp;&emsp;+ Allows subclasses to easily customize an algorithm.</p>
<p>&emsp;&emsp;– Complicates a design when subclasses must implement many methods to flesh out the algorithm.</p>
<h4 id="8-2-Extract-Composite"><a href="#8-2-Extract-Composite" class="headerlink" title="8.2 Extract Composite"></a>8.2 Extract Composite</h4><p>Subclasses in a hierarchy implement the same Composite.</p>
<p>Extract a superclass that implements the Composite.</p>
<h4 id="8-3-Replace-One-Many-Distinctions-with-Composite"><a href="#8-3-Replace-One-Many-Distinctions-with-Composite" class="headerlink" title="8.3 Replace One/Many Distinctions with Composite"></a>8.3 Replace One/Many Distinctions with Composite</h4><p>A class processes single and multiple objects using separate pieces of code.</p>
<p><em>Use a Composite to produce one piece of code capable of handling single or multiple objects.</em></p>
<h4 id="8-4-Replace-Hard-Coded-Notifications-with-Observer"><a href="#8-4-Replace-Hard-Coded-Notifications-with-Observer" class="headerlink" title="8.4 Replace Hard-Coded Notifications with Observer"></a>8.4 Replace Hard-Coded Notifications with Observer</h4><p>Subclasses are hard-coded to notify a single instance of another class.</p>
<p><em>Remove the subclasses by making their superclass capable of notifying one or more instances of any class that implements an Observer interface.</em></p>
<h4 id="8-5-Unify-Interfaces-with-Adapter"><a href="#8-5-Unify-Interfaces-with-Adapter" class="headerlink" title="8.5 Unify Interfaces with Adapter"></a>8.5 Unify Interfaces with Adapter</h4><p>使用Adapter统一接口</p>
<p>Clients interact with two classes, one of which has a preferred interface.</p>
<p>Unify the interfaces with an Adapter.</p>
<h4 id="8-6-Extract-Adapter"><a href="#8-6-Extract-Adapter" class="headerlink" title="8.6 Extract Adapter"></a>8.6 Extract Adapter</h4><p>One class adapts multiple versions of a component, library, API, or other entity.</p>
<p>Extract an Adapter for a single version of the component, library, API, or other entity.</p>
<p><strong>BENEFITS AND LIABILITIES</strong></p>
<p>&emsp;&emsp;+  Isolates differences in versions of a component, library, or API.</p>
<p>&emsp;&emsp;+  Makes classes responsible for adapting only one version of something.</p>
<p>&emsp;&emsp;+  Provides insulation from frequently changing code.</p>
<p>&emsp;&emsp;–  Can shield a client from important behavior that isn’t available on the Adapter.</p>
<h3 id="8-7-Replace-Implicit-Language-with-Interpreter"><a href="#8-7-Replace-Implicit-Language-with-Interpreter" class="headerlink" title="8.7 Replace Implicit Language with Interpreter"></a>8.7 Replace Implicit Language with Interpreter</h3><p>Numerous methods on a class combine elements of an implicit language.</p>
<p><em>Define classes for elements of the implicit language so that instances may be combined to form interpretable expressions.</em></p>
<h3 id="Chapter-9-Protection"><a href="#Chapter-9-Protection" class="headerlink" title="Chapter 9. Protection"></a>Chapter 9. Protection</h3><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><table>
<thead>
<tr>
<th>Smell</th>
<th>Refactoring</th>
</tr>
</thead>
<tbody><tr>
<td>重复代码（Duplicated Code）</td>
<td></td>
</tr>
<tr>
<td>过长函数（Long Method）</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>重构</category>
      </categories>
      <tags>
        <tag>重构</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL Transorformation的理解</title>
    <url>/2023/08/11/Transorformation%E7%9A%84%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h4 id="OpenGL-Transformation"><a href="#OpenGL-Transformation" class="headerlink" title="OpenGL Transformation"></a>OpenGL Transformation</h4><h4 id="Object-Coordinates"><a href="#Object-Coordinates" class="headerlink" title="Object Coordinates"></a>Object Coordinates</h4><h4 id="Eye-Coordinates"><a href="#Eye-Coordinates" class="headerlink" title="Eye Coordinates"></a>Eye Coordinates</h4><ol>
<li>Model transform用来从object space转换为world space;</li>
<li>View transform用来从world space转换为eye space。</li>
</ol>
<p><img src="/images/eye_coordinates.png" alt="eye_coordinates"></p>
<h4 id="Clip-Coordinates"><a href="#Clip-Coordinates" class="headerlink" title="Clip Coordinates"></a>Clip Coordinates</h4><p><img src="/images/clip_coordinates.png" alt="clip_coordinates"></p>
<h4 id="Normalized-Device-Coordinates-NDC"><a href="#Normalized-Device-Coordinates-NDC" class="headerlink" title="Normalized Device Coordinates (NDC)"></a>Normalized Device Coordinates (NDC)</h4><p><img src="/images/ndc_coordinates.png" alt="ndc_coordinates"></p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p><img src="/images/opengl_transformation.jpg" alt="OpenGL Transformation"></p>
<p>Matrix的perspectiveM方法可以生成一个透视投影</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Defines a projection matrix in terms of a field of view angle, an</span></span><br><span class="line"><span class="comment"> * aspect ratio, and z clip planes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m the float array that holds the perspective matrix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> offset the offset into float array m where the perspective</span></span><br><span class="line"><span class="comment"> *        matrix data is written</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fovy field of view in y direction, in degrees</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aspect width to height aspect ratio of the viewport</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zNear</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zFar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">perspectiveM(<span class="keyword">float</span>[] m, <span class="keyword">int</span> offset, <span class="keyword">float</span> fovy, <span class="keyword">float</span> aspect, <span class="keyword">float</span> near, <span class="keyword">float</span> far);</span><br></pre></td></tr></table></figure>

<p>焦距：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1.0f</span> / Math.tan((fovy * Math.PI / <span class="number">180.0f</span>) / <span class="number">2.0f</span>)</span><br></pre></td></tr></table></figure>




<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成透视投影</span></span><br><span class="line"><span class="comment"> * Defines a projection matrix in terms of six clip planes.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m 要填充矩阵元素的float[]类型数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 要填充其实偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> near面的left</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> near面的right</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> near面的bottom</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> near面的top</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> near面与透视点的距离</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> far面与透视点的距离</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">frustumM</span><span class="params">(<span class="keyword">float</span>[] m, <span class="keyword">int</span> offset, <span class="keyword">float</span> left, <span class="keyword">float</span> right, <span class="keyword">float</span> bottom, <span class="keyword">float</span> top,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">float</span> near, <span class="keyword">float</span> far)</span></span>;</span><br></pre></td></tr></table></figure>

<p>如果仅仅使用projection matrix时</p>
<p>Vertex<del>clip</del> = ProjectionMatrix * Vertex<del>eye</del></p>
<p>添加了model matrix之后，</p>
<p>Vertexeye = ModelMatrix * Vertex<del>model</del><br>vertex<br>Clip = ProjectionMatrix * Vertex<del>eye</del></p>
<h3 id="Perspective-Projection"><a href="#Perspective-Projection" class="headerlink" title="Perspective Projection"></a>Perspective Projection</h3><p><img src="/images/perspective_projection.png" alt="perspective_projection"></p>
<p>Perspective Frustum and Normalized Device Coordinates (NDC)</p>
]]></content>
      <categories>
        <category>OpenGLES</category>
      </categories>
      <tags>
        <tag>OpenGLES</tag>
      </tags>
  </entry>
  <entry>
    <title>单调栈的理解</title>
    <url>/2024/01/01/monotonous_stack/</url>
    <content><![CDATA[<p><a href="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84. 柱状图中最大的矩形</a></p>
<p>给定 <em>n</em> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>
<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>
<p><strong>示例 1:</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg" alt="img"></p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">输入：heights = <span class="string">[2,1,5,6,2,3]</span></span><br><span class="line">输出：<span class="number">10</span></span><br><span class="line">解释：最大的矩形为图中红色区域，面积为 <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg" alt="img"></p>
<figure class="highlight fix"><table><tr><td class="code"><pre><span class="line"><span class="attr">输入： heights </span>=<span class="string"> [2,4]</span></span><br><span class="line"><span class="string">输出： 4</span></span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= heights.length &lt;=105</code></li>
<li><code>0 &lt;= heights[i] &lt;= 104</code></li>
</ul>
<p>将一个柱形的数据存入栈的时候，表示我们还不能确定当前位置能勾勒出来的矩形的最大面积。</p>
<p>出栈的时候，就表示现在可以确定栈顶这个位置的柱形能够勾勒出来的矩形最大面积。</p>
<p>什么时候元素出栈呢?</p>
<p>看到的元素的高度严格小于当前栈顶元素的高度时，栈顶元素出栈，进而计算出栈顶元素能勾勒出的矩形的最大面积。</p>
<p>Corner Case：</p>
<ol>
<li><p>遍历完成以后，栈顶元素一定可以扩散到数组的末尾。</p>
<p> 因为栈顶元素一定是栈内最大的，</p>
<ol start="2">
<li>出栈以后，站内元素为空，当前元素一定可以扩散到数组的最左边。因为左边元素一定比当前元素严格大。</li>
<li>栈内存在连续的高度相等的元素。</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka入门</title>
    <url>/2023/12/23/Kafka_quickstart/</url>
    <content><![CDATA[<h3 id="Kafka入门"><a href="#Kafka入门" class="headerlink" title="Kafka入门"></a>Kafka入门</h3><p>启动ZooKeeper</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Start the ZooKeeper service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/zookeeper-server-start.sh config/zookeeper.properties</span></span><br></pre></td></tr></table></figure>

<p>打开另一个控制台，启动Kafka</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Start the Kafka broker service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-server-start.sh config/server.properties</span></span><br></pre></td></tr></table></figure>

<p>创建Topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-topics.sh --bootstrap-server localhost:9092 --create --topic topic-create --partitions 4 --replication-factor 1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> output</span></span><br><span class="line">Created topic topic-create.</span><br></pre></td></tr></table></figure>

<p>查看Topic信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">bin/kafka-topics.sh --describe --topic topic-create --bootstrap-server localhost:9092</span></span><br><span class="line">Topic: topic-create	TopicId: pLImIYImQ92Ii4KPg4-YxQ	PartitionCount: 4	ReplicationFactor: 1	Configs: </span><br><span class="line">	Topic: topic-create	Partition: 0	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: topic-create	Partition: 1	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: topic-create	Partition: 2	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: topic-create	Partition: 3	Leader: 0	Replicas: 0	Isr: 0</span><br></pre></td></tr></table></figure>

<p>往Kafka指定的Topic写数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-producer.sh --topic topic-create --bootstrap-server localhost:9092</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">hello, This is message 1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">This is message2</span></span><br><span class="line"><span class="meta">&gt;</span></span><br></pre></td></tr></table></figure>

<p>从Kafka中读取消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bin/kafka-console-consumer.sh --topic topic-create --from-beginning --bootstrap-server localhost:9092</span></span><br><span class="line">hello, This is message 1</span><br><span class="line">This is message2</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JVM GC的理解</title>
    <url>/2024/01/13/jvm_gc/</url>
    <content><![CDATA[<h4 id="JVM垃圾回收算法："><a href="#JVM垃圾回收算法：" class="headerlink" title="JVM垃圾回收算法："></a>JVM垃圾回收算法：</h4><p>1、“标记–清除”算法；首先标记出所有需要被回收的对象，然后在标记完成后统一回收掉所有被标记的对象。</p>
<p>2、复制算法；将内存划分为等大的两块，每次只使用其中的一块。</p>
<p>3、“标记–清除-整理”算法；</p>
<p>4、分代收集算法。</p>
<h4 id="三色标记法"><a href="#三色标记法" class="headerlink" title="三色标记法"></a>三色标记法</h4><p>遍历过程：</p>
<ol>
<li>初始时，所有对象都标记为白色；</li>
<li>将GC Roots直接引用的对象标记为灰色；</li>
<li>依次遍历灰色对象：</li>
<li>1 将该对象引用的所有对象全部标记为灰色；</li>
<li>2 将该对象标记为黑色。</li>
<li>重复步骤3，直到所有的灰色节点都被标记为黑色。</li>
<li>此时，标记为白色的对象即为GC Roots不可达，可以进行垃圾回收。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之字符串</title>
    <url>/2024/01/20/strings/</url>
    <content><![CDATA[<h4 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><a href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></h4><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。 </p>
<p><strong>示例 1:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;abcabcbb&quot;</span></span><br><span class="line"><span class="section">输出: 3 </span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;bbbbb&quot;</span></span><br><span class="line"><span class="section">输出: 1</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 3:</strong></p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: s = &quot;pwwkew&quot;</span></span><br><span class="line"><span class="section">输出: 3</span></span><br><span class="line"><span class="section">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span></span><br><span class="line">     请注意，你的答案必须是 子串 的长度，<span class="string">&quot;pwke&quot;</span> 是一个子序列，不是子串。 </span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>
<li><code>s</code> 由英文字母、数字、符号和空格组成</li>
</ul>
<p>解题思路：</p>
<p>维护一个滑动窗口，滑动窗口中的元素都是不重复的，窗口依次向前滚动。</p>
<p>遍历字符串数组，计算滑动窗口[left, i]的的最大长度。</p>
<p>因此，需要维护一个left下标，初始为0。然后，for循环遍历字符串，把遍历过的字符放在HashMap&lt;Character, Integer&gt;中，key为s.charAt(i)，value为s.charAt(i)的字符出现的最新位置。如果s.charAt(i)在HashMap中已经出现过，则left跳过该字符，往前移一位。</p>
<p>新的left到i之间一定都是不重复的。</p>
<p>注意，left一直是往前走的，不应该往后倒退，比如String为”abbbac”, 遍历到第2个a时，left已经指向第2个b的位置，因为a之前出现过， hashMap.get(‘a’)为0，left应该取left = Math.max(left, hashMap.get(s.char(i)) + 1 )。</p>
<h4 id="字符串分割："><a href="#字符串分割：" class="headerlink" title="字符串分割："></a>字符串分割：</h4><p> 分割函数split带limit和不带limit的区别。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] split(String regex)</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span>[] <span class="built_in">split</span>(<span class="keyword">String</span> regex, <span class="built_in">int</span> limit) </span><br></pre></td></tr></table></figure>

<p>结论：limit = -1时，会对结尾的空格进行分解。</p>
<p>比如：</p>
<p>对字符串str“hello口口world口”进行拆分，其中”口”表示空格，</p>
<p>split(str)输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>: <span class="string">&quot;hello&quot;</span>, length = <span class="number">5</span></span><br><span class="line"><span class="number">1</span>: <span class="string">&quot;&quot;</span>, length = <span class="number">0</span></span><br><span class="line"><span class="number">2</span>: <span class="string">&quot;world&quot;</span>,length = <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>split(“str”, -1)输出：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">0</span>: <span class="string">&quot;hello&quot;</span>, length = <span class="number">5</span></span><br><span class="line"><span class="attribute">1</span>: <span class="string">&quot;&quot;</span>, length = <span class="number">0</span></span><br><span class="line"><span class="attribute">2</span>: <span class="string">&quot;world&quot;</span>,length = <span class="number">5</span></span><br><span class="line"><span class="attribute">3</span>: <span class="string">&quot;&quot;</span>, length = <span class="number">0</span></span><br></pre></td></tr></table></figure>



<h4 id="14-最长公共前缀编写一个函数来查找字符串数组中的最长公共前缀。"><a href="#14-最长公共前缀编写一个函数来查找字符串数组中的最长公共前缀。" class="headerlink" title="14. 最长公共前缀编写一个函数来查找字符串数组中的最长公共前缀。"></a><a href="https://leetcode.cn/problems/longest-common-prefix/">14. 最长公共前缀</a>编写一个函数来查找字符串数组中的最长公共前缀。</h4><p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;flower&quot;</span>,<span class="string">&quot;flow&quot;</span>,<span class="string">&quot;flight&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;fl&quot;</span></span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">输入：<span class="keyword">strs</span> = [<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;racecar&quot;</span>,<span class="string">&quot;car&quot;</span>]</span><br><span class="line">输出：<span class="string">&quot;&quot;</span></span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure>

<p><strong>提示：</strong></p>
<ul>
<li><code>1 &lt;= strs.length &lt;= 200</code></li>
<li><code>0 &lt;= strs[i].length &lt;= 200</code></li>
<li><code>strs[i]</code> 仅由小写英文字母组成</li>
</ul>
<p>思路：</p>
<ol>
<li>边界条件，如果strs == null 或者strs.length == 0时，直接return “”;</li>
<li>要计算字符串数组的公共前缀，可以这么实现：</li>
</ol>
<p>初始化公共子串为String res = strs[0]，然后依次求：</p>
<p>res和strs[1]的最小公共子串，赋值给res;</p>
<p>res和strs[2]的最小公共子串，赋值给res;</p>
<p>…</p>
<p>res和strs[strs.length - 1]的最小公共子串。</p>
<p>则最终res的值就是题目要求的结果。</p>
<p>Java中使用String.split()方法的注意点（转义符）</p>
<p>对这些特殊字符进行split()拆分时，需要添加转义符。举个例子，如果需要以’.’进行拆分，则需要在前面添加”\\“。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.split(<span class="string">&quot;\\,&quot;</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>需要转义的字符</th>
</tr>
</thead>
<tbody><tr>
<td>(</td>
</tr>
<tr>
<td>[</td>
</tr>
<tr>
<td>{</td>
</tr>
<tr>
<td>/</td>
</tr>
<tr>
<td>^</td>
</tr>
<tr>
<td>-</td>
</tr>
<tr>
<td>$</td>
</tr>
<tr>
<td>¦</td>
</tr>
<tr>
<td>}</td>
</tr>
<tr>
<td>]</td>
</tr>
<tr>
<td>)</td>
</tr>
<tr>
<td>?</td>
</tr>
<tr>
<td>*</td>
</tr>
<tr>
<td>+</td>
</tr>
<tr>
<td>.</td>
</tr>
</tbody></table>
<h4 id="大数加法："><a href="#大数加法：" class="headerlink" title="大数加法："></a>大数加法：</h4><p> 描述</p>
<p>以字符串的形式读入两个数字，编写一个函数计算它们的和，以字符串形式返回。</p>
<p>数据范围：s.length, t.length &lt;= 100000, 字符串仅由’0’~‘9’构成</p>
<p>要求：时间复杂度 <em>O</em>(<em>n</em>)</p>
<p>示例1</p>
<p>输入：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;1&quot;</span>,<span class="string">&quot;99&quot;</span></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>+<span class="number">99</span>=<span class="number">100</span>       </span><br></pre></td></tr></table></figure>

<p>示例2</p>
<p>输入：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;114514&quot;</span>,<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;114514&quot;</span></span><br></pre></td></tr></table></figure>

<p>解题思路：</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习之排序</title>
    <url>/2024/01/25/sort/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Android图形系统概述</title>
    <url>/2024/03/03/android_display/</url>
    <content><![CDATA[<p>Android 中从应用程序绘制 View 到最终在屏幕上显示的流程。</p>
<p>Android App开发者可通过三种方式将图像绘制到屏幕上：</p>
<ul>
<li>Canvas</li>
<li>OpenGL ES</li>
<li>Vulkan</li>
</ul>
<p><strong>1. 应用程序层：</strong></p>
<ul>
<li>开发者在应用程序层通过 XML 布局文件或程序代码定义 UI 元素，如 TextView、ImageView 等。这些 UI 元素最终会被封装成 View 对象。</li>
</ul>
<p><strong>2. View的绘制：</strong></p>
<ul>
<li>通过调用View的onDraw()方法进行View的绘制，</li>
</ul>
<p><strong><code>Canvas</code></strong> 是 Android 中的绘图工具，而 <strong><code>Bitmap</code></strong> 可以看作是 <code>Canvas</code> 的绘图目标。在绘制时，<code>Canvas</code> 可以将图形元素绘制到关联的 <code>Bitmap</code> 上。</p>
<p><strong>3. 绘制缓冲区（Drawing buffer）</strong></p>
<p>绘制的内容通常存储在一个绘制缓冲区中，这个缓冲区使用**<code>Bitmap</code>**表示。<code>Bitmap</code> 是 Android 中表示位图的类，用于存储图像的像素数据。它可以被视为一个绘图缓冲区，用于保存绘制操作的结果。</p>
<p>使用 <code>Canvas</code> 对象可以将图形元素绘制到 <code>Bitmap</code> 上。例如，在 <code>onDraw</code> 方法中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">    Canvas bitmapCanvas = <span class="keyword">new</span> Canvas(bitmap);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 bitmapCanvas 上绘制图形元素</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将结果绘制到 View 的 Canvas 上</span></span><br><span class="line">    canvas.drawBitmap(bitmap, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4. Hardware Acceleration（硬件加速）</strong></p>
<p>如果启用了硬件加速，绘制的过程可能会在 GPU（图形处理单元）上执行，以提高绘制性能。Android 的硬件加速系统（Hwui）可以处理图形的光栅化和混合等操作。 </p>
<p><strong>5. DisplayList 和 RenderNode：</strong></p>
<ul>
<li>绘制的操作可以被记录到一个 DisplayList 中，它是一系列绘制指令的容器。RenderNode 是 DisplayList 的底层实现。</li>
</ul>
<p><strong>6. 图层合成：</strong></p>
<ul>
<li><p>View 最终与一个 Surface 相关联，Surface 包含了绘制内容的像素数据。</p>
</li>
<li><p>SurfaceFlinger 负责合成所有的 Layers 并送显到 Display </p>
</li>
<li><p>SurfaceFlinger 将不同的Layers按照 Z-Order的顺序进行合成，生成最终的屏幕显示内容。每个Layer都可以是一个 View。</p>
</li>
<li><p>SurfaceFlinger 根据 WMS 提供的窗口信息合成所有的 Layers（对应不同的Surface ），具体的合成策略由 <code>hwcomposer</code> HAL 模块决定并实施，最后也是由该模块送显到 Display，而 Gralloc 模块则负责分配图形缓冲区。</p>
</li>
<li><p><code>hwcomposer</code> （全称为 Hardware Composer）的主要功能是在硬件层面执行图形合成操作。它接受来自 SurfaceFlinger 的图层数据，将它们合成到帧缓冲区（Framebuffer）上，以在屏幕上显示。</p>
</li>
</ul>
<p><code>hwcomposer</code> 利用硬件加速来提高图形合成的性能。它能够利用 GPU等硬件加速设备执行图形操作，从而加速图层的合成和呈现</p>
<ul>
<li><strong>Layer</strong></li>
</ul>
<p>Layer 是 SurfaceFlinger 中的一个概念，它表示一个图形元素或一个图形层。每个应用程序窗口、系统 UI 元素等都是一个Layer。Layers 按照它们的 Z 轴值堆叠在一起，形成最终的显示。每个 Layer 通常与一个 Surface 对象相关联，这个 Surface 包含了图层的像素数据。</p>
<ul>
<li><strong>Surface</strong></li>
</ul>
<p>Surface 是Layer的一个抽象，它包含了一个或多个 Buffer，这些 Buffer 存储了图层的像素数据。</p>
<p>Surface由应用程序的 UI 线程或其他相关组件使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SurfaceView surfaceView = (SurfaceView) findViewById(R.id.surfaceView);</span><br><span class="line">SurfaceHolder surfaceHolder = surfaceView.getHolder();</span><br><span class="line">Canvas canvas = surfaceHolder.lockCanvas();</span><br><span class="line"><span class="comment">// 在 canvas 上进行绘制操作</span></span><br><span class="line">surfaceHolder.unlockCanvasAndPost(canvas);</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>Display</strong></li>
</ul>
<p>Display 表示一个物理或虚拟的显示屏幕。在 Android 中，一个设备可以有多个显示屏幕，例如，主屏幕、外部显示器等。每个 Display 包含一个或多个 Surface，这些 Surface 可以显示不同的图形内容。</p>
<p><strong>BufferQueue</strong></p>
<p>用于显示 Surface 的 BufferQueue 通常配置为三重缓冲（triple-buffering）。缓冲区是按需分配的，因此，如果生产者足够缓慢地生成缓冲区（例如在 60 fps 的显示屏上以 30 fps 的速度缓冲），队列中可能只有两个分配的缓冲区。按需分配缓冲区有助于最大限度地减少内存消耗。您可以在 <code>dumpsys SurfaceFlinger</code> 的输出中看到每个层级关联的缓冲区的摘要。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Dagger依赖注入框架的理解</title>
    <url>/2024/02/28/dependency_injection/</url>
    <content><![CDATA[<h5 id="Component-Builder"><a href="#Component-Builder" class="headerlink" title="@Component.Builder"></a>@Component.Builder</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [AppModule::class, NetworkModule::class])</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">inject</span><span class="params">(activity: SplashActivity)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    fun <span class="title">inject</span><span class="params">(activity: MainActivity)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    fun <span class="title">inject</span><span class="params">(fragment: BusStopFragment)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    fun <span class="title">inject</span><span class="params">(fragment: BusArrivalFragment)</span></span></span><br><span class="line"><span class="function">      </span></span><br><span class="line"><span class="function">  	@Component.Builder</span></span><br><span class="line"><span class="function">  	interface Builder </span>&#123;</span><br><span class="line"></span><br><span class="line">    		<span class="meta">@BindsInstance</span></span><br><span class="line">		    <span class="function">fun <span class="title">activity</span><span class="params">(activity: Activity)</span>: Builder</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    		fun <span class="title">build</span><span class="params">()</span>: AppComponent</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<p>Component.Builder中使用@BindsInstance标记的方法表示将该方法的参数（比如Activity）传递到依赖关系图中（dependency graph），该方法必须返回Builder实例。</p>
<p>这样，该Component所包含的Module都可以使用该Activity对象。也即provide方法所需的参数。</p>
<p>同时，Component.Builder中还得有个方法返回AppComponent对象,  名字可以自己起，一般叫build()或者create()。</p>
<p>MainActivity中就可以这么使用：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">		<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        DaggerAppComponent</span><br><span class="line">            .builder()</span><br><span class="line">            .activity(<span class="keyword">this</span>)</span><br><span class="line">            .build()</span><br><span class="line">            .inject(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一种实现方式：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [AppModule::class, NetworkModule::class])</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">SplashActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">MainActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusStopFragment</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusArrivalFragment</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="meta">@Component</span>.Builder</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">appModule</span><span class="params">(appModule: <span class="type">AppModule</span>)</span></span>: Builder</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">networkModule</span><span class="params">(networkModule: <span class="type">NetworkModule</span>)</span></span>: Builder</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">build</span><span class="params">()</span></span>: AppComponent</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Component.Builder中提供该Component所包含的Module的方法（注该方法返回的是Builder对象），</p>
<p>这样就退化为不使用Builder的形式，通过将Activity作为构造方法的参数传递给Module。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> comp: AppComponent <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">  	<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">      </span><br><span class="line">        comp = DaggerAppComponent</span><br><span class="line">            .builder()</span><br><span class="line">            .appModule(AppModule(<span class="keyword">this</span>))</span><br><span class="line">            .networkModule(NetworkModule(<span class="keyword">this</span>))</span><br><span class="line">            .build().apply &#123;</span><br><span class="line">                inject(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="literal">null</span>) &#123;</span><br><span class="line">            mainPresenter.goToBusStopList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Context.comp: AppComponent?</span><br><span class="line">    <span class="keyword">get</span>() = <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">is</span> MainActivity) comp <span class="keyword">else</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>



<h5 id="Component-Factory"><a href="#Component-Factory" class="headerlink" title="Component.Factory"></a>Component.Factory</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [AppModule::class, NetworkModule::class])</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Component</span>.Factory <span class="comment">// 1</span></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(<span class="meta">@BindsInstance</span> activity: <span class="type">Activity</span>)</span></span>: AppComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h5 id="Singleton"><a href="#Singleton" class="headerlink" title="@Singleton"></a><code>@Singleton</code></h5><p>同一个@Component的实例总是返回同一个给定类型的实例。</p>
<p>但是不同的@Component实例是可以返回不同类型的实例的。</p>
<h5 id="Component-Dependencies"><a href="#Component-Dependencies" class="headerlink" title="Component Dependencies"></a>Component Dependencies</h5><p>如果某个Component使用dependencies依赖了其它的Component，就需要在@Component.Factory的create()方法中添加它所依赖的Component参数。</p>
<h5 id="ApplicationComponent"><a href="#ApplicationComponent" class="headerlink" title="ApplicationComponent"></a>ApplicationComponent</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component(modules = [ApplicationModule::class])</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">locationObservable</span><span class="params">()</span></span>: Observable&lt;LocationEvent&gt; <span class="comment">//开放给依赖ApplicationComponent的Component使用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bussoEndpoint</span><span class="params">()</span></span>: BussoEndpoint <span class="comment">//开放给依赖ApplicationComponent的Component使用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Factory</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(<span class="meta">@BindsInstance</span> application: <span class="type">Application</span>)</span></span>: ApplicationComponent <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="ActivityComponent"><a href="#ActivityComponent" class="headerlink" title="ActivityComponent"></a>ActivityComponent</h6><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(</span></span><br><span class="line"><span class="meta">    modules = [ActivityModule::class],</span></span><br><span class="line"><span class="meta">    dependencies = [ApplicationComponent::class] // 1</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">SplashActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">MainActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">navigator</span><span class="params">()</span></span>: Navigator <span class="comment">//开放给依赖ActivityComponent的Component使用</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Component</span>.Factory</span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@BindsInstance</span> activity: <span class="type">Activity</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        applicationComponent: <span class="type">ApplicationComponent</span> <span class="comment">// 2</span></span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>: ActivityComponent</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在@Component.Factory的create()方法中添加ApplicationComponent参数，注意这里没有@BindsInstance注解。</p>
<h5 id="FragmentComponent"><a href="#FragmentComponent" class="headerlink" title="FragmentComponent"></a>FragmentComponent</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(</span></span><br><span class="line"><span class="meta">    modules = [FragmentModule::class],</span></span><br><span class="line"><span class="meta">    dependencies = [ActivityComponent::class, ApplicationComponent::class] // 1</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@FragmentScope</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FragmentComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusStopFragment</span>)</span></span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusArrivalFragment</span>)</span></span> <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Factory</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 4</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            applicationComponent: <span class="type">ApplicationComponent</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">            activityComponent: <span class="type">ActivityComponent</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>: FragmentComponent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="Subcomponents"><a href="#Subcomponents" class="headerlink" title="@Subcomponents"></a>@Subcomponents</h3><h5 id="ApplicationComponent-1"><a href="#ApplicationComponent-1" class="headerlink" title="ApplicationComponent"></a>ApplicationComponent</h5><p>相较Component Dependencies来说，ApplicationComponent不用发布公开方法出来了。但是需要为它的children定义factory方法；</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(modules = [ApplicationModule::class])</span></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">activityComponentFactory</span><span class="params">()</span></span>: ActivityComponent.Factory <span class="comment">//需要为自己的子组件定义获取方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Component</span>.Factory</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(<span class="meta">@BindsInstance</span> application: <span class="type">Application</span>)</span></span>: ApplicationComponent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ActivityComponent-1"><a href="#ActivityComponent-1" class="headerlink" title="ActivityComponent"></a>ActivityComponent</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subcomponent(</span></span><br><span class="line"><span class="meta">    modules = [ActivityModule::class]</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">SplashActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(activity: <span class="type">MainActivity</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">fragmentComponent</span><span class="params">()</span></span>: FragmentComponent <span class="comment">//需要为自己的子组件定义获取方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subcomponent</span>.Factory</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@BindsInstance</span> activity: <span class="type">Activity</span></span></span></span><br><span class="line"><span class="params"><span class="function">        )</span></span>: ActivityComponent</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="FragmentComponent-1"><a href="#FragmentComponent-1" class="headerlink" title="FragmentComponent"></a>FragmentComponent</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Subcomponent(</span></span><br><span class="line"><span class="meta">    modules = [FragmentModule::class]</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@FragmentScope</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">FragmentComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusStopFragment</span>)</span></span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">fun</span> <span class="title">inject</span><span class="params">(fragment: <span class="type">BusArrivalFragment</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="ApplicationComponent的创建"><a href="#ApplicationComponent的创建" class="headerlink" title="ApplicationComponent的创建"></a>ApplicationComponent的创建</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> : <span class="type">Application</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">lateinit</span> <span class="keyword">var</span> appComponent: ApplicationComponent</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate()</span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">    appComponent = DaggerApplicationComponent</span><br><span class="line">        .factory()</span><br><span class="line">        .create(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Context.appComp: ApplicationComponent</span><br><span class="line">  <span class="keyword">get</span>() = (applicationContext <span class="keyword">as</span> Main).appComponent</span><br></pre></td></tr></table></figure>

<h5 id="ActivityComponent的创建"><a href="#ActivityComponent的创建" class="headerlink" title="ActivityComponent的创建"></a>ActivityComponent的创建</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> mainPresenter: MainPresenter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> comp: ActivityComponent</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        comp = application.appComp  <span class="comment">//借助该Activity所依附的Application来创建</span></span><br><span class="line">            .activityComponentFactory()</span><br><span class="line">            .create(<span class="keyword">this</span>)</span><br><span class="line">            .apply &#123;</span><br><span class="line">                inject(<span class="keyword">this</span><span class="symbol">@MainActivity</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState == <span class="literal">null</span>) &#123;</span><br><span class="line">            mainPresenter.goToBusStopList()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Context.activityComp: ActivityComponent</span><br><span class="line">    <span class="keyword">get</span>() = (<span class="keyword">this</span> <span class="keyword">as</span> MainActivity).comp</span><br></pre></td></tr></table></figure>

<h5 id="FragmentComponent的创建"><a href="#FragmentComponent的创建" class="headerlink" title="FragmentComponent的创建"></a>FragmentComponent的创建</h5><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BusArrivalFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">  	<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onAttach</span><span class="params">(context: <span class="type">Context</span>)</span></span> &#123;</span><br><span class="line">        context.activityComp  <span class="comment">//借助该Fragment所依附的Activity的ActivityComponent来创建</span></span><br><span class="line">            .fragmentComponent()</span><br><span class="line">            .inject(<span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Subcomponents-VS-Component-Dependencies"><a href="#Subcomponents-VS-Component-Dependencies" class="headerlink" title="@Subcomponents VS Component Dependencies"></a>@Subcomponents VS Component Dependencies</h4><p>使用Component Dependencies时：</p>
<ol>
<li><p>当前Component需要分享给其它Component的对象，需要在该Component中提供factory methods进行显式的发布；</p>
</li>
<li><p>当前Component所依赖的Components组件，必须在该@Component的dependencies属性中列出；</p>
</li>
<li><p>依赖关系不具备可传递性，如果<code>@Component</code> <strong>A</strong> 依赖 <strong>B</strong> ，<strong>B</strong> 依赖 <strong>C</strong>，并不意味着<strong>A</strong>依赖<strong>C</strong>；</p>
</li>
<li><p>当有存在的对象时，可以使用<code>@Component.Builder</code> and <code>@Component.Factory</code>；</p>
</li>
<li><p>当使用<strong>dependencies</strong>属性进行依赖管理时，不支持<strong>multibinding</strong>。</p>
</li>
</ol>
<p>使用**@Subcomponents**时：</p>
<ol>
<li><p>每一个@Subcomponent会从它的父@Component或者父@Subcomponent组件继承所有的对象，因此不需要显式的发布；</p>
</li>
<li><p>依赖关系具备可传递性：如果@Subcomponent <strong>A</strong> 继承自 <strong>B</strong> 并且 <strong>B</strong> 继承自 <strong>C</strong>, 那么 <strong>A</strong> 继承自 <strong>C</strong>；</p>
</li>
<li><p>@Subcomponent组件的实例通过父@Component或@Subcomponent组件的factory方法来创建；</p>
</li>
<li><p>当有存在的对象时，可以使用@Subcomponent.Builder和@Subcomponent.Factory，父组件会为它的children组件定义相应的factory方法；</p>
</li>
<li><p><strong>multibinding</strong>可以和@Subcomponent结合使用；</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Android中常用的设计模式总结</title>
    <url>/2024/02/26/Android%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="MVP-Vs-MVVM"><a href="#MVP-Vs-MVVM" class="headerlink" title="MVP Vs MVVM"></a>MVP Vs MVVM</h3><ol>
<li><strong>解耦：</strong><ul>
<li>两者都旨在实现解耦，以便更容易测试和维护代码。</li>
</ul>
</li>
<li><strong>分离关注点：</strong><ul>
<li>都倡导将关注点分离，以确保清晰的代码组织。</li>
</ul>
</li>
<li><strong>单一职责原则：</strong><ul>
<li>两者都遵循单一职责原则，确保每个组件都有一个清晰的责任。</li>
</ul>
</li>
</ol>
<table>
<thead>
<tr>
<th>MVP</th>
<th>MVVM</th>
</tr>
</thead>
<tbody><tr>
<td>Presenter和View一般是1v1的关系，耦合度较高，难以实现复用</td>
<td>多个View可以关联一个ViewModel</td>
</tr>
<tr>
<td>Presenter不会感知View的生命周期，需要Presenter手动管理生命周期，避免内存泄漏</td>
<td>ViewModel可以自动感知View的生命周期</td>
</tr>
<tr>
<td>Presenter会持有View的引用,</td>
<td>ViewModel不持有View的引用</td>
</tr>
<tr>
<td></td>
<td>支持DataBinding</td>
</tr>
</tbody></table>
]]></content>
  </entry>
</search>
